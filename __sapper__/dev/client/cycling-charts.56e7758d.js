import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, o as onMount, v as validate_slots, e as element, f as claim_element, g as children, b as detach_dev, j as attr_dev, k as add_location, l as insert_dev, n as noop } from './client.36aa3a09.js';
import './_commonjsHelpers.1e235def.js';
import { C as Chart } from './Chart.97e39373.js';

/* src\routes\sports\cycling\cycling-charts.svelte generated by Svelte v3.22.3 */
const file = "src\\routes\\sports\\cycling\\cycling-charts.svelte";

function create_fragment(ctx) {
	let canvas;

	const block = {
		c: function create() {
			canvas = element("canvas");
			this.h();
		},
		l: function claim(nodes) {
			canvas = claim_element(nodes, "CANVAS", { id: true, width: true, height: true });
			children(canvas).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(canvas, "id", "myChart");
			attr_dev(canvas, "width", "2");
			attr_dev(canvas, "height", "1");
			add_location(canvas, file, 0, 0, 0);
		},
		m: function mount(target, anchor) {
			insert_dev(target, canvas, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(canvas);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { data } = $$props;

	function createChart() {
		var ctx = document.getElementById("myChart");

		var myChart = new Chart(ctx,
		{
				type: "line",
				data,
				options: {
					title: {
						display: true,
						text: "Performance evolution"
					},
					scales: {
						yAxes: [
							{ id: "Meters covered", position: "left" },
							{
								id: "elevation",
								position: "right",
								gridLines: { display: false }
							}
						]
					}
				}
			});
	}

	onMount(createChart);
	const writable_props = ["data"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Cycling_charts> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Cycling_charts", $$slots, []);

	$$self.$set = $$props => {
		if ("data" in $$props) $$invalidate(0, data = $$props.data);
	};

	$$self.$capture_state = () => ({ onMount, Chart, data, createChart });

	$$self.$inject_state = $$props => {
		if ("data" in $$props) $$invalidate(0, data = $$props.data);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [data, createChart];
}

class Cycling_charts extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { data: 0, createChart: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Cycling_charts",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*data*/ ctx[0] === undefined && !("data" in props)) {
			console.warn("<Cycling_charts> was created without expected prop 'data'");
		}
	}

	get data() {
		throw new Error("<Cycling_charts>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set data(value) {
		throw new Error("<Cycling_charts>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get createChart() {
		return this.$$.ctx[1];
	}

	set createChart(value) {
		throw new Error("<Cycling_charts>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Cycling_charts;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3ljbGluZy1jaGFydHMuNTZlNzc1OGQuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvc3BvcnRzL2N5Y2xpbmcvY3ljbGluZy1jaGFydHMuc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxjYW52YXMgaWQ9XCJteUNoYXJ0XCIgd2lkdGg9XCIyXCIgaGVpZ2h0PVwiMVwiPjwvY2FudmFzPlxyXG5cclxuPHNjcmlwdD5cclxuaW1wb3J0IHsgb25Nb3VudCB9IGZyb20gXCJzdmVsdGVcIjtcclxuaW1wb3J0IENoYXJ0IGZyb20gXCJjaGFydC5qc1wiO1xyXG5leHBvcnQgbGV0IGRhdGE7IFxyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ2hhcnQoKXtcclxuICB2YXIgY3R4ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ215Q2hhcnQnKTtcclxuICAgIHZhciBteUNoYXJ0ID0gbmV3IENoYXJ0KGN0eCwge1xyXG4gICAgICAgIHR5cGU6ICdsaW5lJyxcclxuICAgICAgICBkYXRhOiBkYXRhLFxyXG4gICAgICAgIG9wdGlvbnM6IHtcclxuICAgICAgICAgICAgdGl0bGU6IHtcclxuICAgICAgICAgICAgICAgIGRpc3BsYXk6IHRydWUsXHJcbiAgICAgICAgICAgICAgICB0ZXh0OiAnUGVyZm9ybWFuY2UgZXZvbHV0aW9uJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNjYWxlczoge1xyXG4gICAgICAgICAgICAgICAgeUF4ZXM6IFxyXG4gICAgICAgICAgICAgICAgW3tcclxuICAgICAgICBpZDogJ01ldGVycyBjb3ZlcmVkJyxcclxuICAgICAgICBwb3NpdGlvbjogJ2xlZnQnLFxyXG4gICAgICB9LCB7XHJcbiAgICAgICAgaWQ6ICdlbGV2YXRpb24nLFxyXG4gICAgICAgIHBvc2l0aW9uOiAncmlnaHQnLFxyXG4gICAgICAgIGdyaWRMaW5lczoge1xyXG4gICAgICAgICAgICAgICAgICAgZGlzcGxheTogZmFsc2VcclxuICAgICAgICAgICAgICAgfSxcclxuICAgICAgfV1cclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbm9uTW91bnQoY3JlYXRlQ2hhcnQpXHJcbjwvc2NyaXB0PlxyXG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztPQUtXLElBQUk7O1VBQ0MsV0FBVztNQUNyQixHQUFHLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxTQUFTOztNQUNyQyxPQUFPLE9BQU8sS0FBSyxDQUFDLEdBQUc7O0lBQ3ZCLElBQUksRUFBRSxNQUFNO0lBQ04sSUFBSTtJQUNWLE9BQU87S0FDSCxLQUFLO01BQ0QsT0FBTyxFQUFFLElBQUk7TUFDYixJQUFJLEVBQUUsdUJBQXVCOztLQUVqQyxNQUFNO01BQ0YsS0FBSztTQUViLEVBQUUsRUFBRSxnQkFBZ0IsRUFDcEIsUUFBUSxFQUFFLE1BQU07O1FBRWhCLEVBQUUsRUFBRSxXQUFXO1FBQ2YsUUFBUSxFQUFFLE9BQU87UUFDakIsU0FBUyxJQUNFLE9BQU8sRUFBRSxLQUFLOzs7Ozs7OztDQVFqQyxPQUFPLENBQUMsV0FBVzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9
