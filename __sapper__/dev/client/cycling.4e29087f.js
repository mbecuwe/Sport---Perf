import { S as SvelteComponentDev, i as init, d as dispatch_dev, F as globals, s as safe_not_equal, v as validate_slots, e as element, t as text, a as space, w as create_component, f as claim_element, g as children, h as claim_text, b as detach_dev, c as claim_space, x as claim_component, j as attr_dev, k as add_location, l as insert_dev, m as append_dev, y as mount_component, n as noop, z as transition_in, A as transition_out, B as destroy_component } from './client.5826cea1.js';
import './_commonjsHelpers.1e235def.js';
import './Chart.b2015135.js';
import Cycling_charts from './cycling-charts.fa8da93b.js';

/* src/routes/sports/cycling/cycling.svelte generated by Svelte v3.22.3 */

const { console: console_1 } = globals;
const file = "src/routes/sports/cycling/cycling.svelte";

function create_fragment(ctx) {
	let div4;
	let div1;
	let div0;
	let t0;
	let t1;
	let div3;
	let div2;
	let img;
	let img_src_value;
	let t2;
	let div5;
	let table;
	let thead;
	let tr0;
	let th0;
	let t3;
	let t4;
	let th1;
	let t5;
	let t6;
	let th2;
	let t7;
	let t8;
	let th3;
	let t9;
	let t10;
	let tbody;
	let tr1;
	let td0;
	let t11;
	let t12;
	let td1;
	let t13;
	let t14;
	let td2;
	let t15;
	let t16;
	let td3;
	let t17;
	let t18;
	let td4;
	let t19;
	let tr2;
	let td5;
	let t20;
	let t21;
	let td6;
	let t22;
	let t23;
	let td7;
	let t24;
	let t25;
	let td8;
	let t26;
	let tr3;
	let td9;
	let t27;
	let t28;
	let td10;
	let t29;
	let t30;
	let td11;
	let t31;
	let t32;
	let td12;
	let t33;
	let div6;
	let h3;
	let t34;
	let t35;
	let current;

	const charts = new Cycling_charts({
			props: { data: /*data*/ ctx[0] },
			$$inline: true
		});

	const block = {
		c: function create() {
			div4 = element("div");
			div1 = element("div");
			div0 = element("div");
			t0 = text("Cycling Performance");
			t1 = space();
			div3 = element("div");
			div2 = element("div");
			img = element("img");
			t2 = space();
			div5 = element("div");
			table = element("table");
			thead = element("thead");
			tr0 = element("tr");
			th0 = element("th");
			t3 = text("Metrics");
			t4 = space();
			th1 = element("th");
			t5 = text("Value");
			t6 = space();
			th2 = element("th");
			t7 = text("vs. Last 3 sessions");
			t8 = space();
			th3 = element("th");
			t9 = text("vs. Last month");
			t10 = space();
			tbody = element("tbody");
			tr1 = element("tr");
			td0 = element("td");
			t11 = text("Distance (m)");
			t12 = space();
			td1 = element("td");
			t13 = text(/*last_distance*/ ctx[1]);
			t14 = space();
			td2 = element("td");
			t15 = text(/*last_distance*/ ctx[1]);
			t16 = space();
			td3 = element("td");
			t17 = text(/*average_3_distance*/ ctx[4]);
			t18 = space();
			td4 = element("td");
			t19 = space();
			tr2 = element("tr");
			td5 = element("td");
			t20 = text("Speed (km/h)");
			t21 = space();
			td6 = element("td");
			t22 = text(/*last_speed*/ ctx[2]);
			t23 = space();
			td7 = element("td");
			t24 = text(/*average_3_speed*/ ctx[6]);
			t25 = space();
			td8 = element("td");
			t26 = space();
			tr3 = element("tr");
			td9 = element("td");
			t27 = text("Elevation (m)");
			t28 = space();
			td10 = element("td");
			t29 = text(/*last_elevation*/ ctx[3]);
			t30 = space();
			td11 = element("td");
			t31 = text(/*average_3_elevation*/ ctx[5]);
			t32 = space();
			td12 = element("td");
			t33 = space();
			div6 = element("div");
			h3 = element("h3");
			t34 = text("See your evolution in this chart:");
			t35 = space();
			create_component(charts.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div4 = claim_element(nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			div1 = claim_element(div4_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			t0 = claim_text(div0_nodes, "Cycling Performance");
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			t1 = claim_space(div4_nodes);
			div3 = claim_element(div4_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			img = claim_element(div2_nodes, "IMG", { src: true, alt: true });
			div2_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			div4_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			div5 = claim_element(nodes, "DIV", { class: true });
			var div5_nodes = children(div5);
			table = claim_element(div5_nodes, "TABLE", { class: true });
			var table_nodes = children(table);
			thead = claim_element(table_nodes, "THEAD", {});
			var thead_nodes = children(thead);
			tr0 = claim_element(thead_nodes, "TR", {});
			var tr0_nodes = children(tr0);
			th0 = claim_element(tr0_nodes, "TH", { class: true });
			var th0_nodes = children(th0);
			t3 = claim_text(th0_nodes, "Metrics");
			th0_nodes.forEach(detach_dev);
			t4 = claim_space(tr0_nodes);
			th1 = claim_element(tr0_nodes, "TH", { class: true });
			var th1_nodes = children(th1);
			t5 = claim_text(th1_nodes, "Value");
			th1_nodes.forEach(detach_dev);
			t6 = claim_space(tr0_nodes);
			th2 = claim_element(tr0_nodes, "TH", { colspan: true, class: true });
			var th2_nodes = children(th2);
			t7 = claim_text(th2_nodes, "vs. Last 3 sessions");
			th2_nodes.forEach(detach_dev);
			t8 = claim_space(tr0_nodes);
			th3 = claim_element(tr0_nodes, "TH", { colspan: true, class: true });
			var th3_nodes = children(th3);
			t9 = claim_text(th3_nodes, "vs. Last month");
			th3_nodes.forEach(detach_dev);
			tr0_nodes.forEach(detach_dev);
			thead_nodes.forEach(detach_dev);
			t10 = claim_space(table_nodes);
			tbody = claim_element(table_nodes, "TBODY", {});
			var tbody_nodes = children(tbody);
			tr1 = claim_element(tbody_nodes, "TR", {});
			var tr1_nodes = children(tr1);
			td0 = claim_element(tr1_nodes, "TD", { class: true });
			var td0_nodes = children(td0);
			t11 = claim_text(td0_nodes, "Distance (m)");
			td0_nodes.forEach(detach_dev);
			t12 = claim_space(tr1_nodes);
			td1 = claim_element(tr1_nodes, "TD", { class: true });
			var td1_nodes = children(td1);
			t13 = claim_text(td1_nodes, /*last_distance*/ ctx[1]);
			td1_nodes.forEach(detach_dev);
			t14 = claim_space(tr1_nodes);
			td2 = claim_element(tr1_nodes, "TD", { class: true });
			var td2_nodes = children(td2);
			t15 = claim_text(td2_nodes, /*last_distance*/ ctx[1]);
			td2_nodes.forEach(detach_dev);
			t16 = claim_space(tr1_nodes);
			td3 = claim_element(tr1_nodes, "TD", { class: true });
			var td3_nodes = children(td3);
			t17 = claim_text(td3_nodes, /*average_3_distance*/ ctx[4]);
			td3_nodes.forEach(detach_dev);
			t18 = claim_space(tr1_nodes);
			td4 = claim_element(tr1_nodes, "TD", { class: true });
			children(td4).forEach(detach_dev);
			tr1_nodes.forEach(detach_dev);
			t19 = claim_space(tbody_nodes);
			tr2 = claim_element(tbody_nodes, "TR", { class: true });
			var tr2_nodes = children(tr2);
			td5 = claim_element(tr2_nodes, "TD", { class: true });
			var td5_nodes = children(td5);
			t20 = claim_text(td5_nodes, "Speed (km/h)");
			td5_nodes.forEach(detach_dev);
			t21 = claim_space(tr2_nodes);
			td6 = claim_element(tr2_nodes, "TD", { class: true });
			var td6_nodes = children(td6);
			t22 = claim_text(td6_nodes, /*last_speed*/ ctx[2]);
			td6_nodes.forEach(detach_dev);
			t23 = claim_space(tr2_nodes);
			td7 = claim_element(tr2_nodes, "TD", { class: true });
			var td7_nodes = children(td7);
			t24 = claim_text(td7_nodes, /*average_3_speed*/ ctx[6]);
			td7_nodes.forEach(detach_dev);
			t25 = claim_space(tr2_nodes);
			td8 = claim_element(tr2_nodes, "TD", { class: true });
			children(td8).forEach(detach_dev);
			tr2_nodes.forEach(detach_dev);
			t26 = claim_space(tbody_nodes);
			tr3 = claim_element(tbody_nodes, "TR", {});
			var tr3_nodes = children(tr3);
			td9 = claim_element(tr3_nodes, "TD", { class: true });
			var td9_nodes = children(td9);
			t27 = claim_text(td9_nodes, "Elevation (m)");
			td9_nodes.forEach(detach_dev);
			t28 = claim_space(tr3_nodes);
			td10 = claim_element(tr3_nodes, "TD", { class: true });
			var td10_nodes = children(td10);
			t29 = claim_text(td10_nodes, /*last_elevation*/ ctx[3]);
			td10_nodes.forEach(detach_dev);
			t30 = claim_space(tr3_nodes);
			td11 = claim_element(tr3_nodes, "TD", { class: true });
			var td11_nodes = children(td11);
			t31 = claim_text(td11_nodes, /*average_3_elevation*/ ctx[5]);
			td11_nodes.forEach(detach_dev);
			t32 = claim_space(tr3_nodes);
			td12 = claim_element(tr3_nodes, "TD", { class: true });
			children(td12).forEach(detach_dev);
			tr3_nodes.forEach(detach_dev);
			tbody_nodes.forEach(detach_dev);
			table_nodes.forEach(detach_dev);
			div5_nodes.forEach(detach_dev);
			t33 = claim_space(nodes);
			div6 = claim_element(nodes, "DIV", {});
			var div6_nodes = children(div6);
			h3 = claim_element(div6_nodes, "H3", { class: true });
			var h3_nodes = children(h3);
			t34 = claim_text(h3_nodes, "See your evolution in this chart:");
			h3_nodes.forEach(detach_dev);
			t35 = claim_space(div6_nodes);
			claim_component(charts.$$.fragment, div6_nodes);
			div6_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "text-center p-2 text-2xl font-semibold bg-gray-100");
			add_location(div0, file, 89, 4, 2100);
			attr_dev(div1, "class", "flex-initial w-2/3 p-2");
			add_location(div1, file, 88, 2, 2059);
			if (img.src !== (img_src_value = "cycling.jpg")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "cycling");
			add_location(img, file, 95, 4, 2286);
			attr_dev(div2, "class", " text-right p-2");
			add_location(div2, file, 94, 4, 2252);
			attr_dev(div3, "class", "flex-initial w-1/3 p-2");
			add_location(div3, file, 93, 2, 2211);
			attr_dev(div4, "class", "flex h-48");
			add_location(div4, file, 87, 0, 2033);
			attr_dev(th0, "class", "px-4 py-2");
			add_location(th0, file, 106, 8, 2450);
			attr_dev(th1, "class", "px-4 py-2");
			add_location(th1, file, 107, 8, 2493);
			attr_dev(th2, "colspan", "2");
			attr_dev(th2, "class", "px-4 py-2 ");
			add_location(th2, file, 108, 8, 2534);
			attr_dev(th3, "colspan", "2");
			attr_dev(th3, "class", "px-4 py-2");
			add_location(th3, file, 109, 8, 2600);
			add_location(tr0, file, 105, 8, 2437);
			add_location(thead, file, 104, 4, 2421);
			attr_dev(td0, "class", "border px-4 py-2");
			add_location(td0, file, 114, 8, 2712);
			attr_dev(td1, "class", "border px-4 py-2");
			add_location(td1, file, 115, 8, 2767);
			attr_dev(td2, "class", "border px-4 py-2");
			add_location(td2, file, 116, 8, 2825);
			attr_dev(td3, "class", "border px-4 py-2");
			add_location(td3, file, 117, 8, 2883);
			attr_dev(td4, "class", "border px-4 py-2");
			add_location(td4, file, 118, 16, 2954);
			add_location(tr1, file, 113, 8, 2699);
			attr_dev(td5, "class", "border px-4 py-2");
			add_location(td5, file, 121, 8, 3044);
			attr_dev(td6, "class", "border px-4 py-2");
			add_location(td6, file, 122, 8, 3099);
			attr_dev(td7, "class", "border px-4 py-2");
			add_location(td7, file, 123, 8, 3154);
			attr_dev(td8, "class", "border px-4 py-2");
			add_location(td8, file, 124, 16, 3222);
			attr_dev(tr2, "class", "bg-gray-100");
			add_location(tr2, file, 120, 8, 3011);
			attr_dev(td9, "class", "border px-4 py-2");
			add_location(td9, file, 127, 8, 3292);
			attr_dev(td10, "class", "border px-4 py-2");
			add_location(td10, file, 128, 8, 3348);
			attr_dev(td11, "class", "border px-4 py-2");
			add_location(td11, file, 129, 8, 3407);
			attr_dev(td12, "class", "border px-4 py-2");
			add_location(td12, file, 130, 16, 3479);
			add_location(tr3, file, 126, 8, 3279);
			add_location(tbody, file, 112, 4, 2683);
			attr_dev(table, "class", "table-auto text-center ");
			add_location(table, file, 103, 4, 2377);
			attr_dev(div5, "class", "p-10");
			add_location(div5, file, 102, 0, 2354);
			attr_dev(h3, "class", "px-10 py-5");
			add_location(h3, file, 139, 1, 3572);
			add_location(div6, file, 138, 0, 3564);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div4, anchor);
			append_dev(div4, div1);
			append_dev(div1, div0);
			append_dev(div0, t0);
			append_dev(div4, t1);
			append_dev(div4, div3);
			append_dev(div3, div2);
			append_dev(div2, img);
			insert_dev(target, t2, anchor);
			insert_dev(target, div5, anchor);
			append_dev(div5, table);
			append_dev(table, thead);
			append_dev(thead, tr0);
			append_dev(tr0, th0);
			append_dev(th0, t3);
			append_dev(tr0, t4);
			append_dev(tr0, th1);
			append_dev(th1, t5);
			append_dev(tr0, t6);
			append_dev(tr0, th2);
			append_dev(th2, t7);
			append_dev(tr0, t8);
			append_dev(tr0, th3);
			append_dev(th3, t9);
			append_dev(table, t10);
			append_dev(table, tbody);
			append_dev(tbody, tr1);
			append_dev(tr1, td0);
			append_dev(td0, t11);
			append_dev(tr1, t12);
			append_dev(tr1, td1);
			append_dev(td1, t13);
			append_dev(tr1, t14);
			append_dev(tr1, td2);
			append_dev(td2, t15);
			append_dev(tr1, t16);
			append_dev(tr1, td3);
			append_dev(td3, t17);
			append_dev(tr1, t18);
			append_dev(tr1, td4);
			append_dev(tbody, t19);
			append_dev(tbody, tr2);
			append_dev(tr2, td5);
			append_dev(td5, t20);
			append_dev(tr2, t21);
			append_dev(tr2, td6);
			append_dev(td6, t22);
			append_dev(tr2, t23);
			append_dev(tr2, td7);
			append_dev(td7, t24);
			append_dev(tr2, t25);
			append_dev(tr2, td8);
			append_dev(tbody, t26);
			append_dev(tbody, tr3);
			append_dev(tr3, td9);
			append_dev(td9, t27);
			append_dev(tr3, t28);
			append_dev(tr3, td10);
			append_dev(td10, t29);
			append_dev(tr3, t30);
			append_dev(tr3, td11);
			append_dev(td11, t31);
			append_dev(tr3, t32);
			append_dev(tr3, td12);
			insert_dev(target, t33, anchor);
			insert_dev(target, div6, anchor);
			append_dev(div6, h3);
			append_dev(h3, t34);
			append_dev(div6, t35);
			mount_component(charts, div6, null);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(charts.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(charts.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div4);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(div5);
			if (detaching) detach_dev(t33);
			if (detaching) detach_dev(div6);
			destroy_component(charts);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function preload({ params, query }) {
	return this.fetch(`sports/cycling.json`).then(r => r.json()).then(data_raw => {
		return { data_raw };
	});
}

function dividevector(a, b) {
	return a.map((e, i) => e / b[i]);
}

function instance($$self, $$props, $$invalidate) {
	let { data_raw } = $$props;

	// Compute data for charts
	let list_meters = [];

	let list_date = [];
	let list_elevation = [];
	let list_minutes = [];

	data_raw.forEach(x => {
		list_meters.push(x.meters);
		list_date.push(x.date);
		list_elevation.push(x.elevation);
		list_minutes.push(x.minutes);
	});

	const data = {
		labels: list_date,
		datasets: [
			{
				label: "Meters covered",
				yAxisID: "Meters covered",
				data: list_meters,
				borderColor: "#3e95cd",
				fill: false
			},
			{
				label: "elevation",
				data: list_elevation,
				yAxisID: "elevation",
				borderColor: "#8e5ea2",
				fill: false
			}
		]
	};

	// TODO: verifiy ordering of dates and sessions
	// Compute average distance, speed, elevation, 
	// Last session
	const last_distance = list_meters[list_meters.length - 1];

	const last_hours = list_minutes[list_minutes.length - 1] / 60;
	const last_speed = last_distance / 1000 / last_hours;
	const last_elevation = list_elevation[list_elevation.length - 1];

	// Last 3 sessions
	const distance_3_session = list_meters.slice(Math.max(list_meters.length - 3, 0));

	const minutes_3_session = list_minutes.slice(Math.max(list_minutes.length - 3, 0));
	const elevation_3_session = list_elevation.slice(Math.max(list_elevation.length - 3, 0));
	const average = arr => arr.reduce((p, c) => p + c, 0) / arr.length;
	const average_3_distance = average(distance_3_session);
	const average_3_elevation = average(elevation_3_session);
	const average_3_speed = average(dividevector(distance_3_session, minutes_3_session)) * 60 / 1000;
	console.log(average_3_speed);
	const writable_props = ["data_raw"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<Cycling> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Cycling", $$slots, []);

	$$self.$set = $$props => {
		if ("data_raw" in $$props) $$invalidate(7, data_raw = $$props.data_raw);
	};

	$$self.$capture_state = () => ({
		preload,
		Charts: Cycling_charts,
		data_raw,
		list_meters,
		list_date,
		list_elevation,
		list_minutes,
		data,
		last_distance,
		last_hours,
		last_speed,
		last_elevation,
		distance_3_session,
		minutes_3_session,
		elevation_3_session,
		average,
		average_3_distance,
		average_3_elevation,
		dividevector,
		average_3_speed
	});

	$$self.$inject_state = $$props => {
		if ("data_raw" in $$props) $$invalidate(7, data_raw = $$props.data_raw);
		if ("list_meters" in $$props) list_meters = $$props.list_meters;
		if ("list_date" in $$props) list_date = $$props.list_date;
		if ("list_elevation" in $$props) list_elevation = $$props.list_elevation;
		if ("list_minutes" in $$props) list_minutes = $$props.list_minutes;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		data,
		last_distance,
		last_speed,
		last_elevation,
		average_3_distance,
		average_3_elevation,
		average_3_speed,
		data_raw
	];
}

class Cycling extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { data_raw: 7, data: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Cycling",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*data_raw*/ ctx[7] === undefined && !("data_raw" in props)) {
			console_1.warn("<Cycling> was created without expected prop 'data_raw'");
		}
	}

	get data_raw() {
		throw new Error("<Cycling>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set data_raw(value) {
		throw new Error("<Cycling>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get data() {
		return this.$$.ctx[0];
	}

	set data(value) {
		throw new Error("<Cycling>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Cycling;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
