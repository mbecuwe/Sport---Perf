import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, J as validate_each_argument, v as validate_slots, e as element, t as text, f as claim_element, g as children, h as claim_text, b as detach_dev, k as add_location, l as insert_dev, m as append_dev, n as noop, a as space, c as claim_space, j as attr_dev, w as create_component, x as claim_component, y as mount_component, z as transition_in, A as transition_out, K as destroy_each, B as destroy_component } from './client.abf8ff63.js';
import './_commonjsHelpers.1e235def.js';
import './Chart.97e39373.js';
import Cycling_charts from './cycling-charts.20c6d5fa.js';

/* src\routes\sports\cycling\cycling.svelte generated by Svelte v3.22.3 */
const file = "src\\routes\\sports\\cycling\\cycling.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[30] = list[i];
	child_ctx[32] = i;
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[33] = list[i];
	return child_ctx;
}

// (149:4) {#each get_last_nb_sessions(3, list_date) as date}
function create_each_block_1(ctx) {
	let li;
	let t_value = /*date*/ ctx[33] + "";
	let t;

	const block = {
		c: function create() {
			li = element("li");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", {});
			var li_nodes = children(li);
			t = claim_text(li_nodes, t_value);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(li, file, 149, 4, 4188);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, t);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(149:4) {#each get_last_nb_sessions(3, list_date) as date}",
		ctx
	});

	return block;
}

// (216:12) {#each distance_3_session as distance, i}
function create_each_block(ctx) {
	let tr;
	let td0;
	let t0_value = /*date_3_session*/ ctx[8][/*i*/ ctx[32]] + "";
	let t0;
	let t1;
	let td1;
	let t2_value = /*distance*/ ctx[30] + "";
	let t2;
	let t3;
	let td2;
	let t4_value = /*minutes_3_session*/ ctx[6][/*i*/ ctx[32]] + "";
	let t4;
	let t5;
	let td3;
	let t6_value = round_2_decimal(/*distance*/ ctx[30] / 1000 / (/*minutes_3_session*/ ctx[6][/*i*/ ctx[32]] / 60)) + "";
	let t6;
	let t7;
	let td4;
	let t8_value = /*elevation_3_session*/ ctx[7][/*i*/ ctx[32]] + "";
	let t8;
	let t9;

	const block = {
		c: function create() {
			tr = element("tr");
			td0 = element("td");
			t0 = text(t0_value);
			t1 = space();
			td1 = element("td");
			t2 = text(t2_value);
			t3 = space();
			td2 = element("td");
			t4 = text(t4_value);
			t5 = space();
			td3 = element("td");
			t6 = text(t6_value);
			t7 = space();
			td4 = element("td");
			t8 = text(t8_value);
			t9 = space();
			this.h();
		},
		l: function claim(nodes) {
			tr = claim_element(nodes, "TR", {});
			var tr_nodes = children(tr);
			td0 = claim_element(tr_nodes, "TD", { class: true });
			var td0_nodes = children(td0);
			t0 = claim_text(td0_nodes, t0_value);
			td0_nodes.forEach(detach_dev);
			t1 = claim_space(tr_nodes);
			td1 = claim_element(tr_nodes, "TD", { class: true });
			var td1_nodes = children(td1);
			t2 = claim_text(td1_nodes, t2_value);
			td1_nodes.forEach(detach_dev);
			t3 = claim_space(tr_nodes);
			td2 = claim_element(tr_nodes, "TD", { class: true });
			var td2_nodes = children(td2);
			t4 = claim_text(td2_nodes, t4_value);
			td2_nodes.forEach(detach_dev);
			t5 = claim_space(tr_nodes);
			td3 = claim_element(tr_nodes, "TD", { class: true });
			var td3_nodes = children(td3);
			t6 = claim_text(td3_nodes, t6_value);
			td3_nodes.forEach(detach_dev);
			t7 = claim_space(tr_nodes);
			td4 = claim_element(tr_nodes, "TD", { class: true });
			var td4_nodes = children(td4);
			t8 = claim_text(td4_nodes, t8_value);
			td4_nodes.forEach(detach_dev);
			t9 = claim_space(tr_nodes);
			tr_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(td0, "class", "border px-4 py-2");
			add_location(td0, file, 217, 12, 6575);
			attr_dev(td1, "class", "border px-4 py-2");
			add_location(td1, file, 218, 12, 6642);
			attr_dev(td2, "class", "border px-4 py-2");
			add_location(td2, file, 219, 12, 6700);
			attr_dev(td3, "class", "border px-4 py-2");
			add_location(td3, file, 220, 12, 6770);
			attr_dev(td4, "class", "border px-4 py-2");
			add_location(td4, file, 221, 12, 6881);
			add_location(tr, file, 216, 12, 6557);
		},
		m: function mount(target, anchor) {
			insert_dev(target, tr, anchor);
			append_dev(tr, td0);
			append_dev(td0, t0);
			append_dev(tr, t1);
			append_dev(tr, td1);
			append_dev(td1, t2);
			append_dev(tr, t3);
			append_dev(tr, td2);
			append_dev(td2, t4);
			append_dev(tr, t5);
			append_dev(tr, td3);
			append_dev(td3, t6);
			append_dev(tr, t7);
			append_dev(tr, td4);
			append_dev(td4, t8);
			append_dev(tr, t9);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(tr);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(216:12) {#each distance_3_session as distance, i}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div0;
	let img0;
	let img0_src_value;
	let t0;
	let div5;
	let div2;
	let div1;
	let t1;
	let t2;
	let div4;
	let t3;
	let div3;
	let img1;
	let img1_src_value;
	let t4;
	let div6;
	let t5;
	let lu;
	let t6;
	let div7;
	let table0;
	let thead0;
	let tr0;
	let th0;
	let t7;
	let t8;
	let th1;
	let t9;
	let t10;
	let th2;
	let t11;
	let t12;
	let th3;
	let t13;
	let t14;
	let tbody0;
	let tr1;
	let td0;
	let t15;
	let t16;
	let td1;
	let t17;
	let t18;
	let td2;
	let t19_value = Math.round(/*average_3_distance*/ ctx[9]) + "";
	let t19;
	let t20;
	let td3;
	let t21;
	let t22;
	let t23;
	let td4;
	let t24_value = round_2_decimal(/*average_10_distance*/ ctx[15]) + "";
	let t24;
	let t25;
	let td5;
	let t26;
	let t27;
	let t28;
	let tr2;
	let td6;
	let t29;
	let t30;
	let td7;
	let t31_value = round_2_decimal(/*last_speed*/ ctx[3]) + "";
	let t31;
	let t32;
	let td8;
	let t33_value = round_2_decimal(/*average_3_speed*/ ctx[11]) + "";
	let t33;
	let t34;
	let td9;
	let t35;
	let t36;
	let t37;
	let td10;
	let t38_value = round_2_decimal(/*average_10_speed*/ ctx[17]) + "";
	let t38;
	let t39;
	let td11;
	let t40;
	let t41;
	let t42;
	let tr3;
	let td12;
	let t43;
	let t44;
	let td13;
	let t45;
	let t46;
	let td14;
	let t47_value = round_2_decimal(/*average_3_elevation*/ ctx[10]) + "";
	let t47;
	let t48;
	let td15;
	let t49;
	let t50;
	let t51;
	let td16;
	let t52_value = round_2_decimal(/*average_10_elevation*/ ctx[16]) + "";
	let t52;
	let t53;
	let td17;
	let t54;
	let t55;
	let t56;
	let div9;
	let t57;
	let div8;
	let table1;
	let thead1;
	let tr4;
	let th4;
	let t58;
	let t59;
	let th5;
	let t60;
	let t61;
	let th6;
	let t62;
	let t63;
	let th7;
	let t64;
	let t65;
	let th8;
	let t66;
	let t67;
	let tbody1;
	let t68;
	let div10;
	let h3;
	let t69;
	let t70;
	let current;
	let each_value_1 = get_last_nb_sessions(3, /*list_date*/ ctx[1]);
	validate_each_argument(each_value_1);
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	let each_value = /*distance_3_session*/ ctx[5];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const charts = new Cycling_charts({
			props: { data: /*data*/ ctx[0] },
			$$inline: true
		});

	const block = {
		c: function create() {
			div0 = element("div");
			img0 = element("img");
			t0 = space();
			div5 = element("div");
			div2 = element("div");
			div1 = element("div");
			t1 = text("Cycling Performance - Overview");
			t2 = space();
			div4 = element("div");
			t3 = text("*/\r\n    ");
			div3 = element("div");
			img1 = element("img");
			t4 = space();
			div6 = element("div");
			t5 = text("Your last sessions took place on: \r\n    ");
			lu = element("lu");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t6 = space();
			div7 = element("div");
			table0 = element("table");
			thead0 = element("thead");
			tr0 = element("tr");
			th0 = element("th");
			t7 = text("Metrics");
			t8 = space();
			th1 = element("th");
			t9 = text("Value");
			t10 = space();
			th2 = element("th");
			t11 = text("vs. Last 3 sessions");
			t12 = space();
			th3 = element("th");
			t13 = text("vs. Last 10 sessions");
			t14 = space();
			tbody0 = element("tbody");
			tr1 = element("tr");
			td0 = element("td");
			t15 = text("Distance (m)");
			t16 = space();
			td1 = element("td");
			t17 = text(/*last_distance*/ ctx[2]);
			t18 = space();
			td2 = element("td");
			t19 = text(t19_value);
			t20 = space();
			td3 = element("td");
			t21 = text(/*variation_3_distance*/ ctx[12]);
			t22 = text("%");
			t23 = space();
			td4 = element("td");
			t24 = text(t24_value);
			t25 = space();
			td5 = element("td");
			t26 = text(/*variation_10_distance*/ ctx[18]);
			t27 = text("%");
			t28 = space();
			tr2 = element("tr");
			td6 = element("td");
			t29 = text("Speed (km/h)");
			t30 = space();
			td7 = element("td");
			t31 = text(t31_value);
			t32 = space();
			td8 = element("td");
			t33 = text(t33_value);
			t34 = space();
			td9 = element("td");
			t35 = text(/*variation_3_speed*/ ctx[13]);
			t36 = text("%");
			t37 = space();
			td10 = element("td");
			t38 = text(t38_value);
			t39 = space();
			td11 = element("td");
			t40 = text(/*variation_10_speed*/ ctx[19]);
			t41 = text("%");
			t42 = space();
			tr3 = element("tr");
			td12 = element("td");
			t43 = text("Elevation");
			t44 = space();
			td13 = element("td");
			t45 = text(/*last_elevation*/ ctx[4]);
			t46 = space();
			td14 = element("td");
			t47 = text(t47_value);
			t48 = space();
			td15 = element("td");
			t49 = text(/*variation_3_elevation*/ ctx[14]);
			t50 = text("%");
			t51 = space();
			td16 = element("td");
			t52 = text(t52_value);
			t53 = space();
			td17 = element("td");
			t54 = text(/*variation_10_elevation*/ ctx[20]);
			t55 = text("%");
			t56 = space();
			div9 = element("div");
			t57 = text("Get the data available in table\r\n\r\n    ");
			div8 = element("div");
			table1 = element("table");
			thead1 = element("thead");
			tr4 = element("tr");
			th4 = element("th");
			t58 = text("Date");
			t59 = space();
			th5 = element("th");
			t60 = text("Distance (m)");
			t61 = space();
			th6 = element("th");
			t62 = text("Time (min)");
			t63 = space();
			th7 = element("th");
			t64 = text("Speed (km/h)");
			t65 = space();
			th8 = element("th");
			t66 = text("Elevation (m)");
			t67 = space();
			tbody1 = element("tbody");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t68 = space();
			div10 = element("div");
			h3 = element("h3");
			t69 = text("See your evolution in this chart:");
			t70 = space();
			create_component(charts.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div0 = claim_element(nodes, "DIV", {});
			var div0_nodes = children(div0);
			img0 = claim_element(div0_nodes, "IMG", { src: true, alt: true, class: true });
			div0_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			div5 = claim_element(nodes, "DIV", { class: true });
			var div5_nodes = children(div5);
			div2 = claim_element(div5_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			t1 = claim_text(div1_nodes, "Cycling Performance - Overview");
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			t2 = claim_space(div5_nodes);
			div4 = claim_element(div5_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			t3 = claim_text(div4_nodes, "*/\r\n    ");
			div3 = claim_element(div4_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			img1 = claim_element(div3_nodes, "IMG", { src: true, alt: true });
			div3_nodes.forEach(detach_dev);
			div4_nodes.forEach(detach_dev);
			div5_nodes.forEach(detach_dev);
			t4 = claim_space(nodes);
			div6 = claim_element(nodes, "DIV", { class: true });
			var div6_nodes = children(div6);
			t5 = claim_text(div6_nodes, "Your last sessions took place on: \r\n    ");
			lu = claim_element(div6_nodes, "LU", {});
			var lu_nodes = children(lu);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].l(lu_nodes);
			}

			lu_nodes.forEach(detach_dev);
			div6_nodes.forEach(detach_dev);
			t6 = claim_space(nodes);
			div7 = claim_element(nodes, "DIV", { class: true });
			var div7_nodes = children(div7);
			table0 = claim_element(div7_nodes, "TABLE", { class: true });
			var table0_nodes = children(table0);
			thead0 = claim_element(table0_nodes, "THEAD", {});
			var thead0_nodes = children(thead0);
			tr0 = claim_element(thead0_nodes, "TR", {});
			var tr0_nodes = children(tr0);
			th0 = claim_element(tr0_nodes, "TH", { class: true });
			var th0_nodes = children(th0);
			t7 = claim_text(th0_nodes, "Metrics");
			th0_nodes.forEach(detach_dev);
			t8 = claim_space(tr0_nodes);
			th1 = claim_element(tr0_nodes, "TH", { class: true });
			var th1_nodes = children(th1);
			t9 = claim_text(th1_nodes, "Value");
			th1_nodes.forEach(detach_dev);
			t10 = claim_space(tr0_nodes);
			th2 = claim_element(tr0_nodes, "TH", { colspan: true, class: true });
			var th2_nodes = children(th2);
			t11 = claim_text(th2_nodes, "vs. Last 3 sessions");
			th2_nodes.forEach(detach_dev);
			t12 = claim_space(tr0_nodes);
			th3 = claim_element(tr0_nodes, "TH", { colspan: true, class: true });
			var th3_nodes = children(th3);
			t13 = claim_text(th3_nodes, "vs. Last 10 sessions");
			th3_nodes.forEach(detach_dev);
			tr0_nodes.forEach(detach_dev);
			thead0_nodes.forEach(detach_dev);
			t14 = claim_space(table0_nodes);
			tbody0 = claim_element(table0_nodes, "TBODY", {});
			var tbody0_nodes = children(tbody0);
			tr1 = claim_element(tbody0_nodes, "TR", {});
			var tr1_nodes = children(tr1);
			td0 = claim_element(tr1_nodes, "TD", { class: true });
			var td0_nodes = children(td0);
			t15 = claim_text(td0_nodes, "Distance (m)");
			td0_nodes.forEach(detach_dev);
			t16 = claim_space(tr1_nodes);
			td1 = claim_element(tr1_nodes, "TD", { class: true });
			var td1_nodes = children(td1);
			t17 = claim_text(td1_nodes, /*last_distance*/ ctx[2]);
			td1_nodes.forEach(detach_dev);
			t18 = claim_space(tr1_nodes);
			td2 = claim_element(tr1_nodes, "TD", { class: true });
			var td2_nodes = children(td2);
			t19 = claim_text(td2_nodes, t19_value);
			td2_nodes.forEach(detach_dev);
			t20 = claim_space(tr1_nodes);
			td3 = claim_element(tr1_nodes, "TD", { class: true });
			var td3_nodes = children(td3);
			t21 = claim_text(td3_nodes, /*variation_3_distance*/ ctx[12]);
			t22 = claim_text(td3_nodes, "%");
			td3_nodes.forEach(detach_dev);
			t23 = claim_space(tr1_nodes);
			td4 = claim_element(tr1_nodes, "TD", { class: true });
			var td4_nodes = children(td4);
			t24 = claim_text(td4_nodes, t24_value);
			td4_nodes.forEach(detach_dev);
			t25 = claim_space(tr1_nodes);
			td5 = claim_element(tr1_nodes, "TD", { class: true });
			var td5_nodes = children(td5);
			t26 = claim_text(td5_nodes, /*variation_10_distance*/ ctx[18]);
			t27 = claim_text(td5_nodes, "%");
			td5_nodes.forEach(detach_dev);
			tr1_nodes.forEach(detach_dev);
			t28 = claim_space(tbody0_nodes);
			tr2 = claim_element(tbody0_nodes, "TR", { class: true });
			var tr2_nodes = children(tr2);
			td6 = claim_element(tr2_nodes, "TD", { class: true });
			var td6_nodes = children(td6);
			t29 = claim_text(td6_nodes, "Speed (km/h)");
			td6_nodes.forEach(detach_dev);
			t30 = claim_space(tr2_nodes);
			td7 = claim_element(tr2_nodes, "TD", { class: true });
			var td7_nodes = children(td7);
			t31 = claim_text(td7_nodes, t31_value);
			td7_nodes.forEach(detach_dev);
			t32 = claim_space(tr2_nodes);
			td8 = claim_element(tr2_nodes, "TD", { class: true });
			var td8_nodes = children(td8);
			t33 = claim_text(td8_nodes, t33_value);
			td8_nodes.forEach(detach_dev);
			t34 = claim_space(tr2_nodes);
			td9 = claim_element(tr2_nodes, "TD", { class: true });
			var td9_nodes = children(td9);
			t35 = claim_text(td9_nodes, /*variation_3_speed*/ ctx[13]);
			t36 = claim_text(td9_nodes, "%");
			td9_nodes.forEach(detach_dev);
			t37 = claim_space(tr2_nodes);
			td10 = claim_element(tr2_nodes, "TD", { class: true });
			var td10_nodes = children(td10);
			t38 = claim_text(td10_nodes, t38_value);
			td10_nodes.forEach(detach_dev);
			t39 = claim_space(tr2_nodes);
			td11 = claim_element(tr2_nodes, "TD", { class: true });
			var td11_nodes = children(td11);
			t40 = claim_text(td11_nodes, /*variation_10_speed*/ ctx[19]);
			t41 = claim_text(td11_nodes, "%");
			td11_nodes.forEach(detach_dev);
			tr2_nodes.forEach(detach_dev);
			t42 = claim_space(tbody0_nodes);
			tr3 = claim_element(tbody0_nodes, "TR", {});
			var tr3_nodes = children(tr3);
			td12 = claim_element(tr3_nodes, "TD", { class: true });
			var td12_nodes = children(td12);
			t43 = claim_text(td12_nodes, "Elevation");
			td12_nodes.forEach(detach_dev);
			t44 = claim_space(tr3_nodes);
			td13 = claim_element(tr3_nodes, "TD", { class: true });
			var td13_nodes = children(td13);
			t45 = claim_text(td13_nodes, /*last_elevation*/ ctx[4]);
			td13_nodes.forEach(detach_dev);
			t46 = claim_space(tr3_nodes);
			td14 = claim_element(tr3_nodes, "TD", { class: true });
			var td14_nodes = children(td14);
			t47 = claim_text(td14_nodes, t47_value);
			td14_nodes.forEach(detach_dev);
			t48 = claim_space(tr3_nodes);
			td15 = claim_element(tr3_nodes, "TD", { class: true });
			var td15_nodes = children(td15);
			t49 = claim_text(td15_nodes, /*variation_3_elevation*/ ctx[14]);
			t50 = claim_text(td15_nodes, "%");
			td15_nodes.forEach(detach_dev);
			t51 = claim_space(tr3_nodes);
			td16 = claim_element(tr3_nodes, "TD", { class: true });
			var td16_nodes = children(td16);
			t52 = claim_text(td16_nodes, t52_value);
			td16_nodes.forEach(detach_dev);
			t53 = claim_space(tr3_nodes);
			td17 = claim_element(tr3_nodes, "TD", { class: true });
			var td17_nodes = children(td17);
			t54 = claim_text(td17_nodes, /*variation_10_elevation*/ ctx[20]);
			t55 = claim_text(td17_nodes, "%");
			td17_nodes.forEach(detach_dev);
			tr3_nodes.forEach(detach_dev);
			tbody0_nodes.forEach(detach_dev);
			table0_nodes.forEach(detach_dev);
			div7_nodes.forEach(detach_dev);
			t56 = claim_space(nodes);
			div9 = claim_element(nodes, "DIV", { class: true });
			var div9_nodes = children(div9);
			t57 = claim_text(div9_nodes, "Get the data available in table\r\n\r\n    ");
			div8 = claim_element(div9_nodes, "DIV", { class: true });
			var div8_nodes = children(div8);
			table1 = claim_element(div8_nodes, "TABLE", { class: true });
			var table1_nodes = children(table1);
			thead1 = claim_element(table1_nodes, "THEAD", {});
			var thead1_nodes = children(thead1);
			tr4 = claim_element(thead1_nodes, "TR", {});
			var tr4_nodes = children(tr4);
			th4 = claim_element(tr4_nodes, "TH", { class: true });
			var th4_nodes = children(th4);
			t58 = claim_text(th4_nodes, "Date");
			th4_nodes.forEach(detach_dev);
			t59 = claim_space(tr4_nodes);
			th5 = claim_element(tr4_nodes, "TH", { class: true });
			var th5_nodes = children(th5);
			t60 = claim_text(th5_nodes, "Distance (m)");
			th5_nodes.forEach(detach_dev);
			t61 = claim_space(tr4_nodes);
			th6 = claim_element(tr4_nodes, "TH", { class: true });
			var th6_nodes = children(th6);
			t62 = claim_text(th6_nodes, "Time (min)");
			th6_nodes.forEach(detach_dev);
			t63 = claim_space(tr4_nodes);
			th7 = claim_element(tr4_nodes, "TH", { class: true });
			var th7_nodes = children(th7);
			t64 = claim_text(th7_nodes, "Speed (km/h)");
			th7_nodes.forEach(detach_dev);
			t65 = claim_space(tr4_nodes);
			th8 = claim_element(tr4_nodes, "TH", { class: true });
			var th8_nodes = children(th8);
			t66 = claim_text(th8_nodes, "Elevation (m)");
			th8_nodes.forEach(detach_dev);
			tr4_nodes.forEach(detach_dev);
			thead1_nodes.forEach(detach_dev);
			t67 = claim_space(table1_nodes);
			tbody1 = claim_element(table1_nodes, "TBODY", {});
			var tbody1_nodes = children(tbody1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(tbody1_nodes);
			}

			tbody1_nodes.forEach(detach_dev);
			table1_nodes.forEach(detach_dev);
			div8_nodes.forEach(detach_dev);
			div9_nodes.forEach(detach_dev);
			t68 = claim_space(nodes);
			div10 = claim_element(nodes, "DIV", { class: true });
			var div10_nodes = children(div10);
			h3 = claim_element(div10_nodes, "H3", {});
			var h3_nodes = children(h3);
			t69 = claim_text(h3_nodes, "See your evolution in this chart:");
			h3_nodes.forEach(detach_dev);
			t70 = claim_space(div10_nodes);
			claim_component(charts.$$.fragment, div10_nodes);
			div10_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (img0.src !== (img0_src_value = "cycling.jpg")) attr_dev(img0, "src", img0_src_value);
			attr_dev(img0, "alt", "cycling");
			attr_dev(img0, "class", "object-none h-48 w-full");
			add_location(img0, file, 128, 4, 3584);
			add_location(div0, file, 127, 0, 3573);
			attr_dev(div1, "class", "text-center p-2 text-2xl text-blue-800 font-semibold bg-blue-100 border-2 border-gray-300 shadow-sm");
			add_location(div1, file, 133, 4, 3734);
			attr_dev(div2, "class", "flex-initial w-2/3 p-2");
			add_location(div2, file, 132, 2, 3692);
			if (img1.src !== (img1_src_value = "cycling.jpg")) attr_dev(img1, "src", img1_src_value);
			attr_dev(img1, "alt", "cycling");
			add_location(img1, file, 139, 4, 3988);
			attr_dev(div3, "class", " text-right p-2");
			add_location(div3, file, 138, 4, 3953);
			attr_dev(div4, "class", "flex-initial w-1/3 p-2");
			add_location(div4, file, 137, 2, 3909);
			attr_dev(div5, "class", "flex h-48");
			add_location(div5, file, 131, 0, 3665);
			add_location(lu, file, 147, 4, 4122);
			attr_dev(div6, "class", "px-10");
			add_location(div6, file, 145, 0, 4061);
			attr_dev(th0, "class", "px-4 py-2");
			add_location(th0, file, 159, 8, 4341);
			attr_dev(th1, "class", "px-4 py-2");
			add_location(th1, file, 160, 8, 4385);
			attr_dev(th2, "colspan", "2");
			attr_dev(th2, "class", "px-4 py-2 ");
			add_location(th2, file, 161, 8, 4427);
			attr_dev(th3, "colspan", "2");
			attr_dev(th3, "class", "px-4 py-2");
			add_location(th3, file, 162, 8, 4494);
			add_location(tr0, file, 158, 8, 4327);
			add_location(thead0, file, 157, 4, 4310);
			attr_dev(td0, "class", "border px-4 py-2");
			add_location(td0, file, 167, 8, 4617);
			attr_dev(td1, "class", "border px-4 py-2");
			add_location(td1, file, 168, 8, 4673);
			attr_dev(td2, "class", "border px-4 py-2");
			add_location(td2, file, 169, 8, 4732);
			attr_dev(td3, "class", "border px-4 py-2");
			add_location(td3, file, 170, 8, 4808);
			attr_dev(td4, "class", "border px-4 py-2");
			add_location(td4, file, 171, 8, 4875);
			attr_dev(td5, "class", "border px-4 py-2");
			add_location(td5, file, 172, 8, 4957);
			add_location(tr1, file, 166, 8, 4603);
			attr_dev(td6, "class", "border px-4 py-2");
			add_location(td6, file, 175, 8, 5074);
			attr_dev(td7, "class", "border px-4 py-2");
			add_location(td7, file, 176, 8, 5130);
			attr_dev(td8, "class", "border px-4 py-2");
			add_location(td8, file, 177, 8, 5203);
			attr_dev(td9, "class", "border px-4 py-2");
			add_location(td9, file, 178, 8, 5281);
			attr_dev(td10, "class", "border px-4 py-2");
			add_location(td10, file, 179, 8, 5345);
			attr_dev(td11, "class", "border px-4 py-2");
			add_location(td11, file, 180, 8, 5424);
			attr_dev(tr2, "class", "bg-gray-100");
			add_location(tr2, file, 174, 8, 5040);
			attr_dev(td12, "class", "border px-4 py-2");
			add_location(td12, file, 183, 8, 5518);
			attr_dev(td13, "class", "border px-4 py-2");
			add_location(td13, file, 184, 8, 5571);
			attr_dev(td14, "class", "border px-4 py-2");
			add_location(td14, file, 185, 8, 5631);
			attr_dev(td15, "class", "border px-4 py-2");
			add_location(td15, file, 186, 8, 5713);
			attr_dev(td16, "class", "border px-4 py-2");
			add_location(td16, file, 187, 8, 5781);
			attr_dev(td17, "class", "border px-4 py-2");
			add_location(td17, file, 188, 8, 5864);
			add_location(tr3, file, 182, 8, 5504);
			add_location(tbody0, file, 165, 4, 4586);
			attr_dev(table0, "class", "table-auto text-center ");
			add_location(table0, file, 156, 4, 4265);
			attr_dev(div7, "class", "p-10");
			add_location(div7, file, 155, 0, 4241);
			attr_dev(th4, "class", "px-4 py-2");
			add_location(th4, file, 204, 12, 6166);
			attr_dev(th5, "class", "px-4 py-2");
			add_location(th5, file, 205, 12, 6211);
			attr_dev(th6, "class", "px-4 py-2");
			add_location(th6, file, 206, 12, 6264);
			attr_dev(th7, "class", "px-4 py-2");
			add_location(th7, file, 207, 12, 6315);
			attr_dev(th8, "class", "px-4 py-2");
			add_location(th8, file, 208, 12, 6368);
			add_location(tr4, file, 203, 12, 6148);
			add_location(thead1, file, 202, 8, 6127);
			add_location(tbody1, file, 213, 8, 6471);
			attr_dev(table1, "class", "table-auto text-center ");
			add_location(table1, file, 201, 8, 6078);
			attr_dev(div8, "class", "py-5");
			add_location(div8, file, 200, 4, 6050);
			attr_dev(div9, "class", "px-10 py-5");
			add_location(div9, file, 197, 0, 5985);
			add_location(h3, file, 235, 1, 7088);
			attr_dev(div10, "class", "px-10 py-5");
			add_location(div10, file, 234, 0, 7061);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);
			append_dev(div0, img0);
			insert_dev(target, t0, anchor);
			insert_dev(target, div5, anchor);
			append_dev(div5, div2);
			append_dev(div2, div1);
			append_dev(div1, t1);
			append_dev(div5, t2);
			append_dev(div5, div4);
			append_dev(div4, t3);
			append_dev(div4, div3);
			append_dev(div3, img1);
			insert_dev(target, t4, anchor);
			insert_dev(target, div6, anchor);
			append_dev(div6, t5);
			append_dev(div6, lu);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(lu, null);
			}

			insert_dev(target, t6, anchor);
			insert_dev(target, div7, anchor);
			append_dev(div7, table0);
			append_dev(table0, thead0);
			append_dev(thead0, tr0);
			append_dev(tr0, th0);
			append_dev(th0, t7);
			append_dev(tr0, t8);
			append_dev(tr0, th1);
			append_dev(th1, t9);
			append_dev(tr0, t10);
			append_dev(tr0, th2);
			append_dev(th2, t11);
			append_dev(tr0, t12);
			append_dev(tr0, th3);
			append_dev(th3, t13);
			append_dev(table0, t14);
			append_dev(table0, tbody0);
			append_dev(tbody0, tr1);
			append_dev(tr1, td0);
			append_dev(td0, t15);
			append_dev(tr1, t16);
			append_dev(tr1, td1);
			append_dev(td1, t17);
			append_dev(tr1, t18);
			append_dev(tr1, td2);
			append_dev(td2, t19);
			append_dev(tr1, t20);
			append_dev(tr1, td3);
			append_dev(td3, t21);
			append_dev(td3, t22);
			append_dev(tr1, t23);
			append_dev(tr1, td4);
			append_dev(td4, t24);
			append_dev(tr1, t25);
			append_dev(tr1, td5);
			append_dev(td5, t26);
			append_dev(td5, t27);
			append_dev(tbody0, t28);
			append_dev(tbody0, tr2);
			append_dev(tr2, td6);
			append_dev(td6, t29);
			append_dev(tr2, t30);
			append_dev(tr2, td7);
			append_dev(td7, t31);
			append_dev(tr2, t32);
			append_dev(tr2, td8);
			append_dev(td8, t33);
			append_dev(tr2, t34);
			append_dev(tr2, td9);
			append_dev(td9, t35);
			append_dev(td9, t36);
			append_dev(tr2, t37);
			append_dev(tr2, td10);
			append_dev(td10, t38);
			append_dev(tr2, t39);
			append_dev(tr2, td11);
			append_dev(td11, t40);
			append_dev(td11, t41);
			append_dev(tbody0, t42);
			append_dev(tbody0, tr3);
			append_dev(tr3, td12);
			append_dev(td12, t43);
			append_dev(tr3, t44);
			append_dev(tr3, td13);
			append_dev(td13, t45);
			append_dev(tr3, t46);
			append_dev(tr3, td14);
			append_dev(td14, t47);
			append_dev(tr3, t48);
			append_dev(tr3, td15);
			append_dev(td15, t49);
			append_dev(td15, t50);
			append_dev(tr3, t51);
			append_dev(tr3, td16);
			append_dev(td16, t52);
			append_dev(tr3, t53);
			append_dev(tr3, td17);
			append_dev(td17, t54);
			append_dev(td17, t55);
			insert_dev(target, t56, anchor);
			insert_dev(target, div9, anchor);
			append_dev(div9, t57);
			append_dev(div9, div8);
			append_dev(div8, table1);
			append_dev(table1, thead1);
			append_dev(thead1, tr4);
			append_dev(tr4, th4);
			append_dev(th4, t58);
			append_dev(tr4, t59);
			append_dev(tr4, th5);
			append_dev(th5, t60);
			append_dev(tr4, t61);
			append_dev(tr4, th6);
			append_dev(th6, t62);
			append_dev(tr4, t63);
			append_dev(tr4, th7);
			append_dev(th7, t64);
			append_dev(tr4, t65);
			append_dev(tr4, th8);
			append_dev(th8, t66);
			append_dev(table1, t67);
			append_dev(table1, tbody1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(tbody1, null);
			}

			insert_dev(target, t68, anchor);
			insert_dev(target, div10, anchor);
			append_dev(div10, h3);
			append_dev(h3, t69);
			append_dev(div10, t70);
			mount_component(charts, div10, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*list_date*/ 2) {
				each_value_1 = get_last_nb_sessions(3, /*list_date*/ ctx[1]);
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
					} else {
						each_blocks_1[i] = create_each_block_1(child_ctx);
						each_blocks_1[i].c();
						each_blocks_1[i].m(lu, null);
					}
				}

				for (; i < each_blocks_1.length; i += 1) {
					each_blocks_1[i].d(1);
				}

				each_blocks_1.length = each_value_1.length;
			}

			if (dirty[0] & /*elevation_3_session, distance_3_session, minutes_3_session, date_3_session*/ 480) {
				each_value = /*distance_3_session*/ ctx[5];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(tbody1, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(charts.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(charts.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div0);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div5);
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(div6);
			destroy_each(each_blocks_1, detaching);
			if (detaching) detach_dev(t6);
			if (detaching) detach_dev(div7);
			if (detaching) detach_dev(t56);
			if (detaching) detach_dev(div9);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(t68);
			if (detaching) detach_dev(div10);
			destroy_component(charts);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function preload({ params, query }) {
	return this.fetch(`sports/cycling.json`).then(r => r.json()).then(data_raw => {
		return { data_raw };
	});
}

const nb_displayed = 3;

// TODO: right now including last session, probably should not
// TODO: colors green or red for variations
function get_last_nb_sessions(int, list) {
	return list.slice(Math.max(list.length - int, 0));
}

function dividevector(a, b) {
	return a.map((e, i) => e / b[i]);
}

function variation(x_new, x_old) {
	const variation = Math.round((x_new - x_old) / x_old * 100);
	return variation;
}

function round_1_decimal(float) {
	return Math.round(float * 10) / 10;
}

function round_2_decimal(float) {
	return Math.round(float * 100) / 100;
}

function instance($$self, $$props, $$invalidate) {
	let { data_raw } = $$props;

	// Compute data for charts
	let list_meters = [];

	let list_date = [];
	let list_elevation = [];
	let list_minutes = [];

	data_raw.forEach(x => {
		list_meters.push(x.meters);
		list_date.push(x.date);
		list_elevation.push(x.elevation);
		list_minutes.push(x.minutes);
	});

	const data = {
		labels: list_date,
		datasets: [
			{
				label: "Meters covered",
				yAxisID: "Meters covered",
				data: list_meters,
				borderColor: "#3e95cd",
				fill: false
			},
			{
				label: "elevation",
				data: list_elevation,
				yAxisID: "elevation",
				borderColor: "#8e5ea2",
				fill: false
			}
		]
	};

	// TODO: verifiy ordering of dates and sessions
	const average = arr => arr.reduce((p, c) => p + c, 0) / arr.length;

	// Compute average distance, speed, elevation, 
	// Last session
	const last_distance = list_meters[list_meters.length - 1];

	const last_hours = list_minutes[list_minutes.length - 1] / 60;
	const last_speed = last_distance / 1000 / last_hours;
	const last_elevation = list_elevation[list_elevation.length - 1];

	// Last 3 sessions
	//const distance_3_session = list_meters.slice(Math.max(list_meters.length - 3, 0))
	const distance_3_session = get_last_nb_sessions(3, list_meters);

	const minutes_3_session = get_last_nb_sessions(3, list_minutes);
	const elevation_3_session = get_last_nb_sessions(3, list_elevation);
	const date_3_session = get_last_nb_sessions(3, list_date);
	const average_3_distance = average(distance_3_session);
	const average_3_elevation = average(elevation_3_session);
	const average_3_speed = average(dividevector(distance_3_session, minutes_3_session)) * 60 / 1000;
	const variation_3_distance = variation(last_distance, average_3_distance);
	const variation_3_speed = variation(last_speed, average_3_speed);
	const variation_3_elevation = variation(last_elevation, average_3_elevation);

	// Last 10 sessions
	const distance_10_session = get_last_nb_sessions(10, list_meters);

	const minutes_10_session = get_last_nb_sessions(10, list_minutes);
	const elevation_10_session = get_last_nb_sessions(10, list_elevation);
	const average_10_distance = average(distance_10_session);
	const average_10_elevation = average(elevation_10_session);
	const average_10_speed = average(dividevector(distance_10_session, minutes_10_session)) * 60 / 1000;
	const variation_10_distance = variation(last_distance, average_10_distance);
	const variation_10_speed = variation(last_speed, average_10_speed);
	const variation_10_elevation = variation(last_elevation, average_10_elevation);
	const writable_props = ["data_raw"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Cycling> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Cycling", $$slots, []);

	$$self.$set = $$props => {
		if ("data_raw" in $$props) $$invalidate(21, data_raw = $$props.data_raw);
	};

	$$self.$capture_state = () => ({
		preload,
		Charts: Cycling_charts,
		data_raw,
		list_meters,
		list_date,
		list_elevation,
		list_minutes,
		data,
		average,
		get_last_nb_sessions,
		dividevector,
		variation,
		round_1_decimal,
		round_2_decimal,
		last_distance,
		last_hours,
		last_speed,
		last_elevation,
		distance_3_session,
		minutes_3_session,
		elevation_3_session,
		date_3_session,
		average_3_distance,
		average_3_elevation,
		average_3_speed,
		variation_3_distance,
		variation_3_speed,
		variation_3_elevation,
		distance_10_session,
		minutes_10_session,
		elevation_10_session,
		average_10_distance,
		average_10_elevation,
		average_10_speed,
		variation_10_distance,
		variation_10_speed,
		variation_10_elevation,
		nb_displayed
	});

	$$self.$inject_state = $$props => {
		if ("data_raw" in $$props) $$invalidate(21, data_raw = $$props.data_raw);
		if ("list_meters" in $$props) list_meters = $$props.list_meters;
		if ("list_date" in $$props) $$invalidate(1, list_date = $$props.list_date);
		if ("list_elevation" in $$props) list_elevation = $$props.list_elevation;
		if ("list_minutes" in $$props) list_minutes = $$props.list_minutes;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		data,
		list_date,
		last_distance,
		last_speed,
		last_elevation,
		distance_3_session,
		minutes_3_session,
		elevation_3_session,
		date_3_session,
		average_3_distance,
		average_3_elevation,
		average_3_speed,
		variation_3_distance,
		variation_3_speed,
		variation_3_elevation,
		average_10_distance,
		average_10_elevation,
		average_10_speed,
		variation_10_distance,
		variation_10_speed,
		variation_10_elevation,
		data_raw
	];
}

class Cycling extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { data_raw: 21, data: 0 }, [-1, -1]);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Cycling",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*data_raw*/ ctx[21] === undefined && !("data_raw" in props)) {
			console.warn("<Cycling> was created without expected prop 'data_raw'");
		}
	}

	get data_raw() {
		throw new Error("<Cycling>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set data_raw(value) {
		throw new Error("<Cycling>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get data() {
		return this.$$.ctx[0];
	}

	set data(value) {
		throw new Error("<Cycling>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Cycling;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
