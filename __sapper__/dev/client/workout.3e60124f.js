import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, L as validate_each_argument, v as validate_slots, e as element, t as text, f as claim_element, g as children, h as claim_text, b as detach_dev, j as attr_dev, k as add_location, l as insert_dev, m as append_dev, n as noop, a as space, c as claim_space, N as set_data_dev, w as create_component, x as claim_component, y as mount_component, z as transition_in, A as transition_out, M as destroy_each, B as destroy_component } from './client.544040e6.js';
import './_commonjsHelpers.1e235def.js';
import './Chart.b2015135.js';
import Workoutpushups_radar from './workoutpushups-radar.df7aef52.js';
import Workoutothers_radar from './workoutothers-radar.ff2361e5.js';
import Workoutabdo_radar from './workoutabdo-radar.0af2bc6b.js';
import Workoutlegs_radar from './workoutlegs-radar.32527c36.js';

/* src/routes/sports/workout/workout.svelte generated by Svelte v3.22.3 */
const file = "src/routes/sports/workout/workout.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[35] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[35] = list[i];
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[35] = list[i];
	return child_ctx;
}

function get_each_context_3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[35] = list[i];
	return child_ctx;
}

function get_each_context_4(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[35] = list[i];
	return child_ctx;
}

function get_each_context_5(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[46] = list[i];
	return child_ctx;
}

// (257:12) {#each get_last_nb_sessions(3, list_date) as date}
function create_each_block_5(ctx) {
	let div;
	let t_value = /*date*/ ctx[46] + "";
	let t;

	const block = {
		c: function create() {
			div = element("div");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t = claim_text(div_nodes, t_value);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "text-center");
			add_location(div, file, 257, 12, 7873);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_5.name,
		type: "each",
		source: "(257:12) {#each get_last_nb_sessions(3, list_date) as date}",
		ctx
	});

	return block;
}

// (297:12) {#each data_raw as data}
function create_each_block_4(ctx) {
	let tr;
	let td0;
	let t0_value = /*data*/ ctx[35]["date"] + "";
	let t0;
	let t1;
	let td1;
	let t2_value = /*data*/ ctx[35]["Squats"]["Series"] + "";
	let t2;
	let t3;
	let td2;
	let t4_value = /*data*/ ctx[35]["Squats"]["Number"] + "";
	let t4;
	let t5;
	let td3;
	let t6_value = /*data*/ ctx[35]["Stair Climbs"]["Series"] + "";
	let t6;
	let t7;
	let td4;
	let t8_value = /*data*/ ctx[35]["Stair Climbs"]["Number"] + "";
	let t8;
	let t9;
	let td5;
	let t10_value = /*data*/ ctx[35]["Bench Climbs"]["Series"] + "";
	let t10;
	let t11;
	let td6;
	let t12_value = /*data*/ ctx[35]["Bench Climbs"]["Number"] + "";
	let t12;
	let t13;
	let td7;
	let t14_value = /*data*/ ctx[35]["Leg Press"]["Series"] + "";
	let t14;
	let t15;
	let td8;
	let t16_value = /*data*/ ctx[35]["Leg Press"]["Number"] + "";
	let t16;
	let t17;

	const block = {
		c: function create() {
			tr = element("tr");
			td0 = element("td");
			t0 = text(t0_value);
			t1 = space();
			td1 = element("td");
			t2 = text(t2_value);
			t3 = space();
			td2 = element("td");
			t4 = text(t4_value);
			t5 = space();
			td3 = element("td");
			t6 = text(t6_value);
			t7 = space();
			td4 = element("td");
			t8 = text(t8_value);
			t9 = space();
			td5 = element("td");
			t10 = text(t10_value);
			t11 = space();
			td6 = element("td");
			t12 = text(t12_value);
			t13 = space();
			td7 = element("td");
			t14 = text(t14_value);
			t15 = space();
			td8 = element("td");
			t16 = text(t16_value);
			t17 = space();
			this.h();
		},
		l: function claim(nodes) {
			tr = claim_element(nodes, "TR", {});
			var tr_nodes = children(tr);
			td0 = claim_element(tr_nodes, "TD", { class: true });
			var td0_nodes = children(td0);
			t0 = claim_text(td0_nodes, t0_value);
			td0_nodes.forEach(detach_dev);
			t1 = claim_space(tr_nodes);
			td1 = claim_element(tr_nodes, "TD", { class: true });
			var td1_nodes = children(td1);
			t2 = claim_text(td1_nodes, t2_value);
			td1_nodes.forEach(detach_dev);
			t3 = claim_space(tr_nodes);
			td2 = claim_element(tr_nodes, "TD", { class: true });
			var td2_nodes = children(td2);
			t4 = claim_text(td2_nodes, t4_value);
			td2_nodes.forEach(detach_dev);
			t5 = claim_space(tr_nodes);
			td3 = claim_element(tr_nodes, "TD", { class: true });
			var td3_nodes = children(td3);
			t6 = claim_text(td3_nodes, t6_value);
			td3_nodes.forEach(detach_dev);
			t7 = claim_space(tr_nodes);
			td4 = claim_element(tr_nodes, "TD", { class: true });
			var td4_nodes = children(td4);
			t8 = claim_text(td4_nodes, t8_value);
			td4_nodes.forEach(detach_dev);
			t9 = claim_space(tr_nodes);
			td5 = claim_element(tr_nodes, "TD", { class: true });
			var td5_nodes = children(td5);
			t10 = claim_text(td5_nodes, t10_value);
			td5_nodes.forEach(detach_dev);
			t11 = claim_space(tr_nodes);
			td6 = claim_element(tr_nodes, "TD", { class: true });
			var td6_nodes = children(td6);
			t12 = claim_text(td6_nodes, t12_value);
			td6_nodes.forEach(detach_dev);
			t13 = claim_space(tr_nodes);
			td7 = claim_element(tr_nodes, "TD", { class: true });
			var td7_nodes = children(td7);
			t14 = claim_text(td7_nodes, t14_value);
			td7_nodes.forEach(detach_dev);
			t15 = claim_space(tr_nodes);
			td8 = claim_element(tr_nodes, "TD", { class: true });
			var td8_nodes = children(td8);
			t16 = claim_text(td8_nodes, t16_value);
			td8_nodes.forEach(detach_dev);
			t17 = claim_space(tr_nodes);
			tr_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(td0, "class", "border px-2 py-2");
			add_location(td0, file, 298, 12, 9319);
			attr_dev(td1, "class", "border px-2 py-2");
			add_location(td1, file, 299, 12, 9380);
			attr_dev(td2, "class", "border px-2 py-2");
			add_location(td2, file, 300, 12, 9453);
			attr_dev(td3, "class", "border px-2 py-2");
			add_location(td3, file, 301, 12, 9526);
			attr_dev(td4, "class", "border px-2 py-2");
			add_location(td4, file, 302, 12, 9605);
			attr_dev(td5, "class", "border px-2 py-2");
			add_location(td5, file, 303, 12, 9684);
			attr_dev(td6, "class", "border px-2 py-2");
			add_location(td6, file, 304, 12, 9763);
			attr_dev(td7, "class", "border px-2 py-2");
			add_location(td7, file, 305, 12, 9842);
			attr_dev(td8, "class", "border px-2 py-2");
			add_location(td8, file, 306, 12, 9918);
			add_location(tr, file, 297, 12, 9302);
		},
		m: function mount(target, anchor) {
			insert_dev(target, tr, anchor);
			append_dev(tr, td0);
			append_dev(td0, t0);
			append_dev(tr, t1);
			append_dev(tr, td1);
			append_dev(td1, t2);
			append_dev(tr, t3);
			append_dev(tr, td2);
			append_dev(td2, t4);
			append_dev(tr, t5);
			append_dev(tr, td3);
			append_dev(td3, t6);
			append_dev(tr, t7);
			append_dev(tr, td4);
			append_dev(td4, t8);
			append_dev(tr, t9);
			append_dev(tr, td5);
			append_dev(td5, t10);
			append_dev(tr, t11);
			append_dev(tr, td6);
			append_dev(td6, t12);
			append_dev(tr, t13);
			append_dev(tr, td7);
			append_dev(td7, t14);
			append_dev(tr, t15);
			append_dev(tr, td8);
			append_dev(td8, t16);
			append_dev(tr, t17);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*data_raw*/ 1 && t0_value !== (t0_value = /*data*/ ctx[35]["date"] + "")) set_data_dev(t0, t0_value);
			if (dirty[0] & /*data_raw*/ 1 && t2_value !== (t2_value = /*data*/ ctx[35]["Squats"]["Series"] + "")) set_data_dev(t2, t2_value);
			if (dirty[0] & /*data_raw*/ 1 && t4_value !== (t4_value = /*data*/ ctx[35]["Squats"]["Number"] + "")) set_data_dev(t4, t4_value);
			if (dirty[0] & /*data_raw*/ 1 && t6_value !== (t6_value = /*data*/ ctx[35]["Stair Climbs"]["Series"] + "")) set_data_dev(t6, t6_value);
			if (dirty[0] & /*data_raw*/ 1 && t8_value !== (t8_value = /*data*/ ctx[35]["Stair Climbs"]["Number"] + "")) set_data_dev(t8, t8_value);
			if (dirty[0] & /*data_raw*/ 1 && t10_value !== (t10_value = /*data*/ ctx[35]["Bench Climbs"]["Series"] + "")) set_data_dev(t10, t10_value);
			if (dirty[0] & /*data_raw*/ 1 && t12_value !== (t12_value = /*data*/ ctx[35]["Bench Climbs"]["Number"] + "")) set_data_dev(t12, t12_value);
			if (dirty[0] & /*data_raw*/ 1 && t14_value !== (t14_value = /*data*/ ctx[35]["Leg Press"]["Series"] + "")) set_data_dev(t14, t14_value);
			if (dirty[0] & /*data_raw*/ 1 && t16_value !== (t16_value = /*data*/ ctx[35]["Leg Press"]["Number"] + "")) set_data_dev(t16, t16_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(tr);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_4.name,
		type: "each",
		source: "(297:12) {#each data_raw as data}",
		ctx
	});

	return block;
}

// (375:12) {#each data_raw as data}
function create_each_block_3(ctx) {
	let tr;
	let td0;
	let t0_value = /*data*/ ctx[35]["date"] + "";
	let t0;
	let t1;
	let td1;
	let t2_value = /*data*/ ctx[35]["Squats"]["Series"] + "";
	let t2;
	let t3;
	let td2;
	let t4_value = /*data*/ ctx[35]["Squats"]["Number"] + "";
	let t4;
	let t5;
	let td3;
	let t6_value = /*data*/ ctx[35]["Stair Climbs"]["Series"] + "";
	let t6;
	let t7;
	let td4;
	let t8_value = /*data*/ ctx[35]["Stair Climbs"]["Number"] + "";
	let t8;
	let t9;
	let td5;
	let t10_value = /*data*/ ctx[35]["Bench Climbs"]["Series"] + "";
	let t10;
	let t11;
	let td6;
	let t12_value = /*data*/ ctx[35]["Bench Climbs"]["Number"] + "";
	let t12;
	let t13;
	let td7;
	let t14_value = /*data*/ ctx[35]["Leg Press"]["Series"] + "";
	let t14;
	let t15;
	let td8;
	let t16_value = /*data*/ ctx[35]["Leg Press"]["Number"] + "";
	let t16;
	let t17;

	const block = {
		c: function create() {
			tr = element("tr");
			td0 = element("td");
			t0 = text(t0_value);
			t1 = space();
			td1 = element("td");
			t2 = text(t2_value);
			t3 = space();
			td2 = element("td");
			t4 = text(t4_value);
			t5 = space();
			td3 = element("td");
			t6 = text(t6_value);
			t7 = space();
			td4 = element("td");
			t8 = text(t8_value);
			t9 = space();
			td5 = element("td");
			t10 = text(t10_value);
			t11 = space();
			td6 = element("td");
			t12 = text(t12_value);
			t13 = space();
			td7 = element("td");
			t14 = text(t14_value);
			t15 = space();
			td8 = element("td");
			t16 = text(t16_value);
			t17 = space();
			this.h();
		},
		l: function claim(nodes) {
			tr = claim_element(nodes, "TR", {});
			var tr_nodes = children(tr);
			td0 = claim_element(tr_nodes, "TD", { class: true });
			var td0_nodes = children(td0);
			t0 = claim_text(td0_nodes, t0_value);
			td0_nodes.forEach(detach_dev);
			t1 = claim_space(tr_nodes);
			td1 = claim_element(tr_nodes, "TD", { class: true });
			var td1_nodes = children(td1);
			t2 = claim_text(td1_nodes, t2_value);
			td1_nodes.forEach(detach_dev);
			t3 = claim_space(tr_nodes);
			td2 = claim_element(tr_nodes, "TD", { class: true });
			var td2_nodes = children(td2);
			t4 = claim_text(td2_nodes, t4_value);
			td2_nodes.forEach(detach_dev);
			t5 = claim_space(tr_nodes);
			td3 = claim_element(tr_nodes, "TD", { class: true });
			var td3_nodes = children(td3);
			t6 = claim_text(td3_nodes, t6_value);
			td3_nodes.forEach(detach_dev);
			t7 = claim_space(tr_nodes);
			td4 = claim_element(tr_nodes, "TD", { class: true });
			var td4_nodes = children(td4);
			t8 = claim_text(td4_nodes, t8_value);
			td4_nodes.forEach(detach_dev);
			t9 = claim_space(tr_nodes);
			td5 = claim_element(tr_nodes, "TD", { class: true });
			var td5_nodes = children(td5);
			t10 = claim_text(td5_nodes, t10_value);
			td5_nodes.forEach(detach_dev);
			t11 = claim_space(tr_nodes);
			td6 = claim_element(tr_nodes, "TD", { class: true });
			var td6_nodes = children(td6);
			t12 = claim_text(td6_nodes, t12_value);
			td6_nodes.forEach(detach_dev);
			t13 = claim_space(tr_nodes);
			td7 = claim_element(tr_nodes, "TD", { class: true });
			var td7_nodes = children(td7);
			t14 = claim_text(td7_nodes, t14_value);
			td7_nodes.forEach(detach_dev);
			t15 = claim_space(tr_nodes);
			td8 = claim_element(tr_nodes, "TD", { class: true });
			var td8_nodes = children(td8);
			t16 = claim_text(td8_nodes, t16_value);
			td8_nodes.forEach(detach_dev);
			t17 = claim_space(tr_nodes);
			tr_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(td0, "class", "border px-2 py-2");
			add_location(td0, file, 376, 12, 11603);
			attr_dev(td1, "class", "border px-2 py-2");
			add_location(td1, file, 377, 12, 11664);
			attr_dev(td2, "class", "border px-2 py-2");
			add_location(td2, file, 378, 12, 11737);
			attr_dev(td3, "class", "border px-2 py-2");
			add_location(td3, file, 379, 12, 11810);
			attr_dev(td4, "class", "border px-2 py-2");
			add_location(td4, file, 380, 12, 11889);
			attr_dev(td5, "class", "border px-2 py-2");
			add_location(td5, file, 381, 12, 11968);
			attr_dev(td6, "class", "border px-2 py-2");
			add_location(td6, file, 382, 12, 12047);
			attr_dev(td7, "class", "border px-2 py-2");
			add_location(td7, file, 383, 12, 12126);
			attr_dev(td8, "class", "border px-2 py-2");
			add_location(td8, file, 384, 12, 12202);
			add_location(tr, file, 375, 12, 11586);
		},
		m: function mount(target, anchor) {
			insert_dev(target, tr, anchor);
			append_dev(tr, td0);
			append_dev(td0, t0);
			append_dev(tr, t1);
			append_dev(tr, td1);
			append_dev(td1, t2);
			append_dev(tr, t3);
			append_dev(tr, td2);
			append_dev(td2, t4);
			append_dev(tr, t5);
			append_dev(tr, td3);
			append_dev(td3, t6);
			append_dev(tr, t7);
			append_dev(tr, td4);
			append_dev(td4, t8);
			append_dev(tr, t9);
			append_dev(tr, td5);
			append_dev(td5, t10);
			append_dev(tr, t11);
			append_dev(tr, td6);
			append_dev(td6, t12);
			append_dev(tr, t13);
			append_dev(tr, td7);
			append_dev(td7, t14);
			append_dev(tr, t15);
			append_dev(tr, td8);
			append_dev(td8, t16);
			append_dev(tr, t17);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*data_raw*/ 1 && t0_value !== (t0_value = /*data*/ ctx[35]["date"] + "")) set_data_dev(t0, t0_value);
			if (dirty[0] & /*data_raw*/ 1 && t2_value !== (t2_value = /*data*/ ctx[35]["Squats"]["Series"] + "")) set_data_dev(t2, t2_value);
			if (dirty[0] & /*data_raw*/ 1 && t4_value !== (t4_value = /*data*/ ctx[35]["Squats"]["Number"] + "")) set_data_dev(t4, t4_value);
			if (dirty[0] & /*data_raw*/ 1 && t6_value !== (t6_value = /*data*/ ctx[35]["Stair Climbs"]["Series"] + "")) set_data_dev(t6, t6_value);
			if (dirty[0] & /*data_raw*/ 1 && t8_value !== (t8_value = /*data*/ ctx[35]["Stair Climbs"]["Number"] + "")) set_data_dev(t8, t8_value);
			if (dirty[0] & /*data_raw*/ 1 && t10_value !== (t10_value = /*data*/ ctx[35]["Bench Climbs"]["Series"] + "")) set_data_dev(t10, t10_value);
			if (dirty[0] & /*data_raw*/ 1 && t12_value !== (t12_value = /*data*/ ctx[35]["Bench Climbs"]["Number"] + "")) set_data_dev(t12, t12_value);
			if (dirty[0] & /*data_raw*/ 1 && t14_value !== (t14_value = /*data*/ ctx[35]["Leg Press"]["Series"] + "")) set_data_dev(t14, t14_value);
			if (dirty[0] & /*data_raw*/ 1 && t16_value !== (t16_value = /*data*/ ctx[35]["Leg Press"]["Number"] + "")) set_data_dev(t16, t16_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(tr);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_3.name,
		type: "each",
		source: "(375:12) {#each data_raw as data}",
		ctx
	});

	return block;
}

// (436:12) {#each data_raw as data}
function create_each_block_2(ctx) {
	let tr;
	let td0;
	let t0_value = /*data*/ ctx[35]["date"] + "";
	let t0;
	let t1;
	let td1;
	let t2_value = /*data*/ ctx[35]["Push-Ups"]["Series"] + "";
	let t2;
	let t3;
	let td2;
	let t4_value = /*data*/ ctx[35]["Push-Ups"]["Number"] + "";
	let t4;
	let t5;
	let td3;
	let t6_value = /*data*/ ctx[35]["Lateral Push-Ups"]["Series"] + "";
	let t6;
	let t7;
	let td4;
	let t8_value = /*data*/ ctx[35]["Lateral Push-Ups"]["Number"] + "";
	let t8;
	let t9;
	let td5;
	let t10_value = /*data*/ ctx[35]["Jumping Push-Ups"]["Series"] + "";
	let t10;
	let t11;
	let td6;
	let t12_value = /*data*/ ctx[35]["Jumping Push-Ups"]["Number"] + "";
	let t12;
	let t13;
	let td7;
	let t14_value = /*data*/ ctx[35]["Close Push-Ups"]["Series"] + "";
	let t14;
	let t15;
	let td8;
	let t16_value = /*data*/ ctx[35]["Close Push-Ups"]["Number"] + "";
	let t16;
	let t17;
	let td9;
	let t18_value = /*data*/ ctx[35]["Raised Push-Ups"]["Series"] + "";
	let t18;
	let t19;
	let td10;
	let t20_value = /*data*/ ctx[35]["Raised Push-Ups"]["Number"] + "";
	let t20;
	let t21;

	const block = {
		c: function create() {
			tr = element("tr");
			td0 = element("td");
			t0 = text(t0_value);
			t1 = space();
			td1 = element("td");
			t2 = text(t2_value);
			t3 = space();
			td2 = element("td");
			t4 = text(t4_value);
			t5 = space();
			td3 = element("td");
			t6 = text(t6_value);
			t7 = space();
			td4 = element("td");
			t8 = text(t8_value);
			t9 = space();
			td5 = element("td");
			t10 = text(t10_value);
			t11 = space();
			td6 = element("td");
			t12 = text(t12_value);
			t13 = space();
			td7 = element("td");
			t14 = text(t14_value);
			t15 = space();
			td8 = element("td");
			t16 = text(t16_value);
			t17 = space();
			td9 = element("td");
			t18 = text(t18_value);
			t19 = space();
			td10 = element("td");
			t20 = text(t20_value);
			t21 = space();
			this.h();
		},
		l: function claim(nodes) {
			tr = claim_element(nodes, "TR", {});
			var tr_nodes = children(tr);
			td0 = claim_element(tr_nodes, "TD", { class: true });
			var td0_nodes = children(td0);
			t0 = claim_text(td0_nodes, t0_value);
			td0_nodes.forEach(detach_dev);
			t1 = claim_space(tr_nodes);
			td1 = claim_element(tr_nodes, "TD", { class: true });
			var td1_nodes = children(td1);
			t2 = claim_text(td1_nodes, t2_value);
			td1_nodes.forEach(detach_dev);
			t3 = claim_space(tr_nodes);
			td2 = claim_element(tr_nodes, "TD", { class: true });
			var td2_nodes = children(td2);
			t4 = claim_text(td2_nodes, t4_value);
			td2_nodes.forEach(detach_dev);
			t5 = claim_space(tr_nodes);
			td3 = claim_element(tr_nodes, "TD", { class: true });
			var td3_nodes = children(td3);
			t6 = claim_text(td3_nodes, t6_value);
			td3_nodes.forEach(detach_dev);
			t7 = claim_space(tr_nodes);
			td4 = claim_element(tr_nodes, "TD", { class: true });
			var td4_nodes = children(td4);
			t8 = claim_text(td4_nodes, t8_value);
			td4_nodes.forEach(detach_dev);
			t9 = claim_space(tr_nodes);
			td5 = claim_element(tr_nodes, "TD", { class: true });
			var td5_nodes = children(td5);
			t10 = claim_text(td5_nodes, t10_value);
			td5_nodes.forEach(detach_dev);
			t11 = claim_space(tr_nodes);
			td6 = claim_element(tr_nodes, "TD", { class: true });
			var td6_nodes = children(td6);
			t12 = claim_text(td6_nodes, t12_value);
			td6_nodes.forEach(detach_dev);
			t13 = claim_space(tr_nodes);
			td7 = claim_element(tr_nodes, "TD", { class: true });
			var td7_nodes = children(td7);
			t14 = claim_text(td7_nodes, t14_value);
			td7_nodes.forEach(detach_dev);
			t15 = claim_space(tr_nodes);
			td8 = claim_element(tr_nodes, "TD", { class: true });
			var td8_nodes = children(td8);
			t16 = claim_text(td8_nodes, t16_value);
			td8_nodes.forEach(detach_dev);
			t17 = claim_space(tr_nodes);
			td9 = claim_element(tr_nodes, "TD", { class: true });
			var td9_nodes = children(td9);
			t18 = claim_text(td9_nodes, t18_value);
			td9_nodes.forEach(detach_dev);
			t19 = claim_space(tr_nodes);
			td10 = claim_element(tr_nodes, "TD", { class: true });
			var td10_nodes = children(td10);
			t20 = claim_text(td10_nodes, t20_value);
			td10_nodes.forEach(detach_dev);
			t21 = claim_space(tr_nodes);
			tr_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(td0, "class", "border px-2 py-2");
			add_location(td0, file, 437, 12, 13854);
			attr_dev(td1, "class", "border px-2 py-2");
			add_location(td1, file, 438, 12, 13915);
			attr_dev(td2, "class", "border px-2 py-2");
			add_location(td2, file, 439, 12, 13990);
			attr_dev(td3, "class", "border px-2 py-2");
			add_location(td3, file, 440, 12, 14065);
			attr_dev(td4, "class", "border px-2 py-2");
			add_location(td4, file, 441, 12, 14148);
			attr_dev(td5, "class", "border px-2 py-2");
			add_location(td5, file, 442, 12, 14231);
			attr_dev(td6, "class", "border px-2 py-2");
			add_location(td6, file, 443, 12, 14314);
			attr_dev(td7, "class", "border px-2 py-2");
			add_location(td7, file, 444, 12, 14397);
			attr_dev(td8, "class", "border px-2 py-2");
			add_location(td8, file, 445, 12, 14478);
			attr_dev(td9, "class", "border px-2 py-2");
			add_location(td9, file, 446, 12, 14559);
			attr_dev(td10, "class", "border px-2 py-2");
			add_location(td10, file, 447, 12, 14641);
			add_location(tr, file, 436, 12, 13837);
		},
		m: function mount(target, anchor) {
			insert_dev(target, tr, anchor);
			append_dev(tr, td0);
			append_dev(td0, t0);
			append_dev(tr, t1);
			append_dev(tr, td1);
			append_dev(td1, t2);
			append_dev(tr, t3);
			append_dev(tr, td2);
			append_dev(td2, t4);
			append_dev(tr, t5);
			append_dev(tr, td3);
			append_dev(td3, t6);
			append_dev(tr, t7);
			append_dev(tr, td4);
			append_dev(td4, t8);
			append_dev(tr, t9);
			append_dev(tr, td5);
			append_dev(td5, t10);
			append_dev(tr, t11);
			append_dev(tr, td6);
			append_dev(td6, t12);
			append_dev(tr, t13);
			append_dev(tr, td7);
			append_dev(td7, t14);
			append_dev(tr, t15);
			append_dev(tr, td8);
			append_dev(td8, t16);
			append_dev(tr, t17);
			append_dev(tr, td9);
			append_dev(td9, t18);
			append_dev(tr, t19);
			append_dev(tr, td10);
			append_dev(td10, t20);
			append_dev(tr, t21);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*data_raw*/ 1 && t0_value !== (t0_value = /*data*/ ctx[35]["date"] + "")) set_data_dev(t0, t0_value);
			if (dirty[0] & /*data_raw*/ 1 && t2_value !== (t2_value = /*data*/ ctx[35]["Push-Ups"]["Series"] + "")) set_data_dev(t2, t2_value);
			if (dirty[0] & /*data_raw*/ 1 && t4_value !== (t4_value = /*data*/ ctx[35]["Push-Ups"]["Number"] + "")) set_data_dev(t4, t4_value);
			if (dirty[0] & /*data_raw*/ 1 && t6_value !== (t6_value = /*data*/ ctx[35]["Lateral Push-Ups"]["Series"] + "")) set_data_dev(t6, t6_value);
			if (dirty[0] & /*data_raw*/ 1 && t8_value !== (t8_value = /*data*/ ctx[35]["Lateral Push-Ups"]["Number"] + "")) set_data_dev(t8, t8_value);
			if (dirty[0] & /*data_raw*/ 1 && t10_value !== (t10_value = /*data*/ ctx[35]["Jumping Push-Ups"]["Series"] + "")) set_data_dev(t10, t10_value);
			if (dirty[0] & /*data_raw*/ 1 && t12_value !== (t12_value = /*data*/ ctx[35]["Jumping Push-Ups"]["Number"] + "")) set_data_dev(t12, t12_value);
			if (dirty[0] & /*data_raw*/ 1 && t14_value !== (t14_value = /*data*/ ctx[35]["Close Push-Ups"]["Series"] + "")) set_data_dev(t14, t14_value);
			if (dirty[0] & /*data_raw*/ 1 && t16_value !== (t16_value = /*data*/ ctx[35]["Close Push-Ups"]["Number"] + "")) set_data_dev(t16, t16_value);
			if (dirty[0] & /*data_raw*/ 1 && t18_value !== (t18_value = /*data*/ ctx[35]["Raised Push-Ups"]["Series"] + "")) set_data_dev(t18, t18_value);
			if (dirty[0] & /*data_raw*/ 1 && t20_value !== (t20_value = /*data*/ ctx[35]["Raised Push-Ups"]["Number"] + "")) set_data_dev(t20, t20_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(tr);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_2.name,
		type: "each",
		source: "(436:12) {#each data_raw as data}",
		ctx
	});

	return block;
}

// (494:12) {#each data_raw as data}
function create_each_block_1(ctx) {
	let tr;
	let td0;
	let t0_value = /*data*/ ctx[35]["date"] + "";
	let t0;
	let t1;
	let td1;
	let t2_value = /*data*/ ctx[35]["Abdominal"]["Series"] + "";
	let t2;
	let t3;
	let td2;
	let t4_value = /*data*/ ctx[35]["Abdominal"]["Number"] + "";
	let t4;
	let t5;
	let td3;
	let t6_value = /*data*/ ctx[35]["Abdominal Lateral"]["Series"] + "";
	let t6;
	let t7;
	let td4;
	let t8_value = /*data*/ ctx[35]["Abdominal Lateral"]["Number"] + "";
	let t8;
	let t9;
	let td5;
	let t10_value = /*data*/ ctx[35]["Core Abdominal"]["Series"] + "";
	let t10;
	let t11;
	let td6;
	let t12_value = /*data*/ ctx[35]["Core Abdominal"]["Number"] + "";
	let t12;
	let t13;

	const block = {
		c: function create() {
			tr = element("tr");
			td0 = element("td");
			t0 = text(t0_value);
			t1 = space();
			td1 = element("td");
			t2 = text(t2_value);
			t3 = space();
			td2 = element("td");
			t4 = text(t4_value);
			t5 = space();
			td3 = element("td");
			t6 = text(t6_value);
			t7 = space();
			td4 = element("td");
			t8 = text(t8_value);
			t9 = space();
			td5 = element("td");
			t10 = text(t10_value);
			t11 = space();
			td6 = element("td");
			t12 = text(t12_value);
			t13 = space();
			this.h();
		},
		l: function claim(nodes) {
			tr = claim_element(nodes, "TR", {});
			var tr_nodes = children(tr);
			td0 = claim_element(tr_nodes, "TD", { class: true });
			var td0_nodes = children(td0);
			t0 = claim_text(td0_nodes, t0_value);
			td0_nodes.forEach(detach_dev);
			t1 = claim_space(tr_nodes);
			td1 = claim_element(tr_nodes, "TD", { class: true });
			var td1_nodes = children(td1);
			t2 = claim_text(td1_nodes, t2_value);
			td1_nodes.forEach(detach_dev);
			t3 = claim_space(tr_nodes);
			td2 = claim_element(tr_nodes, "TD", { class: true });
			var td2_nodes = children(td2);
			t4 = claim_text(td2_nodes, t4_value);
			td2_nodes.forEach(detach_dev);
			t5 = claim_space(tr_nodes);
			td3 = claim_element(tr_nodes, "TD", { class: true });
			var td3_nodes = children(td3);
			t6 = claim_text(td3_nodes, t6_value);
			td3_nodes.forEach(detach_dev);
			t7 = claim_space(tr_nodes);
			td4 = claim_element(tr_nodes, "TD", { class: true });
			var td4_nodes = children(td4);
			t8 = claim_text(td4_nodes, t8_value);
			td4_nodes.forEach(detach_dev);
			t9 = claim_space(tr_nodes);
			td5 = claim_element(tr_nodes, "TD", { class: true });
			var td5_nodes = children(td5);
			t10 = claim_text(td5_nodes, t10_value);
			td5_nodes.forEach(detach_dev);
			t11 = claim_space(tr_nodes);
			td6 = claim_element(tr_nodes, "TD", { class: true });
			var td6_nodes = children(td6);
			t12 = claim_text(td6_nodes, t12_value);
			td6_nodes.forEach(detach_dev);
			t13 = claim_space(tr_nodes);
			tr_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(td0, "class", "border px-2 py-2");
			add_location(td0, file, 495, 12, 15993);
			attr_dev(td1, "class", "border px-2 py-2");
			add_location(td1, file, 496, 12, 16054);
			attr_dev(td2, "class", "border px-2 py-2");
			add_location(td2, file, 497, 12, 16130);
			attr_dev(td3, "class", "border px-2 py-2");
			add_location(td3, file, 498, 12, 16206);
			attr_dev(td4, "class", "border px-2 py-2");
			add_location(td4, file, 499, 12, 16290);
			attr_dev(td5, "class", "border px-2 py-2");
			add_location(td5, file, 500, 12, 16374);
			attr_dev(td6, "class", "border px-2 py-2");
			add_location(td6, file, 501, 12, 16455);
			add_location(tr, file, 494, 12, 15976);
		},
		m: function mount(target, anchor) {
			insert_dev(target, tr, anchor);
			append_dev(tr, td0);
			append_dev(td0, t0);
			append_dev(tr, t1);
			append_dev(tr, td1);
			append_dev(td1, t2);
			append_dev(tr, t3);
			append_dev(tr, td2);
			append_dev(td2, t4);
			append_dev(tr, t5);
			append_dev(tr, td3);
			append_dev(td3, t6);
			append_dev(tr, t7);
			append_dev(tr, td4);
			append_dev(td4, t8);
			append_dev(tr, t9);
			append_dev(tr, td5);
			append_dev(td5, t10);
			append_dev(tr, t11);
			append_dev(tr, td6);
			append_dev(td6, t12);
			append_dev(tr, t13);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*data_raw*/ 1 && t0_value !== (t0_value = /*data*/ ctx[35]["date"] + "")) set_data_dev(t0, t0_value);
			if (dirty[0] & /*data_raw*/ 1 && t2_value !== (t2_value = /*data*/ ctx[35]["Abdominal"]["Series"] + "")) set_data_dev(t2, t2_value);
			if (dirty[0] & /*data_raw*/ 1 && t4_value !== (t4_value = /*data*/ ctx[35]["Abdominal"]["Number"] + "")) set_data_dev(t4, t4_value);
			if (dirty[0] & /*data_raw*/ 1 && t6_value !== (t6_value = /*data*/ ctx[35]["Abdominal Lateral"]["Series"] + "")) set_data_dev(t6, t6_value);
			if (dirty[0] & /*data_raw*/ 1 && t8_value !== (t8_value = /*data*/ ctx[35]["Abdominal Lateral"]["Number"] + "")) set_data_dev(t8, t8_value);
			if (dirty[0] & /*data_raw*/ 1 && t10_value !== (t10_value = /*data*/ ctx[35]["Core Abdominal"]["Series"] + "")) set_data_dev(t10, t10_value);
			if (dirty[0] & /*data_raw*/ 1 && t12_value !== (t12_value = /*data*/ ctx[35]["Core Abdominal"]["Number"] + "")) set_data_dev(t12, t12_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(tr);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(494:12) {#each data_raw as data}",
		ctx
	});

	return block;
}

// (549:12) {#each data_raw as data}
function create_each_block(ctx) {
	let tr;
	let td0;
	let t0_value = /*data*/ ctx[35]["date"] + "";
	let t0;
	let t1;
	let td1;
	let t2_value = /*data*/ ctx[35]["Bench"]["Series"] + "";
	let t2;
	let t3;
	let td2;
	let t4_value = /*data*/ ctx[35]["Bench"]["Number"] + "";
	let t4;
	let t5;
	let td3;
	let t6_value = /*data*/ ctx[35]["Biceps Weight"]["Series"] + "";
	let t6;
	let t7;
	let td4;
	let t8_value = /*data*/ ctx[35]["Biceps Weight"]["Number"] + "";
	let t8;
	let t9;
	let td5;
	let t10_value = /*data*/ ctx[35]["Pull-Ups"]["Series"] + "";
	let t10;
	let t11;
	let td6;
	let t12_value = /*data*/ ctx[35]["Pull-Ups"]["Number"] + "";
	let t12;
	let t13;

	const block = {
		c: function create() {
			tr = element("tr");
			td0 = element("td");
			t0 = text(t0_value);
			t1 = space();
			td1 = element("td");
			t2 = text(t2_value);
			t3 = space();
			td2 = element("td");
			t4 = text(t4_value);
			t5 = space();
			td3 = element("td");
			t6 = text(t6_value);
			t7 = space();
			td4 = element("td");
			t8 = text(t8_value);
			t9 = space();
			td5 = element("td");
			t10 = text(t10_value);
			t11 = space();
			td6 = element("td");
			t12 = text(t12_value);
			t13 = space();
			this.h();
		},
		l: function claim(nodes) {
			tr = claim_element(nodes, "TR", {});
			var tr_nodes = children(tr);
			td0 = claim_element(tr_nodes, "TD", { class: true });
			var td0_nodes = children(td0);
			t0 = claim_text(td0_nodes, t0_value);
			td0_nodes.forEach(detach_dev);
			t1 = claim_space(tr_nodes);
			td1 = claim_element(tr_nodes, "TD", { class: true });
			var td1_nodes = children(td1);
			t2 = claim_text(td1_nodes, t2_value);
			td1_nodes.forEach(detach_dev);
			t3 = claim_space(tr_nodes);
			td2 = claim_element(tr_nodes, "TD", { class: true });
			var td2_nodes = children(td2);
			t4 = claim_text(td2_nodes, t4_value);
			td2_nodes.forEach(detach_dev);
			t5 = claim_space(tr_nodes);
			td3 = claim_element(tr_nodes, "TD", { class: true });
			var td3_nodes = children(td3);
			t6 = claim_text(td3_nodes, t6_value);
			td3_nodes.forEach(detach_dev);
			t7 = claim_space(tr_nodes);
			td4 = claim_element(tr_nodes, "TD", { class: true });
			var td4_nodes = children(td4);
			t8 = claim_text(td4_nodes, t8_value);
			td4_nodes.forEach(detach_dev);
			t9 = claim_space(tr_nodes);
			td5 = claim_element(tr_nodes, "TD", { class: true });
			var td5_nodes = children(td5);
			t10 = claim_text(td5_nodes, t10_value);
			td5_nodes.forEach(detach_dev);
			t11 = claim_space(tr_nodes);
			td6 = claim_element(tr_nodes, "TD", { class: true });
			var td6_nodes = children(td6);
			t12 = claim_text(td6_nodes, t12_value);
			td6_nodes.forEach(detach_dev);
			t13 = claim_space(tr_nodes);
			tr_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(td0, "class", "border px-2 py-2");
			add_location(td0, file, 550, 12, 17806);
			attr_dev(td1, "class", "border px-2 py-2");
			add_location(td1, file, 551, 12, 17867);
			attr_dev(td2, "class", "border px-2 py-2");
			add_location(td2, file, 552, 12, 17939);
			attr_dev(td3, "class", "border px-2 py-2");
			add_location(td3, file, 553, 12, 18011);
			attr_dev(td4, "class", "border px-2 py-2");
			add_location(td4, file, 554, 12, 18091);
			attr_dev(td5, "class", "border px-2 py-2");
			add_location(td5, file, 555, 12, 18171);
			attr_dev(td6, "class", "border px-2 py-2");
			add_location(td6, file, 556, 12, 18246);
			add_location(tr, file, 549, 12, 17789);
		},
		m: function mount(target, anchor) {
			insert_dev(target, tr, anchor);
			append_dev(tr, td0);
			append_dev(td0, t0);
			append_dev(tr, t1);
			append_dev(tr, td1);
			append_dev(td1, t2);
			append_dev(tr, t3);
			append_dev(tr, td2);
			append_dev(td2, t4);
			append_dev(tr, t5);
			append_dev(tr, td3);
			append_dev(td3, t6);
			append_dev(tr, t7);
			append_dev(tr, td4);
			append_dev(td4, t8);
			append_dev(tr, t9);
			append_dev(tr, td5);
			append_dev(td5, t10);
			append_dev(tr, t11);
			append_dev(tr, td6);
			append_dev(td6, t12);
			append_dev(tr, t13);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*data_raw*/ 1 && t0_value !== (t0_value = /*data*/ ctx[35]["date"] + "")) set_data_dev(t0, t0_value);
			if (dirty[0] & /*data_raw*/ 1 && t2_value !== (t2_value = /*data*/ ctx[35]["Bench"]["Series"] + "")) set_data_dev(t2, t2_value);
			if (dirty[0] & /*data_raw*/ 1 && t4_value !== (t4_value = /*data*/ ctx[35]["Bench"]["Number"] + "")) set_data_dev(t4, t4_value);
			if (dirty[0] & /*data_raw*/ 1 && t6_value !== (t6_value = /*data*/ ctx[35]["Biceps Weight"]["Series"] + "")) set_data_dev(t6, t6_value);
			if (dirty[0] & /*data_raw*/ 1 && t8_value !== (t8_value = /*data*/ ctx[35]["Biceps Weight"]["Number"] + "")) set_data_dev(t8, t8_value);
			if (dirty[0] & /*data_raw*/ 1 && t10_value !== (t10_value = /*data*/ ctx[35]["Pull-Ups"]["Series"] + "")) set_data_dev(t10, t10_value);
			if (dirty[0] & /*data_raw*/ 1 && t12_value !== (t12_value = /*data*/ ctx[35]["Pull-Ups"]["Number"] + "")) set_data_dev(t12, t12_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(tr);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(549:12) {#each data_raw as data}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div9;
	let div0;
	let img;
	let img_src_value;
	let t0;
	let div2;
	let div1;
	let t1;
	let t2;
	let div4;
	let h10;
	let t3;
	let t4;
	let div3;
	let t5;
	let div6;
	let h11;
	let t6;
	let t7;
	let div5;
	let table0;
	let caption0;
	let t8;
	let t9;
	let thead0;
	let tr0;
	let th0;
	let t10;
	let th1;
	let t11;
	let t12;
	let th2;
	let t13;
	let t14;
	let th3;
	let t15;
	let t16;
	let th4;
	let t17;
	let t18;
	let tr1;
	let th5;
	let t19;
	let t20;
	let th6;
	let t21;
	let t22;
	let th7;
	let t23;
	let t24;
	let th8;
	let t25;
	let t26;
	let th9;
	let t27;
	let t28;
	let th10;
	let t29;
	let t30;
	let th11;
	let t31;
	let t32;
	let th12;
	let t33;
	let t34;
	let th13;
	let t35;
	let t36;
	let tbody0;
	let t37;
	let caption1;
	let t38;
	let t39;
	let div7;
	let h12;
	let t40;
	let t41;
	let t42;
	let div8;
	let h13;
	let t43;
	let t44;
	let div10;
	let t45;
	let t46;
	let div12;
	let t47;
	let div11;
	let table1;
	let thead1;
	let tr2;
	let th14;
	let t48;
	let th15;
	let t49;
	let t50;
	let th16;
	let t51;
	let t52;
	let th17;
	let t53;
	let t54;
	let th18;
	let t55;
	let t56;
	let tr3;
	let th19;
	let t57;
	let t58;
	let th20;
	let t59;
	let t60;
	let th21;
	let t61;
	let t62;
	let th22;
	let t63;
	let t64;
	let th23;
	let t65;
	let t66;
	let th24;
	let t67;
	let t68;
	let th25;
	let t69;
	let t70;
	let th26;
	let t71;
	let t72;
	let th27;
	let t73;
	let t74;
	let tbody1;
	let t75;
	let div13;
	let t76;
	let t77;
	let t78;
	let t79;
	let t80;
	let div14;
	let t81;
	let t82;
	let div16;
	let t83;
	let div15;
	let table2;
	let thead2;
	let tr4;
	let th28;
	let t84;
	let th29;
	let t85;
	let t86;
	let th30;
	let t87;
	let t88;
	let th31;
	let t89;
	let t90;
	let th32;
	let t91;
	let t92;
	let th33;
	let t93;
	let t94;
	let tr5;
	let th34;
	let t95;
	let t96;
	let th35;
	let t97;
	let t98;
	let th36;
	let t99;
	let t100;
	let th37;
	let t101;
	let t102;
	let th38;
	let t103;
	let t104;
	let th39;
	let t105;
	let t106;
	let th40;
	let t107;
	let t108;
	let th41;
	let t109;
	let t110;
	let th42;
	let t111;
	let t112;
	let th43;
	let t113;
	let t114;
	let th44;
	let t115;
	let t116;
	let tbody2;
	let t117;
	let div17;
	let t118;
	let t119;
	let t120;
	let t121;
	let t122;
	let div18;
	let t123;
	let t124;
	let div20;
	let t125;
	let div19;
	let table3;
	let thead3;
	let tr6;
	let th45;
	let t126;
	let th46;
	let t127;
	let t128;
	let th47;
	let t129;
	let t130;
	let th48;
	let t131;
	let t132;
	let tr7;
	let th49;
	let t133;
	let t134;
	let th50;
	let t135;
	let t136;
	let th51;
	let t137;
	let t138;
	let th52;
	let t139;
	let t140;
	let th53;
	let t141;
	let t142;
	let th54;
	let t143;
	let t144;
	let th55;
	let t145;
	let t146;
	let tbody3;
	let t147;
	let div21;
	let t148;
	let t149;
	let t150;
	let t151;
	let t152;
	let div22;
	let t153;
	let t154;
	let div24;
	let t155;
	let div23;
	let table4;
	let thead4;
	let tr8;
	let th56;
	let t156;
	let th57;
	let t157;
	let t158;
	let th58;
	let t159;
	let t160;
	let th59;
	let t161;
	let t162;
	let tr9;
	let th60;
	let t163;
	let t164;
	let th61;
	let t165;
	let t166;
	let th62;
	let t167;
	let t168;
	let th63;
	let t169;
	let t170;
	let th64;
	let t171;
	let t172;
	let th65;
	let t173;
	let t174;
	let th66;
	let t175;
	let t176;
	let tbody4;
	let t177;
	let div25;
	let t178;
	let t179;
	let t180;
	let t181;
	let current;
	let each_value_5 = get_last_nb_sessions(3, /*list_date*/ ctx[5]);
	validate_each_argument(each_value_5);
	let each_blocks_5 = [];

	for (let i = 0; i < each_value_5.length; i += 1) {
		each_blocks_5[i] = create_each_block_5(get_each_context_5(ctx, each_value_5, i));
	}

	let each_value_4 = /*data_raw*/ ctx[0];
	validate_each_argument(each_value_4);
	let each_blocks_4 = [];

	for (let i = 0; i < each_value_4.length; i += 1) {
		each_blocks_4[i] = create_each_block_4(get_each_context_4(ctx, each_value_4, i));
	}

	const chartsradarleg0 = new Workoutlegs_radar({
			props: {
				data_leg_radar: /*data_leg_radar*/ ctx[1]
			},
			$$inline: true
		});

	let each_value_3 = /*data_raw*/ ctx[0];
	validate_each_argument(each_value_3);
	let each_blocks_3 = [];

	for (let i = 0; i < each_value_3.length; i += 1) {
		each_blocks_3[i] = create_each_block_3(get_each_context_3(ctx, each_value_3, i));
	}

	const chartsradarleg1 = new Workoutlegs_radar({
			props: {
				data_leg_radar: /*data_leg_radar*/ ctx[1]
			},
			$$inline: true
		});

	let each_value_2 = /*data_raw*/ ctx[0];
	validate_each_argument(each_value_2);
	let each_blocks_2 = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks_2[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	const chartsradarpushups = new Workoutpushups_radar({
			props: {
				data_pushups_radar: /*data_pushups_radar*/ ctx[2]
			},
			$$inline: true
		});

	let each_value_1 = /*data_raw*/ ctx[0];
	validate_each_argument(each_value_1);
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const chartsradarabdominals = new Workoutabdo_radar({
			props: {
				data_abdominal_radar: /*data_abdominal_radar*/ ctx[3]
			},
			$$inline: true
		});

	let each_value = /*data_raw*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const chartsradarothers = new Workoutothers_radar({
			props: {
				data_others_radar: /*data_others_radar*/ ctx[4]
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div9 = element("div");
			div0 = element("div");
			img = element("img");
			t0 = space();
			div2 = element("div");
			div1 = element("div");
			t1 = text("Workout Performance");
			t2 = space();
			div4 = element("div");
			h10 = element("h1");
			t3 = text("Last Sessions");
			t4 = space();
			div3 = element("div");

			for (let i = 0; i < each_blocks_5.length; i += 1) {
				each_blocks_5[i].c();
			}

			t5 = space();
			div6 = element("div");
			h11 = element("h1");
			t6 = text("Legs");
			t7 = space();
			div5 = element("div");
			table0 = element("table");
			caption0 = element("caption");
			t8 = text("Data for legs");
			t9 = space();
			thead0 = element("thead");
			tr0 = element("tr");
			th0 = element("th");
			t10 = space();
			th1 = element("th");
			t11 = text("Squats");
			t12 = space();
			th2 = element("th");
			t13 = text("Stair Climbs");
			t14 = space();
			th3 = element("th");
			t15 = text("Bench Climbs");
			t16 = space();
			th4 = element("th");
			t17 = text("Leg Press");
			t18 = space();
			tr1 = element("tr");
			th5 = element("th");
			t19 = text("Date");
			t20 = space();
			th6 = element("th");
			t21 = text("Series");
			t22 = space();
			th7 = element("th");
			t23 = text("Repet.");
			t24 = space();
			th8 = element("th");
			t25 = text("Series");
			t26 = space();
			th9 = element("th");
			t27 = text("Repet.");
			t28 = space();
			th10 = element("th");
			t29 = text("Series");
			t30 = space();
			th11 = element("th");
			t31 = text("Repet.");
			t32 = space();
			th12 = element("th");
			t33 = text("Series");
			t34 = space();
			th13 = element("th");
			t35 = text("Repet.");
			t36 = space();
			tbody0 = element("tbody");

			for (let i = 0; i < each_blocks_4.length; i += 1) {
				each_blocks_4[i].c();
			}

			t37 = space();
			caption1 = element("caption");
			t38 = text("Data for legs");
			t39 = space();
			div7 = element("div");
			h12 = element("h1");
			t40 = text("Performance Radar Chart");
			t41 = space();
			create_component(chartsradarleg0.$$.fragment);
			t42 = space();
			div8 = element("div");
			h13 = element("h1");
			t43 = text("Legs");
			t44 = space();
			div10 = element("div");
			t45 = text("Legs");
			t46 = space();
			div12 = element("div");
			t47 = text("Get the data available in table\n    ");
			div11 = element("div");
			table1 = element("table");
			thead1 = element("thead");
			tr2 = element("tr");
			th14 = element("th");
			t48 = space();
			th15 = element("th");
			t49 = text("Squats");
			t50 = space();
			th16 = element("th");
			t51 = text("Stair Climbs");
			t52 = space();
			th17 = element("th");
			t53 = text("Bench Climbs");
			t54 = space();
			th18 = element("th");
			t55 = text("Leg Press");
			t56 = space();
			tr3 = element("tr");
			th19 = element("th");
			t57 = text("Date");
			t58 = space();
			th20 = element("th");
			t59 = text("Series");
			t60 = space();
			th21 = element("th");
			t61 = text("Repet.");
			t62 = space();
			th22 = element("th");
			t63 = text("Series");
			t64 = space();
			th23 = element("th");
			t65 = text("Repet.");
			t66 = space();
			th24 = element("th");
			t67 = text("Series");
			t68 = space();
			th25 = element("th");
			t69 = text("Repet.");
			t70 = space();
			th26 = element("th");
			t71 = text("Series");
			t72 = space();
			th27 = element("th");
			t73 = text("Repet.");
			t74 = space();
			tbody1 = element("tbody");

			for (let i = 0; i < each_blocks_3.length; i += 1) {
				each_blocks_3[i].c();
			}

			t75 = space();
			div13 = element("div");
			t76 = text("Your last session was ");
			t77 = text(/*leg_global_indicator*/ ctx[6]);
			t78 = text(" % of the average of the sessions where you worked on legs");
			t79 = space();
			create_component(chartsradarleg1.$$.fragment);
			t80 = space();
			div14 = element("div");
			t81 = text("Push-Ups");
			t82 = space();
			div16 = element("div");
			t83 = text("Get the data available in table\n    ");
			div15 = element("div");
			table2 = element("table");
			thead2 = element("thead");
			tr4 = element("tr");
			th28 = element("th");
			t84 = space();
			th29 = element("th");
			t85 = text("Regular");
			t86 = space();
			th30 = element("th");
			t87 = text("Lateral");
			t88 = space();
			th31 = element("th");
			t89 = text("Jumping");
			t90 = space();
			th32 = element("th");
			t91 = text("Close");
			t92 = space();
			th33 = element("th");
			t93 = text("Raised");
			t94 = space();
			tr5 = element("tr");
			th34 = element("th");
			t95 = text("Date");
			t96 = space();
			th35 = element("th");
			t97 = text("Series");
			t98 = space();
			th36 = element("th");
			t99 = text("Repet.");
			t100 = space();
			th37 = element("th");
			t101 = text("Series");
			t102 = space();
			th38 = element("th");
			t103 = text("Repet.");
			t104 = space();
			th39 = element("th");
			t105 = text("Series");
			t106 = space();
			th40 = element("th");
			t107 = text("Repet.");
			t108 = space();
			th41 = element("th");
			t109 = text("Series");
			t110 = space();
			th42 = element("th");
			t111 = text("Repet.");
			t112 = space();
			th43 = element("th");
			t113 = text("Series");
			t114 = space();
			th44 = element("th");
			t115 = text("Repet.");
			t116 = space();
			tbody2 = element("tbody");

			for (let i = 0; i < each_blocks_2.length; i += 1) {
				each_blocks_2[i].c();
			}

			t117 = space();
			div17 = element("div");
			t118 = text("Your last session was ");
			t119 = text(/*pushups_global_indicator*/ ctx[7]);
			t120 = text(" % of the average of the sessions where you worked on pushups");
			t121 = space();
			create_component(chartsradarpushups.$$.fragment);
			t122 = space();
			div18 = element("div");
			t123 = text("Abdominals");
			t124 = space();
			div20 = element("div");
			t125 = text("Get the data available in table\n    ");
			div19 = element("div");
			table3 = element("table");
			thead3 = element("thead");
			tr6 = element("tr");
			th45 = element("th");
			t126 = space();
			th46 = element("th");
			t127 = text("Regular");
			t128 = space();
			th47 = element("th");
			t129 = text("Lateral");
			t130 = space();
			th48 = element("th");
			t131 = text("Core");
			t132 = space();
			tr7 = element("tr");
			th49 = element("th");
			t133 = text("Date");
			t134 = space();
			th50 = element("th");
			t135 = text("Series");
			t136 = space();
			th51 = element("th");
			t137 = text("Repet.");
			t138 = space();
			th52 = element("th");
			t139 = text("Series");
			t140 = space();
			th53 = element("th");
			t141 = text("Repet.");
			t142 = space();
			th54 = element("th");
			t143 = text("Series");
			t144 = space();
			th55 = element("th");
			t145 = text("Repet.");
			t146 = space();
			tbody3 = element("tbody");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t147 = space();
			div21 = element("div");
			t148 = text("Your last session was ");
			t149 = text(/*abdominal_global_indicator*/ ctx[8]);
			t150 = text(" % of the average of the sessions where you worked on abdominals");
			t151 = space();
			create_component(chartsradarabdominals.$$.fragment);
			t152 = space();
			div22 = element("div");
			t153 = text("Others");
			t154 = space();
			div24 = element("div");
			t155 = text("Get the data available in table\n    ");
			div23 = element("div");
			table4 = element("table");
			thead4 = element("thead");
			tr8 = element("tr");
			th56 = element("th");
			t156 = space();
			th57 = element("th");
			t157 = text("Bench");
			t158 = space();
			th58 = element("th");
			t159 = text("Biceps Weight");
			t160 = space();
			th59 = element("th");
			t161 = text("Pull-Ups");
			t162 = space();
			tr9 = element("tr");
			th60 = element("th");
			t163 = text("Date");
			t164 = space();
			th61 = element("th");
			t165 = text("Series");
			t166 = space();
			th62 = element("th");
			t167 = text("Repet.");
			t168 = space();
			th63 = element("th");
			t169 = text("Series");
			t170 = space();
			th64 = element("th");
			t171 = text("Repet.");
			t172 = space();
			th65 = element("th");
			t173 = text("Series");
			t174 = space();
			th66 = element("th");
			t175 = text("Repet.");
			t176 = space();
			tbody4 = element("tbody");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t177 = space();
			div25 = element("div");
			t178 = text("Your last session was ");
			t179 = text(/*others_global_indicator*/ ctx[9]);
			t180 = text(" % of the average of the sessions where you worked on others");
			t181 = space();
			create_component(chartsradarothers.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div9 = claim_element(nodes, "DIV", { class: true });
			var div9_nodes = children(div9);
			div0 = claim_element(div9_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			img = claim_element(div0_nodes, "IMG", { src: true, alt: true, class: true });
			div0_nodes.forEach(detach_dev);
			t0 = claim_space(div9_nodes);
			div2 = claim_element(div9_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			t1 = claim_text(div1_nodes, "Workout Performance");
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			t2 = claim_space(div9_nodes);
			div4 = claim_element(div9_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			h10 = claim_element(div4_nodes, "H1", { class: true });
			var h10_nodes = children(h10);
			t3 = claim_text(h10_nodes, "Last Sessions");
			h10_nodes.forEach(detach_dev);
			t4 = claim_space(div4_nodes);
			div3 = claim_element(div4_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);

			for (let i = 0; i < each_blocks_5.length; i += 1) {
				each_blocks_5[i].l(div3_nodes);
			}

			div3_nodes.forEach(detach_dev);
			div4_nodes.forEach(detach_dev);
			t5 = claim_space(div9_nodes);
			div6 = claim_element(div9_nodes, "DIV", { class: true });
			var div6_nodes = children(div6);
			h11 = claim_element(div6_nodes, "H1", { class: true });
			var h11_nodes = children(h11);
			t6 = claim_text(h11_nodes, "Legs");
			h11_nodes.forEach(detach_dev);
			t7 = claim_space(div6_nodes);
			div5 = claim_element(div6_nodes, "DIV", { class: true });
			var div5_nodes = children(div5);
			table0 = claim_element(div5_nodes, "TABLE", { class: true });
			var table0_nodes = children(table0);
			caption0 = claim_element(table0_nodes, "CAPTION", { class: true });
			var caption0_nodes = children(caption0);
			t8 = claim_text(caption0_nodes, "Data for legs");
			caption0_nodes.forEach(detach_dev);
			t9 = claim_space(table0_nodes);
			thead0 = claim_element(table0_nodes, "THEAD", { class: true });
			var thead0_nodes = children(thead0);
			tr0 = claim_element(thead0_nodes, "TR", { class: true });
			var tr0_nodes = children(tr0);
			th0 = claim_element(tr0_nodes, "TH", { class: true });
			children(th0).forEach(detach_dev);
			t10 = claim_space(tr0_nodes);
			th1 = claim_element(tr0_nodes, "TH", { colspan: true, class: true });
			var th1_nodes = children(th1);
			t11 = claim_text(th1_nodes, "Squats");
			th1_nodes.forEach(detach_dev);
			t12 = claim_space(tr0_nodes);
			th2 = claim_element(tr0_nodes, "TH", { colspan: true, class: true });
			var th2_nodes = children(th2);
			t13 = claim_text(th2_nodes, "Stair Climbs");
			th2_nodes.forEach(detach_dev);
			t14 = claim_space(tr0_nodes);
			th3 = claim_element(tr0_nodes, "TH", { colspan: true, class: true });
			var th3_nodes = children(th3);
			t15 = claim_text(th3_nodes, "Bench Climbs");
			th3_nodes.forEach(detach_dev);
			t16 = claim_space(tr0_nodes);
			th4 = claim_element(tr0_nodes, "TH", { colspan: true, class: true });
			var th4_nodes = children(th4);
			t17 = claim_text(th4_nodes, "Leg Press");
			th4_nodes.forEach(detach_dev);
			tr0_nodes.forEach(detach_dev);
			t18 = claim_space(thead0_nodes);
			tr1 = claim_element(thead0_nodes, "TR", { class: true });
			var tr1_nodes = children(tr1);
			th5 = claim_element(tr1_nodes, "TH", { class: true });
			var th5_nodes = children(th5);
			t19 = claim_text(th5_nodes, "Date");
			th5_nodes.forEach(detach_dev);
			t20 = claim_space(tr1_nodes);
			th6 = claim_element(tr1_nodes, "TH", { class: true });
			var th6_nodes = children(th6);
			t21 = claim_text(th6_nodes, "Series");
			th6_nodes.forEach(detach_dev);
			t22 = claim_space(tr1_nodes);
			th7 = claim_element(tr1_nodes, "TH", { class: true });
			var th7_nodes = children(th7);
			t23 = claim_text(th7_nodes, "Repet.");
			th7_nodes.forEach(detach_dev);
			t24 = claim_space(tr1_nodes);
			th8 = claim_element(tr1_nodes, "TH", { class: true });
			var th8_nodes = children(th8);
			t25 = claim_text(th8_nodes, "Series");
			th8_nodes.forEach(detach_dev);
			t26 = claim_space(tr1_nodes);
			th9 = claim_element(tr1_nodes, "TH", { class: true });
			var th9_nodes = children(th9);
			t27 = claim_text(th9_nodes, "Repet.");
			th9_nodes.forEach(detach_dev);
			t28 = claim_space(tr1_nodes);
			th10 = claim_element(tr1_nodes, "TH", { class: true });
			var th10_nodes = children(th10);
			t29 = claim_text(th10_nodes, "Series");
			th10_nodes.forEach(detach_dev);
			t30 = claim_space(tr1_nodes);
			th11 = claim_element(tr1_nodes, "TH", { class: true });
			var th11_nodes = children(th11);
			t31 = claim_text(th11_nodes, "Repet.");
			th11_nodes.forEach(detach_dev);
			t32 = claim_space(tr1_nodes);
			th12 = claim_element(tr1_nodes, "TH", { class: true });
			var th12_nodes = children(th12);
			t33 = claim_text(th12_nodes, "Series");
			th12_nodes.forEach(detach_dev);
			t34 = claim_space(tr1_nodes);
			th13 = claim_element(tr1_nodes, "TH", { class: true });
			var th13_nodes = children(th13);
			t35 = claim_text(th13_nodes, "Repet.");
			th13_nodes.forEach(detach_dev);
			tr1_nodes.forEach(detach_dev);
			thead0_nodes.forEach(detach_dev);
			t36 = claim_space(table0_nodes);
			tbody0 = claim_element(table0_nodes, "TBODY", {});
			var tbody0_nodes = children(tbody0);

			for (let i = 0; i < each_blocks_4.length; i += 1) {
				each_blocks_4[i].l(tbody0_nodes);
			}

			tbody0_nodes.forEach(detach_dev);
			table0_nodes.forEach(detach_dev);
			div5_nodes.forEach(detach_dev);
			div6_nodes.forEach(detach_dev);
			t37 = claim_space(div9_nodes);
			caption1 = claim_element(div9_nodes, "CAPTION", { class: true });
			var caption1_nodes = children(caption1);
			t38 = claim_text(caption1_nodes, "Data for legs");
			caption1_nodes.forEach(detach_dev);
			t39 = claim_space(div9_nodes);
			div7 = claim_element(div9_nodes, "DIV", { class: true });
			var div7_nodes = children(div7);
			h12 = claim_element(div7_nodes, "H1", { class: true });
			var h12_nodes = children(h12);
			t40 = claim_text(h12_nodes, "Performance Radar Chart");
			h12_nodes.forEach(detach_dev);
			t41 = claim_space(div7_nodes);
			claim_component(chartsradarleg0.$$.fragment, div7_nodes);
			div7_nodes.forEach(detach_dev);
			t42 = claim_space(div9_nodes);
			div8 = claim_element(div9_nodes, "DIV", { class: true });
			var div8_nodes = children(div8);
			h13 = claim_element(div8_nodes, "H1", { class: true });
			var h13_nodes = children(h13);
			t43 = claim_text(h13_nodes, "Legs");
			h13_nodes.forEach(detach_dev);
			div8_nodes.forEach(detach_dev);
			div9_nodes.forEach(detach_dev);
			t44 = claim_space(nodes);
			div10 = claim_element(nodes, "DIV", { class: true });
			var div10_nodes = children(div10);
			t45 = claim_text(div10_nodes, "Legs");
			div10_nodes.forEach(detach_dev);
			t46 = claim_space(nodes);
			div12 = claim_element(nodes, "DIV", { class: true });
			var div12_nodes = children(div12);
			t47 = claim_text(div12_nodes, "Get the data available in table\n    ");
			div11 = claim_element(div12_nodes, "DIV", { class: true });
			var div11_nodes = children(div11);
			table1 = claim_element(div11_nodes, "TABLE", { class: true });
			var table1_nodes = children(table1);
			thead1 = claim_element(table1_nodes, "THEAD", {});
			var thead1_nodes = children(thead1);
			tr2 = claim_element(thead1_nodes, "TR", {});
			var tr2_nodes = children(tr2);
			th14 = claim_element(tr2_nodes, "TH", { class: true });
			children(th14).forEach(detach_dev);
			t48 = claim_space(tr2_nodes);
			th15 = claim_element(tr2_nodes, "TH", { colspan: true, class: true });
			var th15_nodes = children(th15);
			t49 = claim_text(th15_nodes, "Squats");
			th15_nodes.forEach(detach_dev);
			t50 = claim_space(tr2_nodes);
			th16 = claim_element(tr2_nodes, "TH", { colspan: true, class: true });
			var th16_nodes = children(th16);
			t51 = claim_text(th16_nodes, "Stair Climbs");
			th16_nodes.forEach(detach_dev);
			t52 = claim_space(tr2_nodes);
			th17 = claim_element(tr2_nodes, "TH", { colspan: true, class: true });
			var th17_nodes = children(th17);
			t53 = claim_text(th17_nodes, "Bench Climbs");
			th17_nodes.forEach(detach_dev);
			t54 = claim_space(tr2_nodes);
			th18 = claim_element(tr2_nodes, "TH", { colspan: true, class: true });
			var th18_nodes = children(th18);
			t55 = claim_text(th18_nodes, "Leg Press");
			th18_nodes.forEach(detach_dev);
			tr2_nodes.forEach(detach_dev);
			t56 = claim_space(thead1_nodes);
			tr3 = claim_element(thead1_nodes, "TR", {});
			var tr3_nodes = children(tr3);
			th19 = claim_element(tr3_nodes, "TH", { class: true });
			var th19_nodes = children(th19);
			t57 = claim_text(th19_nodes, "Date");
			th19_nodes.forEach(detach_dev);
			t58 = claim_space(tr3_nodes);
			th20 = claim_element(tr3_nodes, "TH", { class: true });
			var th20_nodes = children(th20);
			t59 = claim_text(th20_nodes, "Series");
			th20_nodes.forEach(detach_dev);
			t60 = claim_space(tr3_nodes);
			th21 = claim_element(tr3_nodes, "TH", { class: true });
			var th21_nodes = children(th21);
			t61 = claim_text(th21_nodes, "Repet.");
			th21_nodes.forEach(detach_dev);
			t62 = claim_space(tr3_nodes);
			th22 = claim_element(tr3_nodes, "TH", { class: true });
			var th22_nodes = children(th22);
			t63 = claim_text(th22_nodes, "Series");
			th22_nodes.forEach(detach_dev);
			t64 = claim_space(tr3_nodes);
			th23 = claim_element(tr3_nodes, "TH", { class: true });
			var th23_nodes = children(th23);
			t65 = claim_text(th23_nodes, "Repet.");
			th23_nodes.forEach(detach_dev);
			t66 = claim_space(tr3_nodes);
			th24 = claim_element(tr3_nodes, "TH", { class: true });
			var th24_nodes = children(th24);
			t67 = claim_text(th24_nodes, "Series");
			th24_nodes.forEach(detach_dev);
			t68 = claim_space(tr3_nodes);
			th25 = claim_element(tr3_nodes, "TH", { class: true });
			var th25_nodes = children(th25);
			t69 = claim_text(th25_nodes, "Repet.");
			th25_nodes.forEach(detach_dev);
			t70 = claim_space(tr3_nodes);
			th26 = claim_element(tr3_nodes, "TH", { class: true });
			var th26_nodes = children(th26);
			t71 = claim_text(th26_nodes, "Series");
			th26_nodes.forEach(detach_dev);
			t72 = claim_space(tr3_nodes);
			th27 = claim_element(tr3_nodes, "TH", { class: true });
			var th27_nodes = children(th27);
			t73 = claim_text(th27_nodes, "Repet.");
			th27_nodes.forEach(detach_dev);
			tr3_nodes.forEach(detach_dev);
			thead1_nodes.forEach(detach_dev);
			t74 = claim_space(table1_nodes);
			tbody1 = claim_element(table1_nodes, "TBODY", {});
			var tbody1_nodes = children(tbody1);

			for (let i = 0; i < each_blocks_3.length; i += 1) {
				each_blocks_3[i].l(tbody1_nodes);
			}

			tbody1_nodes.forEach(detach_dev);
			table1_nodes.forEach(detach_dev);
			div11_nodes.forEach(detach_dev);
			div12_nodes.forEach(detach_dev);
			t75 = claim_space(nodes);
			div13 = claim_element(nodes, "DIV", { class: true });
			var div13_nodes = children(div13);
			t76 = claim_text(div13_nodes, "Your last session was ");
			t77 = claim_text(div13_nodes, /*leg_global_indicator*/ ctx[6]);
			t78 = claim_text(div13_nodes, " % of the average of the sessions where you worked on legs");
			div13_nodes.forEach(detach_dev);
			t79 = claim_space(nodes);
			claim_component(chartsradarleg1.$$.fragment, nodes);
			t80 = claim_space(nodes);
			div14 = claim_element(nodes, "DIV", { class: true });
			var div14_nodes = children(div14);
			t81 = claim_text(div14_nodes, "Push-Ups");
			div14_nodes.forEach(detach_dev);
			t82 = claim_space(nodes);
			div16 = claim_element(nodes, "DIV", { class: true });
			var div16_nodes = children(div16);
			t83 = claim_text(div16_nodes, "Get the data available in table\n    ");
			div15 = claim_element(div16_nodes, "DIV", { class: true });
			var div15_nodes = children(div15);
			table2 = claim_element(div15_nodes, "TABLE", { class: true });
			var table2_nodes = children(table2);
			thead2 = claim_element(table2_nodes, "THEAD", {});
			var thead2_nodes = children(thead2);
			tr4 = claim_element(thead2_nodes, "TR", {});
			var tr4_nodes = children(tr4);
			th28 = claim_element(tr4_nodes, "TH", { class: true });
			children(th28).forEach(detach_dev);
			t84 = claim_space(tr4_nodes);
			th29 = claim_element(tr4_nodes, "TH", { colspan: true, class: true });
			var th29_nodes = children(th29);
			t85 = claim_text(th29_nodes, "Regular");
			th29_nodes.forEach(detach_dev);
			t86 = claim_space(tr4_nodes);
			th30 = claim_element(tr4_nodes, "TH", { colspan: true, class: true });
			var th30_nodes = children(th30);
			t87 = claim_text(th30_nodes, "Lateral");
			th30_nodes.forEach(detach_dev);
			t88 = claim_space(tr4_nodes);
			th31 = claim_element(tr4_nodes, "TH", { colspan: true, class: true });
			var th31_nodes = children(th31);
			t89 = claim_text(th31_nodes, "Jumping");
			th31_nodes.forEach(detach_dev);
			t90 = claim_space(tr4_nodes);
			th32 = claim_element(tr4_nodes, "TH", { colspan: true, class: true });
			var th32_nodes = children(th32);
			t91 = claim_text(th32_nodes, "Close");
			th32_nodes.forEach(detach_dev);
			t92 = claim_space(tr4_nodes);
			th33 = claim_element(tr4_nodes, "TH", { colspan: true, class: true });
			var th33_nodes = children(th33);
			t93 = claim_text(th33_nodes, "Raised");
			th33_nodes.forEach(detach_dev);
			tr4_nodes.forEach(detach_dev);
			t94 = claim_space(thead2_nodes);
			tr5 = claim_element(thead2_nodes, "TR", {});
			var tr5_nodes = children(tr5);
			th34 = claim_element(tr5_nodes, "TH", { class: true });
			var th34_nodes = children(th34);
			t95 = claim_text(th34_nodes, "Date");
			th34_nodes.forEach(detach_dev);
			t96 = claim_space(tr5_nodes);
			th35 = claim_element(tr5_nodes, "TH", { class: true });
			var th35_nodes = children(th35);
			t97 = claim_text(th35_nodes, "Series");
			th35_nodes.forEach(detach_dev);
			t98 = claim_space(tr5_nodes);
			th36 = claim_element(tr5_nodes, "TH", { class: true });
			var th36_nodes = children(th36);
			t99 = claim_text(th36_nodes, "Repet.");
			th36_nodes.forEach(detach_dev);
			t100 = claim_space(tr5_nodes);
			th37 = claim_element(tr5_nodes, "TH", { class: true });
			var th37_nodes = children(th37);
			t101 = claim_text(th37_nodes, "Series");
			th37_nodes.forEach(detach_dev);
			t102 = claim_space(tr5_nodes);
			th38 = claim_element(tr5_nodes, "TH", { class: true });
			var th38_nodes = children(th38);
			t103 = claim_text(th38_nodes, "Repet.");
			th38_nodes.forEach(detach_dev);
			t104 = claim_space(tr5_nodes);
			th39 = claim_element(tr5_nodes, "TH", { class: true });
			var th39_nodes = children(th39);
			t105 = claim_text(th39_nodes, "Series");
			th39_nodes.forEach(detach_dev);
			t106 = claim_space(tr5_nodes);
			th40 = claim_element(tr5_nodes, "TH", { class: true });
			var th40_nodes = children(th40);
			t107 = claim_text(th40_nodes, "Repet.");
			th40_nodes.forEach(detach_dev);
			t108 = claim_space(tr5_nodes);
			th41 = claim_element(tr5_nodes, "TH", { class: true });
			var th41_nodes = children(th41);
			t109 = claim_text(th41_nodes, "Series");
			th41_nodes.forEach(detach_dev);
			t110 = claim_space(tr5_nodes);
			th42 = claim_element(tr5_nodes, "TH", { class: true });
			var th42_nodes = children(th42);
			t111 = claim_text(th42_nodes, "Repet.");
			th42_nodes.forEach(detach_dev);
			t112 = claim_space(tr5_nodes);
			th43 = claim_element(tr5_nodes, "TH", { class: true });
			var th43_nodes = children(th43);
			t113 = claim_text(th43_nodes, "Series");
			th43_nodes.forEach(detach_dev);
			t114 = claim_space(tr5_nodes);
			th44 = claim_element(tr5_nodes, "TH", { class: true });
			var th44_nodes = children(th44);
			t115 = claim_text(th44_nodes, "Repet.");
			th44_nodes.forEach(detach_dev);
			tr5_nodes.forEach(detach_dev);
			thead2_nodes.forEach(detach_dev);
			t116 = claim_space(table2_nodes);
			tbody2 = claim_element(table2_nodes, "TBODY", {});
			var tbody2_nodes = children(tbody2);

			for (let i = 0; i < each_blocks_2.length; i += 1) {
				each_blocks_2[i].l(tbody2_nodes);
			}

			tbody2_nodes.forEach(detach_dev);
			table2_nodes.forEach(detach_dev);
			div15_nodes.forEach(detach_dev);
			div16_nodes.forEach(detach_dev);
			t117 = claim_space(nodes);
			div17 = claim_element(nodes, "DIV", { class: true });
			var div17_nodes = children(div17);
			t118 = claim_text(div17_nodes, "Your last session was ");
			t119 = claim_text(div17_nodes, /*pushups_global_indicator*/ ctx[7]);
			t120 = claim_text(div17_nodes, " % of the average of the sessions where you worked on pushups");
			div17_nodes.forEach(detach_dev);
			t121 = claim_space(nodes);
			claim_component(chartsradarpushups.$$.fragment, nodes);
			t122 = claim_space(nodes);
			div18 = claim_element(nodes, "DIV", { class: true });
			var div18_nodes = children(div18);
			t123 = claim_text(div18_nodes, "Abdominals");
			div18_nodes.forEach(detach_dev);
			t124 = claim_space(nodes);
			div20 = claim_element(nodes, "DIV", { class: true });
			var div20_nodes = children(div20);
			t125 = claim_text(div20_nodes, "Get the data available in table\n    ");
			div19 = claim_element(div20_nodes, "DIV", { class: true });
			var div19_nodes = children(div19);
			table3 = claim_element(div19_nodes, "TABLE", { class: true });
			var table3_nodes = children(table3);
			thead3 = claim_element(table3_nodes, "THEAD", {});
			var thead3_nodes = children(thead3);
			tr6 = claim_element(thead3_nodes, "TR", {});
			var tr6_nodes = children(tr6);
			th45 = claim_element(tr6_nodes, "TH", { class: true });
			children(th45).forEach(detach_dev);
			t126 = claim_space(tr6_nodes);
			th46 = claim_element(tr6_nodes, "TH", { colspan: true, class: true });
			var th46_nodes = children(th46);
			t127 = claim_text(th46_nodes, "Regular");
			th46_nodes.forEach(detach_dev);
			t128 = claim_space(tr6_nodes);
			th47 = claim_element(tr6_nodes, "TH", { colspan: true, class: true });
			var th47_nodes = children(th47);
			t129 = claim_text(th47_nodes, "Lateral");
			th47_nodes.forEach(detach_dev);
			t130 = claim_space(tr6_nodes);
			th48 = claim_element(tr6_nodes, "TH", { colspan: true, class: true });
			var th48_nodes = children(th48);
			t131 = claim_text(th48_nodes, "Core");
			th48_nodes.forEach(detach_dev);
			tr6_nodes.forEach(detach_dev);
			t132 = claim_space(thead3_nodes);
			tr7 = claim_element(thead3_nodes, "TR", {});
			var tr7_nodes = children(tr7);
			th49 = claim_element(tr7_nodes, "TH", { class: true });
			var th49_nodes = children(th49);
			t133 = claim_text(th49_nodes, "Date");
			th49_nodes.forEach(detach_dev);
			t134 = claim_space(tr7_nodes);
			th50 = claim_element(tr7_nodes, "TH", { class: true });
			var th50_nodes = children(th50);
			t135 = claim_text(th50_nodes, "Series");
			th50_nodes.forEach(detach_dev);
			t136 = claim_space(tr7_nodes);
			th51 = claim_element(tr7_nodes, "TH", { class: true });
			var th51_nodes = children(th51);
			t137 = claim_text(th51_nodes, "Repet.");
			th51_nodes.forEach(detach_dev);
			t138 = claim_space(tr7_nodes);
			th52 = claim_element(tr7_nodes, "TH", { class: true });
			var th52_nodes = children(th52);
			t139 = claim_text(th52_nodes, "Series");
			th52_nodes.forEach(detach_dev);
			t140 = claim_space(tr7_nodes);
			th53 = claim_element(tr7_nodes, "TH", { class: true });
			var th53_nodes = children(th53);
			t141 = claim_text(th53_nodes, "Repet.");
			th53_nodes.forEach(detach_dev);
			t142 = claim_space(tr7_nodes);
			th54 = claim_element(tr7_nodes, "TH", { class: true });
			var th54_nodes = children(th54);
			t143 = claim_text(th54_nodes, "Series");
			th54_nodes.forEach(detach_dev);
			t144 = claim_space(tr7_nodes);
			th55 = claim_element(tr7_nodes, "TH", { class: true });
			var th55_nodes = children(th55);
			t145 = claim_text(th55_nodes, "Repet.");
			th55_nodes.forEach(detach_dev);
			tr7_nodes.forEach(detach_dev);
			thead3_nodes.forEach(detach_dev);
			t146 = claim_space(table3_nodes);
			tbody3 = claim_element(table3_nodes, "TBODY", {});
			var tbody3_nodes = children(tbody3);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].l(tbody3_nodes);
			}

			tbody3_nodes.forEach(detach_dev);
			table3_nodes.forEach(detach_dev);
			div19_nodes.forEach(detach_dev);
			div20_nodes.forEach(detach_dev);
			t147 = claim_space(nodes);
			div21 = claim_element(nodes, "DIV", { class: true });
			var div21_nodes = children(div21);
			t148 = claim_text(div21_nodes, "Your last session was ");
			t149 = claim_text(div21_nodes, /*abdominal_global_indicator*/ ctx[8]);
			t150 = claim_text(div21_nodes, " % of the average of the sessions where you worked on abdominals");
			div21_nodes.forEach(detach_dev);
			t151 = claim_space(nodes);
			claim_component(chartsradarabdominals.$$.fragment, nodes);
			t152 = claim_space(nodes);
			div22 = claim_element(nodes, "DIV", { class: true });
			var div22_nodes = children(div22);
			t153 = claim_text(div22_nodes, "Others");
			div22_nodes.forEach(detach_dev);
			t154 = claim_space(nodes);
			div24 = claim_element(nodes, "DIV", { class: true });
			var div24_nodes = children(div24);
			t155 = claim_text(div24_nodes, "Get the data available in table\n    ");
			div23 = claim_element(div24_nodes, "DIV", { class: true });
			var div23_nodes = children(div23);
			table4 = claim_element(div23_nodes, "TABLE", { class: true });
			var table4_nodes = children(table4);
			thead4 = claim_element(table4_nodes, "THEAD", {});
			var thead4_nodes = children(thead4);
			tr8 = claim_element(thead4_nodes, "TR", {});
			var tr8_nodes = children(tr8);
			th56 = claim_element(tr8_nodes, "TH", { class: true });
			children(th56).forEach(detach_dev);
			t156 = claim_space(tr8_nodes);
			th57 = claim_element(tr8_nodes, "TH", { colspan: true, class: true });
			var th57_nodes = children(th57);
			t157 = claim_text(th57_nodes, "Bench");
			th57_nodes.forEach(detach_dev);
			t158 = claim_space(tr8_nodes);
			th58 = claim_element(tr8_nodes, "TH", { colspan: true, class: true });
			var th58_nodes = children(th58);
			t159 = claim_text(th58_nodes, "Biceps Weight");
			th58_nodes.forEach(detach_dev);
			t160 = claim_space(tr8_nodes);
			th59 = claim_element(tr8_nodes, "TH", { colspan: true, class: true });
			var th59_nodes = children(th59);
			t161 = claim_text(th59_nodes, "Pull-Ups");
			th59_nodes.forEach(detach_dev);
			tr8_nodes.forEach(detach_dev);
			t162 = claim_space(thead4_nodes);
			tr9 = claim_element(thead4_nodes, "TR", {});
			var tr9_nodes = children(tr9);
			th60 = claim_element(tr9_nodes, "TH", { class: true });
			var th60_nodes = children(th60);
			t163 = claim_text(th60_nodes, "Date");
			th60_nodes.forEach(detach_dev);
			t164 = claim_space(tr9_nodes);
			th61 = claim_element(tr9_nodes, "TH", { class: true });
			var th61_nodes = children(th61);
			t165 = claim_text(th61_nodes, "Series");
			th61_nodes.forEach(detach_dev);
			t166 = claim_space(tr9_nodes);
			th62 = claim_element(tr9_nodes, "TH", { class: true });
			var th62_nodes = children(th62);
			t167 = claim_text(th62_nodes, "Repet.");
			th62_nodes.forEach(detach_dev);
			t168 = claim_space(tr9_nodes);
			th63 = claim_element(tr9_nodes, "TH", { class: true });
			var th63_nodes = children(th63);
			t169 = claim_text(th63_nodes, "Series");
			th63_nodes.forEach(detach_dev);
			t170 = claim_space(tr9_nodes);
			th64 = claim_element(tr9_nodes, "TH", { class: true });
			var th64_nodes = children(th64);
			t171 = claim_text(th64_nodes, "Repet.");
			th64_nodes.forEach(detach_dev);
			t172 = claim_space(tr9_nodes);
			th65 = claim_element(tr9_nodes, "TH", { class: true });
			var th65_nodes = children(th65);
			t173 = claim_text(th65_nodes, "Series");
			th65_nodes.forEach(detach_dev);
			t174 = claim_space(tr9_nodes);
			th66 = claim_element(tr9_nodes, "TH", { class: true });
			var th66_nodes = children(th66);
			t175 = claim_text(th66_nodes, "Repet.");
			th66_nodes.forEach(detach_dev);
			tr9_nodes.forEach(detach_dev);
			thead4_nodes.forEach(detach_dev);
			t176 = claim_space(table4_nodes);
			tbody4 = claim_element(table4_nodes, "TBODY", {});
			var tbody4_nodes = children(tbody4);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(tbody4_nodes);
			}

			tbody4_nodes.forEach(detach_dev);
			table4_nodes.forEach(detach_dev);
			div23_nodes.forEach(detach_dev);
			div24_nodes.forEach(detach_dev);
			t177 = claim_space(nodes);
			div25 = claim_element(nodes, "DIV", { class: true });
			var div25_nodes = children(div25);
			t178 = claim_text(div25_nodes, "Your last session was ");
			t179 = claim_text(div25_nodes, /*others_global_indicator*/ ctx[9]);
			t180 = claim_text(div25_nodes, " % of the average of the sessions where you worked on others");
			div25_nodes.forEach(detach_dev);
			t181 = claim_space(nodes);
			claim_component(chartsradarothers.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = "workout2.jpg")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "cycling");
			attr_dev(img, "class", "object-cover h-48 w-full shadow rounded-md");
			add_location(img, file, 244, 8, 7254);
			attr_dev(div0, "class", "mb-6 shadow ");
			add_location(div0, file, 243, 4, 7219);
			attr_dev(div1, "class", "font-sans Arial text-center p-2 text-3xl text-blue-700 font-semibold bg-blue-100 px-8 tracking-widest");
			add_location(div1, file, 247, 8, 7467);
			attr_dev(div2, "class", "flex justify-center mb-16 bg-blue-700 border-2 border-gray-300 shadow-lg rounded-t-md");
			add_location(div2, file, 246, 4, 7359);
			attr_dev(h10, "class", "text-blue-800  mb-8 ");
			add_location(h10, file, 253, 8, 7669);
			attr_dev(div3, "class", "italic grid grid-cols-3 divide-x divide-gray-400");
			add_location(div3, file, 255, 8, 7735);
			attr_dev(div4, "class", "pb-8");
			add_location(div4, file, 252, 4, 7642);
			attr_dev(h11, "class", "text-blue-800");
			add_location(h11, file, 265, 8, 8015);
			attr_dev(caption0, "class", "font-semibold mb-6 mt-8 text-xl italic text-blue-700");
			add_location(caption0, file, 271, 12, 8196);
			attr_dev(th0, "class", "px-2 py-2");
			add_location(th0, file, 274, 12, 8413);
			attr_dev(th1, "colspan", "2");
			attr_dev(th1, "class", "px-2 py-2");
			add_location(th1, file, 275, 12, 8453);
			attr_dev(th2, "colspan", "2");
			attr_dev(th2, "class", "px-2 py-2");
			add_location(th2, file, 276, 12, 8510);
			attr_dev(th3, "colspan", "2");
			attr_dev(th3, "class", "px-2 py-2");
			add_location(th3, file, 277, 12, 8572);
			attr_dev(th4, "colspan", "2");
			attr_dev(th4, "class", "px-2 py-2");
			add_location(th4, file, 278, 12, 8634);
			attr_dev(tr0, "class", "bg-blue-200 border border-gray-300");
			add_location(tr0, file, 273, 12, 8353);
			attr_dev(th5, "class", "px-2 py-2");
			add_location(th5, file, 281, 12, 8771);
			attr_dev(th6, "class", "px-2 py-2");
			add_location(th6, file, 282, 12, 8815);
			attr_dev(th7, "class", "px-2 py-2");
			add_location(th7, file, 283, 12, 8862);
			attr_dev(th8, "class", "px-2 py-2");
			add_location(th8, file, 284, 12, 8909);
			attr_dev(th9, "class", "px-2 py-2");
			add_location(th9, file, 285, 12, 8956);
			attr_dev(th10, "class", "px-2 py-2");
			add_location(th10, file, 286, 12, 9003);
			attr_dev(th11, "class", "px-2 py-2");
			add_location(th11, file, 287, 12, 9050);
			attr_dev(th12, "class", "px-2 py-2");
			add_location(th12, file, 288, 12, 9097);
			attr_dev(th13, "class", "px-2 py-2");
			add_location(th13, file, 289, 12, 9144);
			attr_dev(tr1, "class", "bg-blue-100 border border-gray-300");
			add_location(tr1, file, 280, 12, 8711);
			attr_dev(thead0, "class", "border-gray-300 italic");
			add_location(thead0, file, 272, 12, 8302);
			add_location(tbody0, file, 294, 8, 9236);
			attr_dev(table0, "class", "table-auto text-center container mx-auto");
			add_location(table0, file, 270, 12, 8127);
			attr_dev(div5, "class", "m-12 container mx-auto");
			add_location(div5, file, 269, 8, 8078);
			attr_dev(div6, "class", "divide-y mt-16");
			add_location(div6, file, 262, 4, 7962);
			attr_dev(caption1, "class", "text-center container mx-auto font-semibold mb-6 mt-8 text-xl italic text-blue-700");
			add_location(caption1, file, 316, 0, 10075);
			attr_dev(h12, "class", "text-blue-800 mb-8 mt-16");
			add_location(h12, file, 318, 12, 10230);
			attr_dev(div7, "class", "mt-8");
			add_location(div7, file, 317, 0, 10199);
			attr_dev(h13, "class", "text-blue-800");
			add_location(h13, file, 325, 8, 10425);
			attr_dev(div8, "class", "divide-y mt-16");
			add_location(div8, file, 322, 11, 10372);
			attr_dev(div9, "class", "mb-20");
			add_location(div9, file, 242, 0, 7195);
			attr_dev(div10, "class", "text-2xl font-semibold ");
			add_location(div10, file, 342, 0, 10516);
			attr_dev(th14, "class", "px-2 py-2");
			add_location(th14, file, 352, 12, 10740);
			attr_dev(th15, "colspan", "2");
			attr_dev(th15, "class", "px-2 py-2");
			add_location(th15, file, 353, 12, 10780);
			attr_dev(th16, "colspan", "2");
			attr_dev(th16, "class", "px-2 py-2");
			add_location(th16, file, 354, 12, 10837);
			attr_dev(th17, "colspan", "2");
			attr_dev(th17, "class", "px-2 py-2");
			add_location(th17, file, 355, 12, 10899);
			attr_dev(th18, "colspan", "2");
			attr_dev(th18, "class", "px-2 py-2");
			add_location(th18, file, 356, 12, 10961);
			add_location(tr2, file, 351, 12, 10723);
			attr_dev(th19, "class", "px-2 py-2");
			add_location(th19, file, 359, 12, 11055);
			attr_dev(th20, "class", "px-2 py-2");
			add_location(th20, file, 360, 12, 11099);
			attr_dev(th21, "class", "px-2 py-2");
			add_location(th21, file, 361, 12, 11146);
			attr_dev(th22, "class", "px-2 py-2");
			add_location(th22, file, 362, 12, 11193);
			attr_dev(th23, "class", "px-2 py-2");
			add_location(th23, file, 363, 12, 11240);
			attr_dev(th24, "class", "px-2 py-2");
			add_location(th24, file, 364, 12, 11287);
			attr_dev(th25, "class", "px-2 py-2");
			add_location(th25, file, 365, 12, 11334);
			attr_dev(th26, "class", "px-2 py-2");
			add_location(th26, file, 366, 12, 11381);
			attr_dev(th27, "class", "px-2 py-2");
			add_location(th27, file, 367, 12, 11428);
			add_location(tr3, file, 358, 12, 11038);
			add_location(thead1, file, 350, 8, 10703);
			add_location(tbody1, file, 372, 8, 11520);
			attr_dev(table1, "class", "table-auto text-center ");
			add_location(table1, file, 349, 8, 10655);
			attr_dev(div11, "class", "py-5");
			add_location(div11, file, 348, 4, 10628);
			attr_dev(div12, "class", "px-10 py-5");
			add_location(div12, file, 346, 0, 10567);
			attr_dev(div13, "class", "p-7");
			add_location(div13, file, 393, 0, 12358);
			attr_dev(div14, "class", "text-2xl font-semibold ");
			add_location(div14, file, 399, 0, 12529);
			attr_dev(th28, "class", "px-2 py-2");
			add_location(th28, file, 410, 12, 12854);
			attr_dev(th29, "colspan", "2");
			attr_dev(th29, "class", "px-2 py-2");
			add_location(th29, file, 411, 12, 12894);
			attr_dev(th30, "colspan", "2");
			attr_dev(th30, "class", "px-2 py-2");
			add_location(th30, file, 412, 12, 12952);
			attr_dev(th31, "colspan", "2");
			attr_dev(th31, "class", "px-2 py-2");
			add_location(th31, file, 413, 12, 13009);
			attr_dev(th32, "colspan", "2");
			attr_dev(th32, "class", "px-2 py-2");
			add_location(th32, file, 414, 12, 13066);
			attr_dev(th33, "colspan", "2");
			attr_dev(th33, "class", "px-2 py-2");
			add_location(th33, file, 415, 12, 13121);
			add_location(tr4, file, 409, 12, 12837);
			attr_dev(th34, "class", "px-2 py-2");
			add_location(th34, file, 418, 12, 13212);
			attr_dev(th35, "class", "px-2 py-2");
			add_location(th35, file, 419, 12, 13256);
			attr_dev(th36, "class", "px-2 py-2");
			add_location(th36, file, 420, 12, 13303);
			attr_dev(th37, "class", "px-2 py-2");
			add_location(th37, file, 421, 12, 13350);
			attr_dev(th38, "class", "px-2 py-2");
			add_location(th38, file, 422, 12, 13397);
			attr_dev(th39, "class", "px-2 py-2");
			add_location(th39, file, 423, 12, 13444);
			attr_dev(th40, "class", "px-2 py-2");
			add_location(th40, file, 424, 12, 13491);
			attr_dev(th41, "class", "px-2 py-2");
			add_location(th41, file, 425, 12, 13538);
			attr_dev(th42, "class", "px-2 py-2");
			add_location(th42, file, 426, 12, 13585);
			attr_dev(th43, "class", "px-2 py-2");
			add_location(th43, file, 427, 12, 13632);
			attr_dev(th44, "class", "px-2 py-2");
			add_location(th44, file, 428, 12, 13679);
			add_location(tr5, file, 417, 12, 13195);
			add_location(thead2, file, 408, 8, 12817);
			add_location(tbody2, file, 433, 8, 13771);
			attr_dev(table2, "class", "table-auto text-center ");
			add_location(table2, file, 407, 8, 12769);
			attr_dev(div15, "class", "py-5");
			add_location(div15, file, 406, 4, 12742);
			attr_dev(div16, "class", "px-10 py-5");
			add_location(div16, file, 404, 0, 12681);
			attr_dev(div17, "class", "p-7");
			add_location(div17, file, 457, 0, 14816);
			attr_dev(div18, "class", " text-2xl font-semibold ");
			add_location(div18, file, 462, 0, 15001);
			attr_dev(th45, "class", "px-2 py-2");
			add_location(th45, file, 474, 12, 15295);
			attr_dev(th46, "colspan", "2");
			attr_dev(th46, "class", "px-2 py-2");
			add_location(th46, file, 475, 12, 15335);
			attr_dev(th47, "colspan", "2");
			attr_dev(th47, "class", "px-2 py-2");
			add_location(th47, file, 476, 12, 15393);
			attr_dev(th48, "colspan", "2");
			attr_dev(th48, "class", "px-2 py-2");
			add_location(th48, file, 477, 12, 15450);
			add_location(tr6, file, 473, 12, 15278);
			attr_dev(th49, "class", "px-2 py-2");
			add_location(th49, file, 480, 12, 15539);
			attr_dev(th50, "class", "px-2 py-2");
			add_location(th50, file, 481, 12, 15583);
			attr_dev(th51, "class", "px-2 py-2");
			add_location(th51, file, 482, 12, 15630);
			attr_dev(th52, "class", "px-2 py-2");
			add_location(th52, file, 483, 12, 15677);
			attr_dev(th53, "class", "px-2 py-2");
			add_location(th53, file, 484, 12, 15724);
			attr_dev(th54, "class", "px-2 py-2");
			add_location(th54, file, 485, 12, 15771);
			attr_dev(th55, "class", "px-2 py-2");
			add_location(th55, file, 486, 12, 15818);
			add_location(tr7, file, 479, 12, 15522);
			add_location(thead3, file, 472, 8, 15258);
			add_location(tbody3, file, 491, 8, 15910);
			attr_dev(table3, "class", "table-auto text-center ");
			add_location(table3, file, 471, 8, 15210);
			attr_dev(div19, "class", "py-5");
			add_location(div19, file, 470, 4, 15183);
			attr_dev(div20, "class", "px-10 py-5");
			add_location(div20, file, 468, 0, 15122);
			attr_dev(div21, "class", "p-7");
			add_location(div21, file, 512, 0, 16630);
			attr_dev(div22, "class", "text-2xl font-semibold ");
			add_location(div22, file, 517, 0, 16825);
			attr_dev(th56, "class", "px-2 py-2");
			add_location(th56, file, 529, 12, 17100);
			attr_dev(th57, "colspan", "2");
			attr_dev(th57, "class", "px-2 py-2");
			add_location(th57, file, 530, 12, 17140);
			attr_dev(th58, "colspan", "2");
			attr_dev(th58, "class", "px-2 py-2");
			add_location(th58, file, 531, 12, 17196);
			attr_dev(th59, "colspan", "2");
			attr_dev(th59, "class", "px-2 py-2");
			add_location(th59, file, 532, 12, 17259);
			add_location(tr8, file, 528, 12, 17083);
			attr_dev(th60, "class", "px-2 py-2");
			add_location(th60, file, 535, 12, 17352);
			attr_dev(th61, "class", "px-2 py-2");
			add_location(th61, file, 536, 12, 17396);
			attr_dev(th62, "class", "px-2 py-2");
			add_location(th62, file, 537, 12, 17443);
			attr_dev(th63, "class", "px-2 py-2");
			add_location(th63, file, 538, 12, 17490);
			attr_dev(th64, "class", "px-2 py-2");
			add_location(th64, file, 539, 12, 17537);
			attr_dev(th65, "class", "px-2 py-2");
			add_location(th65, file, 540, 12, 17584);
			attr_dev(th66, "class", "px-2 py-2");
			add_location(th66, file, 541, 12, 17631);
			add_location(tr9, file, 534, 12, 17335);
			add_location(thead4, file, 527, 8, 17063);
			add_location(tbody4, file, 546, 8, 17723);
			attr_dev(table4, "class", "table-auto text-center ");
			add_location(table4, file, 526, 8, 17015);
			attr_dev(div23, "class", "py-5");
			add_location(div23, file, 525, 4, 16988);
			attr_dev(div24, "class", "px-10 py-5");
			add_location(div24, file, 523, 0, 16927);
			attr_dev(div25, "class", "p-7");
			add_location(div25, file, 566, 0, 18414);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div9, anchor);
			append_dev(div9, div0);
			append_dev(div0, img);
			append_dev(div9, t0);
			append_dev(div9, div2);
			append_dev(div2, div1);
			append_dev(div1, t1);
			append_dev(div9, t2);
			append_dev(div9, div4);
			append_dev(div4, h10);
			append_dev(h10, t3);
			append_dev(div4, t4);
			append_dev(div4, div3);

			for (let i = 0; i < each_blocks_5.length; i += 1) {
				each_blocks_5[i].m(div3, null);
			}

			append_dev(div9, t5);
			append_dev(div9, div6);
			append_dev(div6, h11);
			append_dev(h11, t6);
			append_dev(div6, t7);
			append_dev(div6, div5);
			append_dev(div5, table0);
			append_dev(table0, caption0);
			append_dev(caption0, t8);
			append_dev(table0, t9);
			append_dev(table0, thead0);
			append_dev(thead0, tr0);
			append_dev(tr0, th0);
			append_dev(tr0, t10);
			append_dev(tr0, th1);
			append_dev(th1, t11);
			append_dev(tr0, t12);
			append_dev(tr0, th2);
			append_dev(th2, t13);
			append_dev(tr0, t14);
			append_dev(tr0, th3);
			append_dev(th3, t15);
			append_dev(tr0, t16);
			append_dev(tr0, th4);
			append_dev(th4, t17);
			append_dev(thead0, t18);
			append_dev(thead0, tr1);
			append_dev(tr1, th5);
			append_dev(th5, t19);
			append_dev(tr1, t20);
			append_dev(tr1, th6);
			append_dev(th6, t21);
			append_dev(tr1, t22);
			append_dev(tr1, th7);
			append_dev(th7, t23);
			append_dev(tr1, t24);
			append_dev(tr1, th8);
			append_dev(th8, t25);
			append_dev(tr1, t26);
			append_dev(tr1, th9);
			append_dev(th9, t27);
			append_dev(tr1, t28);
			append_dev(tr1, th10);
			append_dev(th10, t29);
			append_dev(tr1, t30);
			append_dev(tr1, th11);
			append_dev(th11, t31);
			append_dev(tr1, t32);
			append_dev(tr1, th12);
			append_dev(th12, t33);
			append_dev(tr1, t34);
			append_dev(tr1, th13);
			append_dev(th13, t35);
			append_dev(table0, t36);
			append_dev(table0, tbody0);

			for (let i = 0; i < each_blocks_4.length; i += 1) {
				each_blocks_4[i].m(tbody0, null);
			}

			append_dev(div9, t37);
			append_dev(div9, caption1);
			append_dev(caption1, t38);
			append_dev(div9, t39);
			append_dev(div9, div7);
			append_dev(div7, h12);
			append_dev(h12, t40);
			append_dev(div7, t41);
			mount_component(chartsradarleg0, div7, null);
			append_dev(div9, t42);
			append_dev(div9, div8);
			append_dev(div8, h13);
			append_dev(h13, t43);
			insert_dev(target, t44, anchor);
			insert_dev(target, div10, anchor);
			append_dev(div10, t45);
			insert_dev(target, t46, anchor);
			insert_dev(target, div12, anchor);
			append_dev(div12, t47);
			append_dev(div12, div11);
			append_dev(div11, table1);
			append_dev(table1, thead1);
			append_dev(thead1, tr2);
			append_dev(tr2, th14);
			append_dev(tr2, t48);
			append_dev(tr2, th15);
			append_dev(th15, t49);
			append_dev(tr2, t50);
			append_dev(tr2, th16);
			append_dev(th16, t51);
			append_dev(tr2, t52);
			append_dev(tr2, th17);
			append_dev(th17, t53);
			append_dev(tr2, t54);
			append_dev(tr2, th18);
			append_dev(th18, t55);
			append_dev(thead1, t56);
			append_dev(thead1, tr3);
			append_dev(tr3, th19);
			append_dev(th19, t57);
			append_dev(tr3, t58);
			append_dev(tr3, th20);
			append_dev(th20, t59);
			append_dev(tr3, t60);
			append_dev(tr3, th21);
			append_dev(th21, t61);
			append_dev(tr3, t62);
			append_dev(tr3, th22);
			append_dev(th22, t63);
			append_dev(tr3, t64);
			append_dev(tr3, th23);
			append_dev(th23, t65);
			append_dev(tr3, t66);
			append_dev(tr3, th24);
			append_dev(th24, t67);
			append_dev(tr3, t68);
			append_dev(tr3, th25);
			append_dev(th25, t69);
			append_dev(tr3, t70);
			append_dev(tr3, th26);
			append_dev(th26, t71);
			append_dev(tr3, t72);
			append_dev(tr3, th27);
			append_dev(th27, t73);
			append_dev(table1, t74);
			append_dev(table1, tbody1);

			for (let i = 0; i < each_blocks_3.length; i += 1) {
				each_blocks_3[i].m(tbody1, null);
			}

			insert_dev(target, t75, anchor);
			insert_dev(target, div13, anchor);
			append_dev(div13, t76);
			append_dev(div13, t77);
			append_dev(div13, t78);
			insert_dev(target, t79, anchor);
			mount_component(chartsradarleg1, target, anchor);
			insert_dev(target, t80, anchor);
			insert_dev(target, div14, anchor);
			append_dev(div14, t81);
			insert_dev(target, t82, anchor);
			insert_dev(target, div16, anchor);
			append_dev(div16, t83);
			append_dev(div16, div15);
			append_dev(div15, table2);
			append_dev(table2, thead2);
			append_dev(thead2, tr4);
			append_dev(tr4, th28);
			append_dev(tr4, t84);
			append_dev(tr4, th29);
			append_dev(th29, t85);
			append_dev(tr4, t86);
			append_dev(tr4, th30);
			append_dev(th30, t87);
			append_dev(tr4, t88);
			append_dev(tr4, th31);
			append_dev(th31, t89);
			append_dev(tr4, t90);
			append_dev(tr4, th32);
			append_dev(th32, t91);
			append_dev(tr4, t92);
			append_dev(tr4, th33);
			append_dev(th33, t93);
			append_dev(thead2, t94);
			append_dev(thead2, tr5);
			append_dev(tr5, th34);
			append_dev(th34, t95);
			append_dev(tr5, t96);
			append_dev(tr5, th35);
			append_dev(th35, t97);
			append_dev(tr5, t98);
			append_dev(tr5, th36);
			append_dev(th36, t99);
			append_dev(tr5, t100);
			append_dev(tr5, th37);
			append_dev(th37, t101);
			append_dev(tr5, t102);
			append_dev(tr5, th38);
			append_dev(th38, t103);
			append_dev(tr5, t104);
			append_dev(tr5, th39);
			append_dev(th39, t105);
			append_dev(tr5, t106);
			append_dev(tr5, th40);
			append_dev(th40, t107);
			append_dev(tr5, t108);
			append_dev(tr5, th41);
			append_dev(th41, t109);
			append_dev(tr5, t110);
			append_dev(tr5, th42);
			append_dev(th42, t111);
			append_dev(tr5, t112);
			append_dev(tr5, th43);
			append_dev(th43, t113);
			append_dev(tr5, t114);
			append_dev(tr5, th44);
			append_dev(th44, t115);
			append_dev(table2, t116);
			append_dev(table2, tbody2);

			for (let i = 0; i < each_blocks_2.length; i += 1) {
				each_blocks_2[i].m(tbody2, null);
			}

			insert_dev(target, t117, anchor);
			insert_dev(target, div17, anchor);
			append_dev(div17, t118);
			append_dev(div17, t119);
			append_dev(div17, t120);
			insert_dev(target, t121, anchor);
			mount_component(chartsradarpushups, target, anchor);
			insert_dev(target, t122, anchor);
			insert_dev(target, div18, anchor);
			append_dev(div18, t123);
			insert_dev(target, t124, anchor);
			insert_dev(target, div20, anchor);
			append_dev(div20, t125);
			append_dev(div20, div19);
			append_dev(div19, table3);
			append_dev(table3, thead3);
			append_dev(thead3, tr6);
			append_dev(tr6, th45);
			append_dev(tr6, t126);
			append_dev(tr6, th46);
			append_dev(th46, t127);
			append_dev(tr6, t128);
			append_dev(tr6, th47);
			append_dev(th47, t129);
			append_dev(tr6, t130);
			append_dev(tr6, th48);
			append_dev(th48, t131);
			append_dev(thead3, t132);
			append_dev(thead3, tr7);
			append_dev(tr7, th49);
			append_dev(th49, t133);
			append_dev(tr7, t134);
			append_dev(tr7, th50);
			append_dev(th50, t135);
			append_dev(tr7, t136);
			append_dev(tr7, th51);
			append_dev(th51, t137);
			append_dev(tr7, t138);
			append_dev(tr7, th52);
			append_dev(th52, t139);
			append_dev(tr7, t140);
			append_dev(tr7, th53);
			append_dev(th53, t141);
			append_dev(tr7, t142);
			append_dev(tr7, th54);
			append_dev(th54, t143);
			append_dev(tr7, t144);
			append_dev(tr7, th55);
			append_dev(th55, t145);
			append_dev(table3, t146);
			append_dev(table3, tbody3);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(tbody3, null);
			}

			insert_dev(target, t147, anchor);
			insert_dev(target, div21, anchor);
			append_dev(div21, t148);
			append_dev(div21, t149);
			append_dev(div21, t150);
			insert_dev(target, t151, anchor);
			mount_component(chartsradarabdominals, target, anchor);
			insert_dev(target, t152, anchor);
			insert_dev(target, div22, anchor);
			append_dev(div22, t153);
			insert_dev(target, t154, anchor);
			insert_dev(target, div24, anchor);
			append_dev(div24, t155);
			append_dev(div24, div23);
			append_dev(div23, table4);
			append_dev(table4, thead4);
			append_dev(thead4, tr8);
			append_dev(tr8, th56);
			append_dev(tr8, t156);
			append_dev(tr8, th57);
			append_dev(th57, t157);
			append_dev(tr8, t158);
			append_dev(tr8, th58);
			append_dev(th58, t159);
			append_dev(tr8, t160);
			append_dev(tr8, th59);
			append_dev(th59, t161);
			append_dev(thead4, t162);
			append_dev(thead4, tr9);
			append_dev(tr9, th60);
			append_dev(th60, t163);
			append_dev(tr9, t164);
			append_dev(tr9, th61);
			append_dev(th61, t165);
			append_dev(tr9, t166);
			append_dev(tr9, th62);
			append_dev(th62, t167);
			append_dev(tr9, t168);
			append_dev(tr9, th63);
			append_dev(th63, t169);
			append_dev(tr9, t170);
			append_dev(tr9, th64);
			append_dev(th64, t171);
			append_dev(tr9, t172);
			append_dev(tr9, th65);
			append_dev(th65, t173);
			append_dev(tr9, t174);
			append_dev(tr9, th66);
			append_dev(th66, t175);
			append_dev(table4, t176);
			append_dev(table4, tbody4);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(tbody4, null);
			}

			insert_dev(target, t177, anchor);
			insert_dev(target, div25, anchor);
			append_dev(div25, t178);
			append_dev(div25, t179);
			append_dev(div25, t180);
			insert_dev(target, t181, anchor);
			mount_component(chartsradarothers, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*list_date*/ 32) {
				each_value_5 = get_last_nb_sessions(3, /*list_date*/ ctx[5]);
				validate_each_argument(each_value_5);
				let i;

				for (i = 0; i < each_value_5.length; i += 1) {
					const child_ctx = get_each_context_5(ctx, each_value_5, i);

					if (each_blocks_5[i]) {
						each_blocks_5[i].p(child_ctx, dirty);
					} else {
						each_blocks_5[i] = create_each_block_5(child_ctx);
						each_blocks_5[i].c();
						each_blocks_5[i].m(div3, null);
					}
				}

				for (; i < each_blocks_5.length; i += 1) {
					each_blocks_5[i].d(1);
				}

				each_blocks_5.length = each_value_5.length;
			}

			if (dirty[0] & /*data_raw*/ 1) {
				each_value_4 = /*data_raw*/ ctx[0];
				validate_each_argument(each_value_4);
				let i;

				for (i = 0; i < each_value_4.length; i += 1) {
					const child_ctx = get_each_context_4(ctx, each_value_4, i);

					if (each_blocks_4[i]) {
						each_blocks_4[i].p(child_ctx, dirty);
					} else {
						each_blocks_4[i] = create_each_block_4(child_ctx);
						each_blocks_4[i].c();
						each_blocks_4[i].m(tbody0, null);
					}
				}

				for (; i < each_blocks_4.length; i += 1) {
					each_blocks_4[i].d(1);
				}

				each_blocks_4.length = each_value_4.length;
			}

			if (dirty[0] & /*data_raw*/ 1) {
				each_value_3 = /*data_raw*/ ctx[0];
				validate_each_argument(each_value_3);
				let i;

				for (i = 0; i < each_value_3.length; i += 1) {
					const child_ctx = get_each_context_3(ctx, each_value_3, i);

					if (each_blocks_3[i]) {
						each_blocks_3[i].p(child_ctx, dirty);
					} else {
						each_blocks_3[i] = create_each_block_3(child_ctx);
						each_blocks_3[i].c();
						each_blocks_3[i].m(tbody1, null);
					}
				}

				for (; i < each_blocks_3.length; i += 1) {
					each_blocks_3[i].d(1);
				}

				each_blocks_3.length = each_value_3.length;
			}

			if (dirty[0] & /*data_raw*/ 1) {
				each_value_2 = /*data_raw*/ ctx[0];
				validate_each_argument(each_value_2);
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks_2[i]) {
						each_blocks_2[i].p(child_ctx, dirty);
					} else {
						each_blocks_2[i] = create_each_block_2(child_ctx);
						each_blocks_2[i].c();
						each_blocks_2[i].m(tbody2, null);
					}
				}

				for (; i < each_blocks_2.length; i += 1) {
					each_blocks_2[i].d(1);
				}

				each_blocks_2.length = each_value_2.length;
			}

			if (dirty[0] & /*data_raw*/ 1) {
				each_value_1 = /*data_raw*/ ctx[0];
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
					} else {
						each_blocks_1[i] = create_each_block_1(child_ctx);
						each_blocks_1[i].c();
						each_blocks_1[i].m(tbody3, null);
					}
				}

				for (; i < each_blocks_1.length; i += 1) {
					each_blocks_1[i].d(1);
				}

				each_blocks_1.length = each_value_1.length;
			}

			if (dirty[0] & /*data_raw*/ 1) {
				each_value = /*data_raw*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(tbody4, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(chartsradarleg0.$$.fragment, local);
			transition_in(chartsradarleg1.$$.fragment, local);
			transition_in(chartsradarpushups.$$.fragment, local);
			transition_in(chartsradarabdominals.$$.fragment, local);
			transition_in(chartsradarothers.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(chartsradarleg0.$$.fragment, local);
			transition_out(chartsradarleg1.$$.fragment, local);
			transition_out(chartsradarpushups.$$.fragment, local);
			transition_out(chartsradarabdominals.$$.fragment, local);
			transition_out(chartsradarothers.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div9);
			destroy_each(each_blocks_5, detaching);
			destroy_each(each_blocks_4, detaching);
			destroy_component(chartsradarleg0);
			if (detaching) detach_dev(t44);
			if (detaching) detach_dev(div10);
			if (detaching) detach_dev(t46);
			if (detaching) detach_dev(div12);
			destroy_each(each_blocks_3, detaching);
			if (detaching) detach_dev(t75);
			if (detaching) detach_dev(div13);
			if (detaching) detach_dev(t79);
			destroy_component(chartsradarleg1, detaching);
			if (detaching) detach_dev(t80);
			if (detaching) detach_dev(div14);
			if (detaching) detach_dev(t82);
			if (detaching) detach_dev(div16);
			destroy_each(each_blocks_2, detaching);
			if (detaching) detach_dev(t117);
			if (detaching) detach_dev(div17);
			if (detaching) detach_dev(t121);
			destroy_component(chartsradarpushups, detaching);
			if (detaching) detach_dev(t122);
			if (detaching) detach_dev(div18);
			if (detaching) detach_dev(t124);
			if (detaching) detach_dev(div20);
			destroy_each(each_blocks_1, detaching);
			if (detaching) detach_dev(t147);
			if (detaching) detach_dev(div21);
			if (detaching) detach_dev(t151);
			destroy_component(chartsradarabdominals, detaching);
			if (detaching) detach_dev(t152);
			if (detaching) detach_dev(div22);
			if (detaching) detach_dev(t154);
			if (detaching) detach_dev(div24);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(t177);
			if (detaching) detach_dev(div25);
			if (detaching) detach_dev(t181);
			destroy_component(chartsradarothers, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function preload({ params, query }) {
	return this.fetch(`sports/workout.json`).then(r => r.json()).then(data_raw => {
		return { data_raw };
	});
}

function push_series(x, exercise) {
	if (exercise in x) {
		return x[exercise]["Series"] * x[exercise]["Number"];
	} else return 0;
}

function last_element(list) {
	return list[list.length - 1];
}

function average_perf(list1, list2) {
	let count = 0;
	let length = 0;

	for (let i in list1) {
		if (list2[i] > 0) {
			count += list1[i] / list2[i];
			length += 1;
		}
	}

	return count / length * 100;
}

function round_1_decimal(float) {
	return Math.round(float * 10) / 10;
}

function mean_list_notnull(list) {
	let count = 0;
	let length = 0;

	list.forEach(elem => {
		if (elem > 0) {
			count += elem;
			length += 1;
		}
	});

	return count / length;
}

function get_last_nb_sessions(int, list) {
	return list.slice(Math.max(list.length - int, 0));
}

function instance($$self, $$props, $$invalidate) {
	let { data_raw } = $$props;

	const workout_exercise = [
		{
			"name": "Squats",
			"features": ["Series", "Number"],
			"group": "Legs"
		},
		{
			"name": "Stair Climbs",
			"features": ["Series", "Number"],
			"group": "Legs"
		},
		{
			"name": "Bench Climbs",
			"features": ["Series", "Number"],
			"group": "Legs"
		},
		{
			"name": "Leg Press",
			"features": ["Series", "Number"],
			"group": "Legs"
		},
		{
			"name": "Push-Ups",
			"features": ["Series", "Number"],
			"group": "Push-Ups"
		},
		{
			"name": "Lateral Push-Ups",
			"features": ["Series", "Number"],
			"group": "Push-Ups"
		},
		{
			"name": "Jumping Push-Ups",
			"features": ["Series", "Number"],
			"group": "Push-Ups"
		},
		{
			"name": "Close Push-Ups",
			"features": ["Series", "Number"],
			"group": "Push-Ups"
		},
		{
			"name": "Raised Push-Ups",
			"features": ["Series", "Number"],
			"group": "Push-Ups"
		},
		{
			"name": "Abdominal",
			"features": ["Series", "Number"],
			"group": "Abdominals"
		},
		{
			"name": "Abdominal Lateral",
			"features": ["Series", "Number"],
			"group": "Abdominals"
		},
		{
			"name": "Core Abdominal",
			"features": ["Series", "Number"],
			"group": "Abdominals"
		},
		{
			"name": "Bench",
			"features": ["Series", "Number"],
			"group": "Weight"
		},
		{
			"name": "Biceps Weight",
			"features": ["Series", "Number"],
			"group": "Weight"
		},
		{
			"name": "Pull-Ups",
			"features": ["Series", "Number"],
			"group": "Pull-Ups"
		}
	];

	const group_list = {
		"Legs": ["Squats", "Stair Climbs", "Bench Climbs", "Leg Press"],
		"Push-Ups": [
			"Push-Ups",
			"Lateral Push-Ups",
			"Jumping Push-Ups",
			"Close Push-Ups",
			"Raised Push-Ups"
		],
		"Abdominals": ["Abdominal", "Abdominal Lateral", "Core Abdominal"],
		"Others": ["Bench", "Biceps Weight", "Pull-Ups"]
	};

	// LEGS : 
	let squats = [];

	let stair_climbs = [];
	let bench_climbs = [];
	let leg_press = [];
	let list_date = [];

	data_raw.forEach(x => {
		list_date.push(x["date"]);
		squats.push(push_series(x, "Squats"));
		stair_climbs.push(push_series(x, "Stair Climbs"));
		bench_climbs.push(push_series(x, "Bench Climbs"));
		leg_press.push(push_series(x, "Leg Press"));
	});

	let last_legs = [
		last_element(squats),
		last_element(stair_climbs),
		last_element(bench_climbs),
		last_element(leg_press)
	];

	let mean_legs = [
		mean_list_notnull(squats),
		mean_list_notnull(stair_climbs),
		mean_list_notnull(bench_climbs),
		mean_list_notnull(leg_press)
	];

	const data_leg_radar = {
		labels: group_list["Legs"],
		datasets: [
			{ label: "Last session", data: last_legs },
			{
				label: "Average session",
				data: mean_legs
			}
		]
	};

	let leg_global_indicator = round_1_decimal(average_perf(last_legs, mean_legs));
	let pushups = [];
	let pushups_lateral = [];
	let pushups_jumping = [];
	let pushups_close = [];
	let raised_pushups = [];

	data_raw.forEach(x => {
		pushups.push(push_series(x, "Push-Ups"));
		pushups_lateral.push(push_series(x, "Lateral Push-Ups"));
		pushups_jumping.push(push_series(x, "Jumping Push-Ups"));
		pushups_close.push(push_series(x, "Close Push-Ups"));
		raised_pushups.push(push_series(x, "Raised Push-Ups"));
	});

	let last_pushups = [
		last_element(pushups),
		last_element(pushups_lateral),
		last_element(pushups_jumping),
		last_element(pushups_close),
		last_element(raised_pushups)
	];

	let mean_pushups = [
		mean_list_notnull(pushups),
		mean_list_notnull(pushups_lateral),
		mean_list_notnull(pushups_jumping),
		mean_list_notnull(pushups_close),
		mean_list_notnull(raised_pushups)
	];

	const data_pushups_radar = {
		labels: group_list["Push-Ups"],
		datasets: [
			{
				label: "Last session",
				data: last_pushups
			},
			{
				label: "Average session",
				data: mean_pushups
			}
		]
	};

	let pushups_global_indicator = round_1_decimal(average_perf(last_pushups, mean_pushups));
	let abdominal = [];
	let abdominal_lateral = [];
	let abdominal_core = [];

	data_raw.forEach(x => {
		abdominal.push(push_series(x, "Abdominal"));
		abdominal_lateral.push(push_series(x, "Abdominal Lateral"));
		abdominal_core.push(push_series(x, "Core Abdominal"));
	});

	let last_abdominal = [
		last_element(abdominal),
		last_element(abdominal_lateral),
		last_element(abdominal_core)
	];

	let mean_abdominal = [
		mean_list_notnull(abdominal),
		mean_list_notnull(abdominal_lateral),
		mean_list_notnull(abdominal_core)
	];

	const data_abdominal_radar = {
		labels: group_list["Abdominals"],
		datasets: [
			{
				label: "Last session",
				data: last_abdominal
			},
			{
				label: "Average session",
				data: mean_abdominal
			}
		]
	};

	let abdominal_global_indicator = round_1_decimal(average_perf(last_abdominal, mean_abdominal));

	// Others : 
	//['Bench', 'Biceps Weight', 'Pull-Ups']
	let bench = [];

	let biceps_weight = [];
	let pullups = [];

	data_raw.forEach(x => {
		bench.push(push_series(x, "Bench"));
		biceps_weight.push(push_series(x, "Biceps Weight"));
		pullups.push(push_series(x, "Pull-Ups"));
	});

	let last_others = [last_element(bench), last_element(biceps_weight), last_element(pullups)];

	let mean_others = [
		mean_list_notnull(bench),
		mean_list_notnull(biceps_weight),
		mean_list_notnull(pullups)
	];

	const data_others_radar = {
		labels: group_list["Others"],
		datasets: [
			{ label: "Last session", data: last_others },
			{
				label: "Average session",
				data: mean_others
			}
		]
	};

	let others_global_indicator = round_1_decimal(average_perf(last_others, mean_others));
	const writable_props = ["data_raw"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Workout> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Workout", $$slots, []);

	$$self.$set = $$props => {
		if ("data_raw" in $$props) $$invalidate(0, data_raw = $$props.data_raw);
	};

	$$self.$capture_state = () => ({
		preload,
		ChartsRadarLeg: Workoutlegs_radar,
		ChartsRadarPushUps: Workoutpushups_radar,
		ChartsRadarAbdominals: Workoutabdo_radar,
		ChartsRadarOthers: Workoutothers_radar,
		data_raw,
		workout_exercise,
		group_list,
		push_series,
		last_element,
		average_perf,
		round_1_decimal,
		mean_list_notnull,
		get_last_nb_sessions,
		squats,
		stair_climbs,
		bench_climbs,
		leg_press,
		list_date,
		last_legs,
		mean_legs,
		data_leg_radar,
		leg_global_indicator,
		pushups,
		pushups_lateral,
		pushups_jumping,
		pushups_close,
		raised_pushups,
		last_pushups,
		mean_pushups,
		data_pushups_radar,
		pushups_global_indicator,
		abdominal,
		abdominal_lateral,
		abdominal_core,
		last_abdominal,
		mean_abdominal,
		data_abdominal_radar,
		abdominal_global_indicator,
		bench,
		biceps_weight,
		pullups,
		last_others,
		mean_others,
		data_others_radar,
		others_global_indicator
	});

	$$self.$inject_state = $$props => {
		if ("data_raw" in $$props) $$invalidate(0, data_raw = $$props.data_raw);
		if ("squats" in $$props) squats = $$props.squats;
		if ("stair_climbs" in $$props) stair_climbs = $$props.stair_climbs;
		if ("bench_climbs" in $$props) bench_climbs = $$props.bench_climbs;
		if ("leg_press" in $$props) leg_press = $$props.leg_press;
		if ("list_date" in $$props) $$invalidate(5, list_date = $$props.list_date);
		if ("last_legs" in $$props) last_legs = $$props.last_legs;
		if ("mean_legs" in $$props) mean_legs = $$props.mean_legs;
		if ("leg_global_indicator" in $$props) $$invalidate(6, leg_global_indicator = $$props.leg_global_indicator);
		if ("pushups" in $$props) pushups = $$props.pushups;
		if ("pushups_lateral" in $$props) pushups_lateral = $$props.pushups_lateral;
		if ("pushups_jumping" in $$props) pushups_jumping = $$props.pushups_jumping;
		if ("pushups_close" in $$props) pushups_close = $$props.pushups_close;
		if ("raised_pushups" in $$props) raised_pushups = $$props.raised_pushups;
		if ("last_pushups" in $$props) last_pushups = $$props.last_pushups;
		if ("mean_pushups" in $$props) mean_pushups = $$props.mean_pushups;
		if ("pushups_global_indicator" in $$props) $$invalidate(7, pushups_global_indicator = $$props.pushups_global_indicator);
		if ("abdominal" in $$props) abdominal = $$props.abdominal;
		if ("abdominal_lateral" in $$props) abdominal_lateral = $$props.abdominal_lateral;
		if ("abdominal_core" in $$props) abdominal_core = $$props.abdominal_core;
		if ("last_abdominal" in $$props) last_abdominal = $$props.last_abdominal;
		if ("mean_abdominal" in $$props) mean_abdominal = $$props.mean_abdominal;
		if ("abdominal_global_indicator" in $$props) $$invalidate(8, abdominal_global_indicator = $$props.abdominal_global_indicator);
		if ("bench" in $$props) bench = $$props.bench;
		if ("biceps_weight" in $$props) biceps_weight = $$props.biceps_weight;
		if ("pullups" in $$props) pullups = $$props.pullups;
		if ("last_others" in $$props) last_others = $$props.last_others;
		if ("mean_others" in $$props) mean_others = $$props.mean_others;
		if ("others_global_indicator" in $$props) $$invalidate(9, others_global_indicator = $$props.others_global_indicator);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		data_raw,
		data_leg_radar,
		data_pushups_radar,
		data_abdominal_radar,
		data_others_radar,
		list_date,
		leg_global_indicator,
		pushups_global_indicator,
		abdominal_global_indicator,
		others_global_indicator
	];
}

class Workout extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				data_raw: 0,
				data_leg_radar: 1,
				data_pushups_radar: 2,
				data_abdominal_radar: 3,
				data_others_radar: 4
			},
			[-1, -1]
		);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Workout",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*data_raw*/ ctx[0] === undefined && !("data_raw" in props)) {
			console.warn("<Workout> was created without expected prop 'data_raw'");
		}
	}

	get data_raw() {
		throw new Error("<Workout>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set data_raw(value) {
		throw new Error("<Workout>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get data_leg_radar() {
		return this.$$.ctx[1];
	}

	set data_leg_radar(value) {
		throw new Error("<Workout>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get data_pushups_radar() {
		return this.$$.ctx[2];
	}

	set data_pushups_radar(value) {
		throw new Error("<Workout>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get data_abdominal_radar() {
		return this.$$.ctx[3];
	}

	set data_abdominal_radar(value) {
		throw new Error("<Workout>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get data_others_radar() {
		return this.$$.ctx[4];
	}

	set data_others_radar(value) {
		throw new Error("<Workout>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Workout;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
