main.svelte-1agvlw4{position:relative;max-width:72em;background:linear-gradient(45deg , #c5e1f1 ,#FFFFFF  );padding:0;margin:0 auto;box-sizing:border-box}
h1.svelte-13vgy2g,p.svelte-13vgy2g{margin:0 auto}h1.svelte-13vgy2g{font-size:2.8em;font-weight:700;margin:0 0 0.5em 0}p.svelte-13vgy2g{margin:1em auto}@media(min-width: 480px){h1.svelte-13vgy2g{font-size:4em}}
.workout.svelte-rrn26j::before{content:"üèãÔ∏è"}.swimming.svelte-rrn26j::before{content:"üèä"}.cycling.svelte-rrn26j::before{content:"üö¥"}.running.svelte-rrn26j::before{content:"üèÉ"}
.box.svelte-vukbuc{width:300px;border:1px solid #aaa;border-radius:2px;box-shadow:2px 2px 8px rgba(0,0,0,0.1);padding:1em;margin:0 0 1em 0}
.red.svelte-1859c1g{color:red}.green.svelte-1859c1g{color:green}
.red.svelte-1859c1g{color:red}.green.svelte-1859c1g{color:green}
.red.svelte-1859c1g{color:red}.green.svelte-1859c1g{color:green}
.red.svelte-1859c1g{color:red}.green.svelte-1859c1g{color:green}
ul.svelte-t57dav{margin:0;padding:0}ul.svelte-t57dav::after{content:'';display:block;clear:both}li.svelte-t57dav{display:block;float:left}[aria-current].svelte-t57dav{position:relative;display:inline-block}[aria-current].svelte-t57dav::after{position:absolute;content:'';width:calc(100% - 1em);height:2px;background-color:rgb(255,62,0);display:block;bottom:-1px}a.svelte-t57dav{text-decoration:none;padding:1em 0.5em;display:block}[aria-current].svelte-t57dav::after{position:absolute;content:'';width:calc(100% - 1em);height:2px;background-color:orange;display:block;bottom:-1px}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */