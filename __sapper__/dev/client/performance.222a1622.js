import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, C as create_slot, v as validate_slots, t as text, h as claim_text, l as insert_dev, b as detach_dev, e as element, a as space, f as claim_element, g as children, c as claim_space, k as add_location, j as attr_dev, m as append_dev, D as get_slot_context, E as get_slot_changes, z as transition_in, A as transition_out } from './client.ce937db1.js';

/* src/routes/performance.svelte generated by Svelte v3.22.3 */

const file = "src/routes/performance.svelte";
const get_footer_slot_changes = dirty => ({});
const get_footer_slot_context = ctx => ({});
const get_header_slot_changes = dirty => ({});
const get_header_slot_context = ctx => ({});

// (3:21) No header was provided
function fallback_block(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("No header was provided");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "No header was provided");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: fallback_block.name,
		type: "fallback",
		source: "(3:21) No header was provided",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div;
	let t0;
	let p;
	let t1;
	let t2;
	let t3;
	let ul;
	let li0;
	let a0;
	let t4;
	let t5;
	let li1;
	let a1;
	let t6;
	let t7;
	let li2;
	let a2;
	let t8;
	let current;
	const header_slot_template = /*$$slots*/ ctx[1].header;
	const header_slot = create_slot(header_slot_template, ctx, /*$$scope*/ ctx[0], get_header_slot_context);
	const header_slot_or_fallback = header_slot || fallback_block(ctx);
	const footer_slot_template = /*$$slots*/ ctx[1].footer;
	const footer_slot = create_slot(footer_slot_template, ctx, /*$$scope*/ ctx[0], get_footer_slot_context);

	const block = {
		c: function create() {
			div = element("div");
			if (header_slot_or_fallback) header_slot_or_fallback.c();
			t0 = space();
			p = element("p");
			t1 = text("Some content between header and footer");
			t2 = space();
			if (footer_slot) footer_slot.c();
			t3 = space();
			ul = element("ul");
			li0 = element("li");
			a0 = element("a");
			t4 = text("Cycling");
			t5 = space();
			li1 = element("li");
			a1 = element("a");
			t6 = text("Running");
			t7 = space();
			li2 = element("li");
			a2 = element("a");
			t8 = text("Work-out");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", {});
			var div_nodes = children(div);
			if (header_slot_or_fallback) header_slot_or_fallback.l(div_nodes);
			t0 = claim_space(div_nodes);
			p = claim_element(div_nodes, "P", {});
			var p_nodes = children(p);
			t1 = claim_text(p_nodes, "Some content between header and footer");
			p_nodes.forEach(detach_dev);
			t2 = claim_space(div_nodes);
			if (footer_slot) footer_slot.l(div_nodes);
			div_nodes.forEach(detach_dev);
			t3 = claim_space(nodes);
			ul = claim_element(nodes, "UL", {});
			var ul_nodes = children(ul);
			li0 = claim_element(ul_nodes, "LI", { class: true });
			var li0_nodes = children(li0);
			a0 = claim_element(li0_nodes, "A", { href: true });
			var a0_nodes = children(a0);
			t4 = claim_text(a0_nodes, "Cycling");
			a0_nodes.forEach(detach_dev);
			li0_nodes.forEach(detach_dev);
			t5 = claim_space(ul_nodes);
			li1 = claim_element(ul_nodes, "LI", {});
			var li1_nodes = children(li1);
			a1 = claim_element(li1_nodes, "A", { href: true });
			var a1_nodes = children(a1);
			t6 = claim_text(a1_nodes, "Running");
			a1_nodes.forEach(detach_dev);
			li1_nodes.forEach(detach_dev);
			t7 = claim_space(ul_nodes);
			li2 = claim_element(ul_nodes, "LI", {});
			var li2_nodes = children(li2);
			a2 = claim_element(li2_nodes, "A", { href: true });
			var a2_nodes = children(a2);
			t8 = claim_text(a2_nodes, "Work-out");
			a2_nodes.forEach(detach_dev);
			li2_nodes.forEach(detach_dev);
			ul_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(p, file, 3, 1, 59);
			add_location(div, file, 1, 0, 1);
			attr_dev(a0, "href", "sports/cycling/cycling");
			add_location(a0, file, 10, 26, 175);
			attr_dev(li0, "class", "bg-blue-100");
			add_location(li0, file, 10, 2, 151);
			attr_dev(a1, "href", "sports/running/running");
			add_location(a1, file, 12, 6, 240);
			add_location(li1, file, 12, 2, 236);
			attr_dev(a2, "href", "sports/workout/workout");
			add_location(a2, file, 14, 12, 305);
			add_location(li2, file, 14, 8, 301);
			add_location(ul, file, 8, 0, 143);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (header_slot_or_fallback) {
				header_slot_or_fallback.m(div, null);
			}

			append_dev(div, t0);
			append_dev(div, p);
			append_dev(p, t1);
			append_dev(div, t2);

			if (footer_slot) {
				footer_slot.m(div, null);
			}

			insert_dev(target, t3, anchor);
			insert_dev(target, ul, anchor);
			append_dev(ul, li0);
			append_dev(li0, a0);
			append_dev(a0, t4);
			append_dev(ul, t5);
			append_dev(ul, li1);
			append_dev(li1, a1);
			append_dev(a1, t6);
			append_dev(ul, t7);
			append_dev(ul, li2);
			append_dev(li2, a2);
			append_dev(a2, t8);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (header_slot) {
				if (header_slot.p && dirty & /*$$scope*/ 1) {
					header_slot.p(get_slot_context(header_slot_template, ctx, /*$$scope*/ ctx[0], get_header_slot_context), get_slot_changes(header_slot_template, /*$$scope*/ ctx[0], dirty, get_header_slot_changes));
				}
			}

			if (footer_slot) {
				if (footer_slot.p && dirty & /*$$scope*/ 1) {
					footer_slot.p(get_slot_context(footer_slot_template, ctx, /*$$scope*/ ctx[0], get_footer_slot_context), get_slot_changes(footer_slot_template, /*$$scope*/ ctx[0], dirty, get_footer_slot_changes));
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(header_slot_or_fallback, local);
			transition_in(footer_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(header_slot_or_fallback, local);
			transition_out(footer_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (header_slot_or_fallback) header_slot_or_fallback.d(detaching);
			if (footer_slot) footer_slot.d(detaching);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(ul);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Performance> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Performance", $$slots, ['header','footer']);

	$$self.$set = $$props => {
		if ("$$scope" in $$props) $$invalidate(0, $$scope = $$props.$$scope);
	};

	return [$$scope, $$slots];
}

class Performance extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Performance",
			options,
			id: create_fragment.name
		});
	}
}

export default Performance;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVyZm9ybWFuY2UuMjIyYTE2MjIuanMiLCJzb3VyY2VzIjpbXSwic291cmNlc0NvbnRlbnQiOltdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
