import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, v as validate_slots, e as element, t as text, a as space, c as create_component, g as claim_element, h as children, j as claim_text, b as detach_dev, f as claim_space, k as claim_component, m as add_location, n as insert_dev, o as append_dev, p as mount_component, r as noop, u as transition_in, w as transition_out, x as destroy_component } from './client.a4ddec6c.js';
import './_commonjsHelpers.1e235def.js';
import './Chart.97e39373.js';
import Cycling_charts from './cycling-charts.4351eb8c.js';

const datas = {
    labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],
    datasets: [{
        label: '# of Votes',
        data:[10,2,3,4,5,6],
        backgroundColor: [
            'rgba(255, 99, 132, 0.2)',
            'rgba(54, 162, 235, 0.2)',
            'rgba(255, 206, 86, 0.2)',
            'rgba(75, 192, 192, 0.2)',
            'rgba(153, 102, 255, 0.2)',
            'rgba(255, 159, 64, 0.2)'
        ],
        borderColor: [
            'rgba(255, 99, 132, 1)',
            'rgba(54, 162, 235, 1)',
            'rgba(255, 206, 86, 1)',
            'rgba(75, 192, 192, 1)',
            'rgba(153, 102, 255, 1)',
            'rgba(255, 159, 64, 1)'
        ],
        borderWidth: 1
    }]
};

/* src/routes/sports/cycling/cycling.svelte generated by Svelte v3.22.3 */
const file = "src/routes/sports/cycling/cycling.svelte";

function create_fragment(ctx) {
	let h1;
	let t0;
	let t1;
	let current;

	const charts = new Cycling_charts({
			props: { data: /*data*/ ctx[0] },
			$$inline: true
		});

	const block = {
		c: function create() {
			h1 = element("h1");
			t0 = text("Cycling");
			t1 = space();
			create_component(charts.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", {});
			var h1_nodes = children(h1);
			t0 = claim_text(h1_nodes, "Cycling");
			h1_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			claim_component(charts.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			add_location(h1, file, 6, 0, 132);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h1, anchor);
			append_dev(h1, t0);
			insert_dev(target, t1, anchor);
			mount_component(charts, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(charts.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(charts.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t1);
			destroy_component(charts, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let data = datas;
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Cycling> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Cycling", $$slots, []);
	$$self.$capture_state = () => ({ Charts: Cycling_charts, datas, data });

	$$self.$inject_state = $$props => {
		if ("data" in $$props) $$invalidate(0, data = $$props.data);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [data];
}

class Cycling extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Cycling",
			options,
			id: create_fragment.name
		});
	}
}

export default Cycling;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3ljbGluZy4zYTBhM2RkOS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3JvdXRlcy9zcG9ydHMvY3ljbGluZy9jeWNsaW5nLWRhdGEuanMiLCIuLi8uLi8uLi9zcmMvcm91dGVzL3Nwb3J0cy9jeWNsaW5nL2N5Y2xpbmcuc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGRhdGFzID0ge1xuICAgIGxhYmVsczogWydSZWQnLCAnQmx1ZScsICdZZWxsb3cnLCAnR3JlZW4nLCAnUHVycGxlJywgJ09yYW5nZSddLFxuICAgIGRhdGFzZXRzOiBbe1xuICAgICAgICBsYWJlbDogJyMgb2YgVm90ZXMnLFxuICAgICAgICBkYXRhOlsxMCwyLDMsNCw1LDZdLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IFtcbiAgICAgICAgICAgICdyZ2JhKDI1NSwgOTksIDEzMiwgMC4yKScsXG4gICAgICAgICAgICAncmdiYSg1NCwgMTYyLCAyMzUsIDAuMiknLFxuICAgICAgICAgICAgJ3JnYmEoMjU1LCAyMDYsIDg2LCAwLjIpJyxcbiAgICAgICAgICAgICdyZ2JhKDc1LCAxOTIsIDE5MiwgMC4yKScsXG4gICAgICAgICAgICAncmdiYSgxNTMsIDEwMiwgMjU1LCAwLjIpJyxcbiAgICAgICAgICAgICdyZ2JhKDI1NSwgMTU5LCA2NCwgMC4yKSdcbiAgICAgICAgXSxcbiAgICAgICAgYm9yZGVyQ29sb3I6IFtcbiAgICAgICAgICAgICdyZ2JhKDI1NSwgOTksIDEzMiwgMSknLFxuICAgICAgICAgICAgJ3JnYmEoNTQsIDE2MiwgMjM1LCAxKScsXG4gICAgICAgICAgICAncmdiYSgyNTUsIDIwNiwgODYsIDEpJyxcbiAgICAgICAgICAgICdyZ2JhKDc1LCAxOTIsIDE5MiwgMSknLFxuICAgICAgICAgICAgJ3JnYmEoMTUzLCAxMDIsIDI1NSwgMSknLFxuICAgICAgICAgICAgJ3JnYmEoMjU1LCAxNTksIDY0LCAxKSdcbiAgICAgICAgXSxcbiAgICAgICAgYm9yZGVyV2lkdGg6IDFcbiAgICB9XVxufVxuXG5leHBvcnQgZGVmYXVsdCBkYXRhcyIsIjxzY3JpcHQ+XG4gICAgaW1wb3J0IENoYXJ0cyBmcm9tICcuL2N5Y2xpbmctY2hhcnRzLnN2ZWx0ZSdcbiAgICBpbXBvcnQgZGF0YXMgZnJvbSAnLi9jeWNsaW5nLWRhdGEuanMnXG4gICAgbGV0IGRhdGEgPSBkYXRhc1xuPC9zY3JpcHQ+XG5cbjxoMT5DeWNsaW5nPC9oMT5cblxuPENoYXJ0cyB7ZGF0YX0gLz4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxNQUFNLEtBQUssR0FBRztBQUNkLElBQUksTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxRQUFRLENBQUM7QUFDbEUsSUFBSSxRQUFRLEVBQUUsQ0FBQztBQUNmLFFBQVEsS0FBSyxFQUFFLFlBQVk7QUFDM0IsUUFBUSxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMzQixRQUFRLGVBQWUsRUFBRTtBQUN6QixZQUFZLHlCQUF5QjtBQUNyQyxZQUFZLHlCQUF5QjtBQUNyQyxZQUFZLHlCQUF5QjtBQUNyQyxZQUFZLHlCQUF5QjtBQUNyQyxZQUFZLDBCQUEwQjtBQUN0QyxZQUFZLHlCQUF5QjtBQUNyQyxTQUFTO0FBQ1QsUUFBUSxXQUFXLEVBQUU7QUFDckIsWUFBWSx1QkFBdUI7QUFDbkMsWUFBWSx1QkFBdUI7QUFDbkMsWUFBWSx1QkFBdUI7QUFDbkMsWUFBWSx1QkFBdUI7QUFDbkMsWUFBWSx3QkFBd0I7QUFDcEMsWUFBWSx1QkFBdUI7QUFDbkMsU0FBUztBQUNULFFBQVEsV0FBVyxFQUFFLENBQUM7QUFDdEIsS0FBSyxDQUFDO0FBQ047Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQ3BCUSxJQUFJLEdBQUcsS0FBSzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=
