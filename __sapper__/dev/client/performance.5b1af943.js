import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, v as validate_slots, w as create_component, a as space, e as element, t as text, x as claim_component, c as claim_space, f as claim_element, g as children, h as claim_text, b as detach_dev, j as attr_dev, k as add_location, y as mount_component, l as insert_dev, m as append_dev, z as transition_in, A as transition_out, B as destroy_component } from './client.59db4ee9.js';
import { BlockTitle, Card, Page, Navbar, CardHeader, CardContent, CardFooter, Link, List, ListItem } from 'framework7-svelte';

/* src/routes/performance.svelte generated by Svelte v3.22.3 */

const file = "src/routes/performance.svelte";

// (7:0) <BlockTitle>
function create_default_slot_6(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Styled Cards");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Styled Cards");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_6.name,
		type: "slot",
		source: "(7:0) <BlockTitle>",
		ctx
	});

	return block;
}

// (9:4) <CardHeader       class="no-border"       valign="bottom"       style="background-image: url(https://cdn.framework7.io/placeholder/nature-1000x600-3.jpg)"     >
function create_default_slot_5(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Journey To Mountains");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Journey To Mountains");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_5.name,
		type: "slot",
		source: "(9:4) <CardHeader       class=\\\"no-border\\\"       valign=\\\"bottom\\\"       style=\\\"background-image: url(https://cdn.framework7.io/placeholder/nature-1000x600-3.jpg)\\\"     >",
		ctx
	});

	return block;
}

// (14:4) <CardContent>
function create_default_slot_4(ctx) {
	let p0;
	let t0;
	let t1;
	let p1;
	let t2;

	const block = {
		c: function create() {
			p0 = element("p");
			t0 = text("Posted on January 21, 2015");
			t1 = space();
			p1 = element("p");
			t2 = text("Quisque eget vestibulum nulla. Quisque quis dui quis ex ultricies efficitur vitae non felis. Phasellus quis nibh hendrerit...");
			this.h();
		},
		l: function claim(nodes) {
			p0 = claim_element(nodes, "P", { class: true });
			var p0_nodes = children(p0);
			t0 = claim_text(p0_nodes, "Posted on January 21, 2015");
			p0_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			p1 = claim_element(nodes, "P", {});
			var p1_nodes = children(p1);
			t2 = claim_text(p1_nodes, "Quisque eget vestibulum nulla. Quisque quis dui quis ex ultricies efficitur vitae non felis. Phasellus quis nibh hendrerit...");
			p1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p0, "class", "date");
			add_location(p0, file, 14, 6, 449);
			add_location(p1, file, 15, 6, 502);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p0, anchor);
			append_dev(p0, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, p1, anchor);
			append_dev(p1, t2);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p0);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(p1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4.name,
		type: "slot",
		source: "(14:4) <CardContent>",
		ctx
	});

	return block;
}

// (19:6) <Link>
function create_default_slot_3(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Like");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Like");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(19:6) <Link>",
		ctx
	});

	return block;
}

// (20:6) <Link>
function create_default_slot_2(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Read more");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Read more");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(20:6) <Link>",
		ctx
	});

	return block;
}

// (18:4) <CardFooter>
function create_default_slot_1(ctx) {
	let t;
	let current;

	const link0 = new Link({
			props: {
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const link1 = new Link({
			props: {
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(link0.$$.fragment);
			t = space();
			create_component(link1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(link0.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(link1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(link0, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(link1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const link0_changes = {};

			if (dirty & /*$$scope*/ 1) {
				link0_changes.$$scope = { dirty, ctx };
			}

			link0.$set(link0_changes);
			const link1_changes = {};

			if (dirty & /*$$scope*/ 1) {
				link1_changes.$$scope = { dirty, ctx };
			}

			link1.$set(link1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(link0.$$.fragment, local);
			transition_in(link1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(link0.$$.fragment, local);
			transition_out(link1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(link0, detaching);
			if (detaching) detach_dev(t);
			destroy_component(link1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(18:4) <CardFooter>",
		ctx
	});

	return block;
}

// (8:2) <Card class="demo-card-header-pic">
function create_default_slot(ctx) {
	let t0;
	let t1;
	let current;

	const cardheader = new CardHeader({
			props: {
				class: "no-border",
				valign: "bottom",
				style: "background-image: url(https://cdn.framework7.io/placeholder/nature-1000x600-3.jpg)",
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const cardcontent = new CardContent({
			props: {
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const cardfooter = new CardFooter({
			props: {
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(cardheader.$$.fragment);
			t0 = space();
			create_component(cardcontent.$$.fragment);
			t1 = space();
			create_component(cardfooter.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(cardheader.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(cardcontent.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(cardfooter.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(cardheader, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(cardcontent, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(cardfooter, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const cardheader_changes = {};

			if (dirty & /*$$scope*/ 1) {
				cardheader_changes.$$scope = { dirty, ctx };
			}

			cardheader.$set(cardheader_changes);
			const cardcontent_changes = {};

			if (dirty & /*$$scope*/ 1) {
				cardcontent_changes.$$scope = { dirty, ctx };
			}

			cardcontent.$set(cardcontent_changes);
			const cardfooter_changes = {};

			if (dirty & /*$$scope*/ 1) {
				cardfooter_changes.$$scope = { dirty, ctx };
			}

			cardfooter.$set(cardfooter_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(cardheader.$$.fragment, local);
			transition_in(cardcontent.$$.fragment, local);
			transition_in(cardfooter.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(cardheader.$$.fragment, local);
			transition_out(cardcontent.$$.fragment, local);
			transition_out(cardfooter.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(cardheader, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(cardcontent, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(cardfooter, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(8:2) <Card class=\\\"demo-card-header-pic\\\">",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let t1;
	let ul;
	let li0;
	let a0;
	let t2;
	let t3;
	let li1;
	let a1;
	let t4;
	let t5;
	let li2;
	let a2;
	let t6;
	let current;

	const blocktitle = new BlockTitle({
			props: {
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const card = new Card({
			props: {
				class: "demo-card-header-pic",
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(blocktitle.$$.fragment);
			t0 = space();
			create_component(card.$$.fragment);
			t1 = space();
			ul = element("ul");
			li0 = element("li");
			a0 = element("a");
			t2 = text("Cycling");
			t3 = space();
			li1 = element("li");
			a1 = element("a");
			t4 = text("Running");
			t5 = space();
			li2 = element("li");
			a2 = element("a");
			t6 = text("Work-out");
			this.h();
		},
		l: function claim(nodes) {
			claim_component(blocktitle.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(card.$$.fragment, nodes);
			t1 = claim_space(nodes);
			ul = claim_element(nodes, "UL", {});
			var ul_nodes = children(ul);
			li0 = claim_element(ul_nodes, "LI", { class: true });
			var li0_nodes = children(li0);
			a0 = claim_element(li0_nodes, "A", { href: true });
			var a0_nodes = children(a0);
			t2 = claim_text(a0_nodes, "Cycling");
			a0_nodes.forEach(detach_dev);
			li0_nodes.forEach(detach_dev);
			t3 = claim_space(ul_nodes);
			li1 = claim_element(ul_nodes, "LI", {});
			var li1_nodes = children(li1);
			a1 = claim_element(li1_nodes, "A", { href: true });
			var a1_nodes = children(a1);
			t4 = claim_text(a1_nodes, "Running");
			a1_nodes.forEach(detach_dev);
			li1_nodes.forEach(detach_dev);
			t5 = claim_space(ul_nodes);
			li2 = claim_element(ul_nodes, "LI", {});
			var li2_nodes = children(li2);
			a2 = claim_element(li2_nodes, "A", { href: true });
			var a2_nodes = children(a2);
			t6 = claim_text(a2_nodes, "Work-out");
			a2_nodes.forEach(detach_dev);
			li2_nodes.forEach(detach_dev);
			ul_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a0, "href", "sports/cycling/cycling");
			add_location(a0, file, 26, 26, 786);
			attr_dev(li0, "class", "bg-blue-100");
			add_location(li0, file, 26, 2, 762);
			attr_dev(a1, "href", "sports/running/running");
			add_location(a1, file, 28, 6, 851);
			add_location(li1, file, 28, 2, 847);
			attr_dev(a2, "href", "sports/workout/workout");
			add_location(a2, file, 30, 12, 916);
			add_location(li2, file, 30, 8, 912);
			add_location(ul, file, 24, 0, 754);
		},
		m: function mount(target, anchor) {
			mount_component(blocktitle, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(card, target, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, ul, anchor);
			append_dev(ul, li0);
			append_dev(li0, a0);
			append_dev(a0, t2);
			append_dev(ul, t3);
			append_dev(ul, li1);
			append_dev(li1, a1);
			append_dev(a1, t4);
			append_dev(ul, t5);
			append_dev(ul, li2);
			append_dev(li2, a2);
			append_dev(a2, t6);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const blocktitle_changes = {};

			if (dirty & /*$$scope*/ 1) {
				blocktitle_changes.$$scope = { dirty, ctx };
			}

			blocktitle.$set(blocktitle_changes);
			const card_changes = {};

			if (dirty & /*$$scope*/ 1) {
				card_changes.$$scope = { dirty, ctx };
			}

			card.$set(card_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(blocktitle.$$.fragment, local);
			transition_in(card.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(blocktitle.$$.fragment, local);
			transition_out(card.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(blocktitle, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(card, detaching);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(ul);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Performance> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Performance", $$slots, []);

	$$self.$capture_state = () => ({
		Page,
		Navbar,
		BlockTitle,
		Card,
		CardHeader,
		CardContent,
		CardFooter,
		Link,
		List,
		ListItem
	});

	return [];
}

class Performance extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Performance",
			options,
			id: create_fragment.name
		});
	}
}

export default Performance;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVyZm9ybWFuY2UuNWIxYWY5NDMuanMiLCJzb3VyY2VzIjpbXSwic291cmNlc0NvbnRlbnQiOltdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9
