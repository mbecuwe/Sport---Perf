import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, v as validate_each_argument, a as validate_slots, e as element, t as text, c as claim_element, f as children, j as claim_text, g as detach_dev, k as attr_dev, l as add_location, m as insert_dev, n as append_dev, o as noop, b as space, h as claim_space, G as create_component, H as claim_component, I as toggle_class, J as mount_component, D as transition_in, E as transition_out, p as destroy_each, K as destroy_component } from './client.08ac5cc5.js';
import './moment.98d1f4f0.js';
import './Chart.d62ec9f6.js';
import Workoutpushups_radar from './workoutpushups-radar.c9fb2d5a.js';
import Workoutothers_radar from './workoutothers-radar.19fef204.js';
import Workoutabdo_radar from './workoutabdo-radar.bb84976d.js';
import Workoutlegs_radar from './workoutlegs-radar.450c9fbf.js';

/* src/routes/sports/workout/workout.svelte generated by Svelte v3.22.3 */
const file = "src/routes/sports/workout/workout.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[36] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[36] = list[i];
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[36] = list[i];
	child_ctx[42] = i;
	return child_ctx;
}

function get_each_context_3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[36] = list[i];
	return child_ctx;
}

function get_each_context_4(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[45] = list[i];
	return child_ctx;
}

// (298:12) {#each get_last_nb_sessions(3, list_date) as date}
function create_each_block_4(ctx) {
	let div;
	let t_value = /*date*/ ctx[45] + "";
	let t;

	const block = {
		c: function create() {
			div = element("div");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t = claim_text(div_nodes, t_value);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "text-center");
			add_location(div, file, 298, 12, 8675);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_4.name,
		type: "each",
		source: "(298:12) {#each get_last_nb_sessions(3, list_date) as date}",
		ctx
	});

	return block;
}

// (338:12) {#each data_last5 as data}
function create_each_block_3(ctx) {
	let tr;
	let td0;
	let t0_value = /*data*/ ctx[36]["date"] + "";
	let t0;
	let t1;
	let td1;
	let t2_value = /*data*/ ctx[36]["Squats"]["Series"] + "";
	let t2;
	let t3;
	let td2;
	let t4_value = /*data*/ ctx[36]["Squats"]["Number"] + "";
	let t4;
	let t5;
	let td3;
	let t6_value = /*data*/ ctx[36]["Stair Climbs"]["Series"] + "";
	let t6;
	let t7;
	let td4;
	let t8_value = /*data*/ ctx[36]["Stair Climbs"]["Number"] + "";
	let t8;
	let t9;
	let td5;
	let t10_value = /*data*/ ctx[36]["Bench Climbs"]["Series"] + "";
	let t10;
	let t11;
	let td6;
	let t12_value = /*data*/ ctx[36]["Bench Climbs"]["Number"] + "";
	let t12;
	let t13;
	let td7;
	let t14_value = /*data*/ ctx[36]["Leg Press"]["Series"] + "";
	let t14;
	let t15;
	let td8;
	let t16_value = /*data*/ ctx[36]["Leg Press"]["Number"] + "";
	let t16;
	let t17;

	const block = {
		c: function create() {
			tr = element("tr");
			td0 = element("td");
			t0 = text(t0_value);
			t1 = space();
			td1 = element("td");
			t2 = text(t2_value);
			t3 = space();
			td2 = element("td");
			t4 = text(t4_value);
			t5 = space();
			td3 = element("td");
			t6 = text(t6_value);
			t7 = space();
			td4 = element("td");
			t8 = text(t8_value);
			t9 = space();
			td5 = element("td");
			t10 = text(t10_value);
			t11 = space();
			td6 = element("td");
			t12 = text(t12_value);
			t13 = space();
			td7 = element("td");
			t14 = text(t14_value);
			t15 = space();
			td8 = element("td");
			t16 = text(t16_value);
			t17 = space();
			this.h();
		},
		l: function claim(nodes) {
			tr = claim_element(nodes, "TR", {});
			var tr_nodes = children(tr);
			td0 = claim_element(tr_nodes, "TD", { class: true });
			var td0_nodes = children(td0);
			t0 = claim_text(td0_nodes, t0_value);
			td0_nodes.forEach(detach_dev);
			t1 = claim_space(tr_nodes);
			td1 = claim_element(tr_nodes, "TD", { class: true });
			var td1_nodes = children(td1);
			t2 = claim_text(td1_nodes, t2_value);
			td1_nodes.forEach(detach_dev);
			t3 = claim_space(tr_nodes);
			td2 = claim_element(tr_nodes, "TD", { class: true });
			var td2_nodes = children(td2);
			t4 = claim_text(td2_nodes, t4_value);
			td2_nodes.forEach(detach_dev);
			t5 = claim_space(tr_nodes);
			td3 = claim_element(tr_nodes, "TD", { class: true });
			var td3_nodes = children(td3);
			t6 = claim_text(td3_nodes, t6_value);
			td3_nodes.forEach(detach_dev);
			t7 = claim_space(tr_nodes);
			td4 = claim_element(tr_nodes, "TD", { class: true });
			var td4_nodes = children(td4);
			t8 = claim_text(td4_nodes, t8_value);
			td4_nodes.forEach(detach_dev);
			t9 = claim_space(tr_nodes);
			td5 = claim_element(tr_nodes, "TD", { class: true });
			var td5_nodes = children(td5);
			t10 = claim_text(td5_nodes, t10_value);
			td5_nodes.forEach(detach_dev);
			t11 = claim_space(tr_nodes);
			td6 = claim_element(tr_nodes, "TD", { class: true });
			var td6_nodes = children(td6);
			t12 = claim_text(td6_nodes, t12_value);
			td6_nodes.forEach(detach_dev);
			t13 = claim_space(tr_nodes);
			td7 = claim_element(tr_nodes, "TD", { class: true });
			var td7_nodes = children(td7);
			t14 = claim_text(td7_nodes, t14_value);
			td7_nodes.forEach(detach_dev);
			t15 = claim_space(tr_nodes);
			td8 = claim_element(tr_nodes, "TD", { class: true });
			var td8_nodes = children(td8);
			t16 = claim_text(td8_nodes, t16_value);
			td8_nodes.forEach(detach_dev);
			t17 = claim_space(tr_nodes);
			tr_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(td0, "class", "border px-2 py-2");
			add_location(td0, file, 339, 12, 10123);
			attr_dev(td1, "class", "border px-2 py-2");
			add_location(td1, file, 340, 12, 10184);
			attr_dev(td2, "class", "border px-2 py-2");
			add_location(td2, file, 341, 12, 10257);
			attr_dev(td3, "class", "border px-2 py-2");
			add_location(td3, file, 342, 12, 10330);
			attr_dev(td4, "class", "border px-2 py-2");
			add_location(td4, file, 343, 12, 10409);
			attr_dev(td5, "class", "border px-2 py-2");
			add_location(td5, file, 344, 12, 10488);
			attr_dev(td6, "class", "border px-2 py-2");
			add_location(td6, file, 345, 12, 10567);
			attr_dev(td7, "class", "border px-2 py-2");
			add_location(td7, file, 346, 12, 10646);
			attr_dev(td8, "class", "border px-2 py-2");
			add_location(td8, file, 347, 12, 10722);
			add_location(tr, file, 338, 12, 10106);
		},
		m: function mount(target, anchor) {
			insert_dev(target, tr, anchor);
			append_dev(tr, td0);
			append_dev(td0, t0);
			append_dev(tr, t1);
			append_dev(tr, td1);
			append_dev(td1, t2);
			append_dev(tr, t3);
			append_dev(tr, td2);
			append_dev(td2, t4);
			append_dev(tr, t5);
			append_dev(tr, td3);
			append_dev(td3, t6);
			append_dev(tr, t7);
			append_dev(tr, td4);
			append_dev(td4, t8);
			append_dev(tr, t9);
			append_dev(tr, td5);
			append_dev(td5, t10);
			append_dev(tr, t11);
			append_dev(tr, td6);
			append_dev(td6, t12);
			append_dev(tr, t13);
			append_dev(tr, td7);
			append_dev(td7, t14);
			append_dev(tr, t15);
			append_dev(tr, td8);
			append_dev(td8, t16);
			append_dev(tr, t17);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(tr);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_3.name,
		type: "each",
		source: "(338:12) {#each data_last5 as data}",
		ctx
	});

	return block;
}

// (400:12) {#each data_last5 as data, i}
function create_each_block_2(ctx) {
	let tr;
	let td0;
	let t0_value = /*data*/ ctx[36]["date"] + "";
	let t0;
	let t1;
	let td1;
	let t2_value = /*data*/ ctx[36]["Push-Ups"]["Series"] + "";
	let t2;
	let t3;
	let td2;
	let t4_value = /*data*/ ctx[36]["Push-Ups"]["Number"] + "";
	let t4;
	let t5;
	let td3;
	let t6_value = /*data*/ ctx[36]["Lateral Push-Ups"]["Series"] + "";
	let t6;
	let t7;
	let td4;
	let t8_value = /*data*/ ctx[36]["Lateral Push-Ups"]["Number"] + "";
	let t8;
	let t9;
	let td5;
	let t10_value = /*data*/ ctx[36]["Jumping Push-Ups"]["Series"] + "";
	let t10;
	let t11;
	let td6;
	let t12_value = /*data*/ ctx[36]["Jumping Push-Ups"]["Number"] + "";
	let t12;
	let t13;
	let td7;
	let t14_value = /*data*/ ctx[36]["Close Push-Ups"]["Series"] + "";
	let t14;
	let t15;
	let td8;
	let t16_value = /*data*/ ctx[36]["Close Push-Ups"]["Number"] + "";
	let t16;
	let t17;
	let td9;
	let t18_value = /*data*/ ctx[36]["Raised Push-Ups"]["Series"] + "";
	let t18;
	let t19;
	let td10;
	let t20_value = /*data*/ ctx[36]["Raised Push-Ups"]["Number"] + "";
	let t20;
	let t21;

	const block = {
		c: function create() {
			tr = element("tr");
			td0 = element("td");
			t0 = text(t0_value);
			t1 = space();
			td1 = element("td");
			t2 = text(t2_value);
			t3 = space();
			td2 = element("td");
			t4 = text(t4_value);
			t5 = space();
			td3 = element("td");
			t6 = text(t6_value);
			t7 = space();
			td4 = element("td");
			t8 = text(t8_value);
			t9 = space();
			td5 = element("td");
			t10 = text(t10_value);
			t11 = space();
			td6 = element("td");
			t12 = text(t12_value);
			t13 = space();
			td7 = element("td");
			t14 = text(t14_value);
			t15 = space();
			td8 = element("td");
			t16 = text(t16_value);
			t17 = space();
			td9 = element("td");
			t18 = text(t18_value);
			t19 = space();
			td10 = element("td");
			t20 = text(t20_value);
			t21 = space();
			this.h();
		},
		l: function claim(nodes) {
			tr = claim_element(nodes, "TR", {});
			var tr_nodes = children(tr);
			td0 = claim_element(tr_nodes, "TD", { class: true });
			var td0_nodes = children(td0);
			t0 = claim_text(td0_nodes, t0_value);
			td0_nodes.forEach(detach_dev);
			t1 = claim_space(tr_nodes);
			td1 = claim_element(tr_nodes, "TD", { class: true });
			var td1_nodes = children(td1);
			t2 = claim_text(td1_nodes, t2_value);
			td1_nodes.forEach(detach_dev);
			t3 = claim_space(tr_nodes);
			td2 = claim_element(tr_nodes, "TD", { class: true });
			var td2_nodes = children(td2);
			t4 = claim_text(td2_nodes, t4_value);
			td2_nodes.forEach(detach_dev);
			t5 = claim_space(tr_nodes);
			td3 = claim_element(tr_nodes, "TD", { class: true });
			var td3_nodes = children(td3);
			t6 = claim_text(td3_nodes, t6_value);
			td3_nodes.forEach(detach_dev);
			t7 = claim_space(tr_nodes);
			td4 = claim_element(tr_nodes, "TD", { class: true });
			var td4_nodes = children(td4);
			t8 = claim_text(td4_nodes, t8_value);
			td4_nodes.forEach(detach_dev);
			t9 = claim_space(tr_nodes);
			td5 = claim_element(tr_nodes, "TD", { class: true });
			var td5_nodes = children(td5);
			t10 = claim_text(td5_nodes, t10_value);
			td5_nodes.forEach(detach_dev);
			t11 = claim_space(tr_nodes);
			td6 = claim_element(tr_nodes, "TD", { class: true });
			var td6_nodes = children(td6);
			t12 = claim_text(td6_nodes, t12_value);
			td6_nodes.forEach(detach_dev);
			t13 = claim_space(tr_nodes);
			td7 = claim_element(tr_nodes, "TD", { class: true });
			var td7_nodes = children(td7);
			t14 = claim_text(td7_nodes, t14_value);
			td7_nodes.forEach(detach_dev);
			t15 = claim_space(tr_nodes);
			td8 = claim_element(tr_nodes, "TD", { class: true });
			var td8_nodes = children(td8);
			t16 = claim_text(td8_nodes, t16_value);
			td8_nodes.forEach(detach_dev);
			t17 = claim_space(tr_nodes);
			td9 = claim_element(tr_nodes, "TD", { class: true });
			var td9_nodes = children(td9);
			t18 = claim_text(td9_nodes, t18_value);
			td9_nodes.forEach(detach_dev);
			t19 = claim_space(tr_nodes);
			td10 = claim_element(tr_nodes, "TD", { class: true });
			var td10_nodes = children(td10);
			t20 = claim_text(td10_nodes, t20_value);
			td10_nodes.forEach(detach_dev);
			t21 = claim_space(tr_nodes);
			tr_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(td0, "class", "border px-2 py-2");
			add_location(td0, file, 401, 12, 12840);
			attr_dev(td1, "class", "border px-2 py-2");
			add_location(td1, file, 402, 12, 12901);
			attr_dev(td2, "class", "border px-2 py-2");
			add_location(td2, file, 403, 12, 12976);
			attr_dev(td3, "class", "border px-2 py-2");
			add_location(td3, file, 404, 12, 13051);
			attr_dev(td4, "class", "border px-2 py-2");
			add_location(td4, file, 405, 12, 13134);
			attr_dev(td5, "class", "border px-2 py-2");
			add_location(td5, file, 406, 12, 13217);
			attr_dev(td6, "class", "border px-2 py-2");
			add_location(td6, file, 407, 12, 13300);
			attr_dev(td7, "class", "border px-2 py-2");
			add_location(td7, file, 408, 12, 13383);
			attr_dev(td8, "class", "border px-2 py-2");
			add_location(td8, file, 409, 12, 13464);
			attr_dev(td9, "class", "border px-2 py-2");
			add_location(td9, file, 410, 12, 13545);
			attr_dev(td10, "class", "border px-2 py-2");
			add_location(td10, file, 411, 12, 13627);
			add_location(tr, file, 400, 12, 12823);
		},
		m: function mount(target, anchor) {
			insert_dev(target, tr, anchor);
			append_dev(tr, td0);
			append_dev(td0, t0);
			append_dev(tr, t1);
			append_dev(tr, td1);
			append_dev(td1, t2);
			append_dev(tr, t3);
			append_dev(tr, td2);
			append_dev(td2, t4);
			append_dev(tr, t5);
			append_dev(tr, td3);
			append_dev(td3, t6);
			append_dev(tr, t7);
			append_dev(tr, td4);
			append_dev(td4, t8);
			append_dev(tr, t9);
			append_dev(tr, td5);
			append_dev(td5, t10);
			append_dev(tr, t11);
			append_dev(tr, td6);
			append_dev(td6, t12);
			append_dev(tr, t13);
			append_dev(tr, td7);
			append_dev(td7, t14);
			append_dev(tr, t15);
			append_dev(tr, td8);
			append_dev(td8, t16);
			append_dev(tr, t17);
			append_dev(tr, td9);
			append_dev(td9, t18);
			append_dev(tr, t19);
			append_dev(tr, td10);
			append_dev(td10, t20);
			append_dev(tr, t21);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(tr);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_2.name,
		type: "each",
		source: "(400:12) {#each data_last5 as data, i}",
		ctx
	});

	return block;
}

// (459:12) {#each data_last5 as data}
function create_each_block_1(ctx) {
	let tr;
	let td0;
	let t0_value = /*data*/ ctx[36]["date"] + "";
	let t0;
	let t1;
	let td1;
	let t2_value = /*data*/ ctx[36]["Abdominal"]["Series"] + "";
	let t2;
	let t3;
	let td2;
	let t4_value = /*data*/ ctx[36]["Abdominal"]["Number"] + "";
	let t4;
	let t5;
	let td3;
	let t6_value = /*data*/ ctx[36]["Abdominal Lateral"]["Series"] + "";
	let t6;
	let t7;
	let td4;
	let t8_value = /*data*/ ctx[36]["Abdominal Lateral"]["Number"] + "";
	let t8;
	let t9;
	let td5;
	let t10_value = /*data*/ ctx[36]["Core Abdominal"]["Series"] + "";
	let t10;
	let t11;
	let td6;
	let t12_value = /*data*/ ctx[36]["Core Abdominal"]["Number"] + "";
	let t12;
	let t13;

	const block = {
		c: function create() {
			tr = element("tr");
			td0 = element("td");
			t0 = text(t0_value);
			t1 = space();
			td1 = element("td");
			t2 = text(t2_value);
			t3 = space();
			td2 = element("td");
			t4 = text(t4_value);
			t5 = space();
			td3 = element("td");
			t6 = text(t6_value);
			t7 = space();
			td4 = element("td");
			t8 = text(t8_value);
			t9 = space();
			td5 = element("td");
			t10 = text(t10_value);
			t11 = space();
			td6 = element("td");
			t12 = text(t12_value);
			t13 = space();
			this.h();
		},
		l: function claim(nodes) {
			tr = claim_element(nodes, "TR", {});
			var tr_nodes = children(tr);
			td0 = claim_element(tr_nodes, "TD", { class: true });
			var td0_nodes = children(td0);
			t0 = claim_text(td0_nodes, t0_value);
			td0_nodes.forEach(detach_dev);
			t1 = claim_space(tr_nodes);
			td1 = claim_element(tr_nodes, "TD", { class: true });
			var td1_nodes = children(td1);
			t2 = claim_text(td1_nodes, t2_value);
			td1_nodes.forEach(detach_dev);
			t3 = claim_space(tr_nodes);
			td2 = claim_element(tr_nodes, "TD", { class: true });
			var td2_nodes = children(td2);
			t4 = claim_text(td2_nodes, t4_value);
			td2_nodes.forEach(detach_dev);
			t5 = claim_space(tr_nodes);
			td3 = claim_element(tr_nodes, "TD", { class: true });
			var td3_nodes = children(td3);
			t6 = claim_text(td3_nodes, t6_value);
			td3_nodes.forEach(detach_dev);
			t7 = claim_space(tr_nodes);
			td4 = claim_element(tr_nodes, "TD", { class: true });
			var td4_nodes = children(td4);
			t8 = claim_text(td4_nodes, t8_value);
			td4_nodes.forEach(detach_dev);
			t9 = claim_space(tr_nodes);
			td5 = claim_element(tr_nodes, "TD", { class: true });
			var td5_nodes = children(td5);
			t10 = claim_text(td5_nodes, t10_value);
			td5_nodes.forEach(detach_dev);
			t11 = claim_space(tr_nodes);
			td6 = claim_element(tr_nodes, "TD", { class: true });
			var td6_nodes = children(td6);
			t12 = claim_text(td6_nodes, t12_value);
			td6_nodes.forEach(detach_dev);
			t13 = claim_space(tr_nodes);
			tr_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(td0, "class", "border px-2 py-2");
			add_location(td0, file, 460, 12, 15463);
			attr_dev(td1, "class", "border px-2 py-2");
			add_location(td1, file, 461, 12, 15524);
			attr_dev(td2, "class", "border px-2 py-2");
			add_location(td2, file, 462, 12, 15600);
			attr_dev(td3, "class", "border px-2 py-2");
			add_location(td3, file, 463, 12, 15676);
			attr_dev(td4, "class", "border px-2 py-2");
			add_location(td4, file, 464, 12, 15760);
			attr_dev(td5, "class", "border px-2 py-2");
			add_location(td5, file, 465, 12, 15844);
			attr_dev(td6, "class", "border px-2 py-2");
			add_location(td6, file, 466, 12, 15925);
			add_location(tr, file, 459, 12, 15446);
		},
		m: function mount(target, anchor) {
			insert_dev(target, tr, anchor);
			append_dev(tr, td0);
			append_dev(td0, t0);
			append_dev(tr, t1);
			append_dev(tr, td1);
			append_dev(td1, t2);
			append_dev(tr, t3);
			append_dev(tr, td2);
			append_dev(td2, t4);
			append_dev(tr, t5);
			append_dev(tr, td3);
			append_dev(td3, t6);
			append_dev(tr, t7);
			append_dev(tr, td4);
			append_dev(td4, t8);
			append_dev(tr, t9);
			append_dev(tr, td5);
			append_dev(td5, t10);
			append_dev(tr, t11);
			append_dev(tr, td6);
			append_dev(td6, t12);
			append_dev(tr, t13);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(tr);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(459:12) {#each data_last5 as data}",
		ctx
	});

	return block;
}

// (513:12) {#each data_last5 as data}
function create_each_block(ctx) {
	let tr;
	let td0;
	let t0_value = /*data*/ ctx[36]["date"] + "";
	let t0;
	let t1;
	let td1;
	let t2_value = /*data*/ ctx[36]["Bench"]["Series"] + "";
	let t2;
	let t3;
	let td2;
	let t4_value = /*data*/ ctx[36]["Bench"]["Number"] + "";
	let t4;
	let t5;
	let td3;
	let t6_value = /*data*/ ctx[36]["Biceps Weight"]["Series"] + "";
	let t6;
	let t7;
	let td4;
	let t8_value = /*data*/ ctx[36]["Biceps Weight"]["Number"] + "";
	let t8;
	let t9;
	let td5;
	let t10_value = /*data*/ ctx[36]["Pull-Ups"]["Series"] + "";
	let t10;
	let t11;
	let td6;
	let t12_value = /*data*/ ctx[36]["Pull-Ups"]["Number"] + "";
	let t12;
	let t13;

	const block = {
		c: function create() {
			tr = element("tr");
			td0 = element("td");
			t0 = text(t0_value);
			t1 = space();
			td1 = element("td");
			t2 = text(t2_value);
			t3 = space();
			td2 = element("td");
			t4 = text(t4_value);
			t5 = space();
			td3 = element("td");
			t6 = text(t6_value);
			t7 = space();
			td4 = element("td");
			t8 = text(t8_value);
			t9 = space();
			td5 = element("td");
			t10 = text(t10_value);
			t11 = space();
			td6 = element("td");
			t12 = text(t12_value);
			t13 = space();
			this.h();
		},
		l: function claim(nodes) {
			tr = claim_element(nodes, "TR", {});
			var tr_nodes = children(tr);
			td0 = claim_element(tr_nodes, "TD", { class: true });
			var td0_nodes = children(td0);
			t0 = claim_text(td0_nodes, t0_value);
			td0_nodes.forEach(detach_dev);
			t1 = claim_space(tr_nodes);
			td1 = claim_element(tr_nodes, "TD", { class: true });
			var td1_nodes = children(td1);
			t2 = claim_text(td1_nodes, t2_value);
			td1_nodes.forEach(detach_dev);
			t3 = claim_space(tr_nodes);
			td2 = claim_element(tr_nodes, "TD", { class: true });
			var td2_nodes = children(td2);
			t4 = claim_text(td2_nodes, t4_value);
			td2_nodes.forEach(detach_dev);
			t5 = claim_space(tr_nodes);
			td3 = claim_element(tr_nodes, "TD", { class: true });
			var td3_nodes = children(td3);
			t6 = claim_text(td3_nodes, t6_value);
			td3_nodes.forEach(detach_dev);
			t7 = claim_space(tr_nodes);
			td4 = claim_element(tr_nodes, "TD", { class: true });
			var td4_nodes = children(td4);
			t8 = claim_text(td4_nodes, t8_value);
			td4_nodes.forEach(detach_dev);
			t9 = claim_space(tr_nodes);
			td5 = claim_element(tr_nodes, "TD", { class: true });
			var td5_nodes = children(td5);
			t10 = claim_text(td5_nodes, t10_value);
			td5_nodes.forEach(detach_dev);
			t11 = claim_space(tr_nodes);
			td6 = claim_element(tr_nodes, "TD", { class: true });
			var td6_nodes = children(td6);
			t12 = claim_text(td6_nodes, t12_value);
			td6_nodes.forEach(detach_dev);
			t13 = claim_space(tr_nodes);
			tr_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(td0, "class", "border px-2 py-2");
			add_location(td0, file, 514, 12, 17773);
			attr_dev(td1, "class", "border px-2 py-2");
			add_location(td1, file, 515, 12, 17834);
			attr_dev(td2, "class", "border px-2 py-2");
			add_location(td2, file, 516, 12, 17906);
			attr_dev(td3, "class", "border px-2 py-2");
			add_location(td3, file, 517, 12, 17978);
			attr_dev(td4, "class", "border px-2 py-2");
			add_location(td4, file, 518, 12, 18058);
			attr_dev(td5, "class", "border px-2 py-2");
			add_location(td5, file, 519, 12, 18138);
			attr_dev(td6, "class", "border px-2 py-2");
			add_location(td6, file, 520, 12, 18213);
			add_location(tr, file, 513, 12, 17756);
		},
		m: function mount(target, anchor) {
			insert_dev(target, tr, anchor);
			append_dev(tr, td0);
			append_dev(td0, t0);
			append_dev(tr, t1);
			append_dev(tr, td1);
			append_dev(td1, t2);
			append_dev(tr, t3);
			append_dev(tr, td2);
			append_dev(td2, t4);
			append_dev(tr, t5);
			append_dev(tr, td3);
			append_dev(td3, t6);
			append_dev(tr, t7);
			append_dev(tr, td4);
			append_dev(td4, t8);
			append_dev(tr, t9);
			append_dev(tr, td5);
			append_dev(td5, t10);
			append_dev(tr, t11);
			append_dev(tr, td6);
			append_dev(td6, t12);
			append_dev(tr, t13);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(tr);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(513:12) {#each data_last5 as data}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div22;
	let div0;
	let img;
	let img_src_value;
	let t0;
	let div2;
	let div1;
	let t1;
	let t2;
	let div21;
	let div4;
	let h10;
	let t3;
	let t4;
	let div3;
	let t5;
	let div6;
	let h11;
	let t6;
	let t7;
	let div5;
	let table0;
	let caption0;
	let t8;
	let t9;
	let thead0;
	let tr0;
	let th0;
	let t10;
	let th1;
	let t11;
	let t12;
	let th2;
	let t13;
	let t14;
	let th3;
	let t15;
	let t16;
	let th4;
	let t17;
	let t18;
	let tr1;
	let th5;
	let t19;
	let t20;
	let th6;
	let t21;
	let t22;
	let th7;
	let t23;
	let t24;
	let th8;
	let t25;
	let t26;
	let th9;
	let t27;
	let t28;
	let th10;
	let t29;
	let t30;
	let th11;
	let t31;
	let t32;
	let th12;
	let t33;
	let t34;
	let th13;
	let t35;
	let t36;
	let tbody0;
	let t37;
	let div7;
	let t38;
	let span0;
	let t39;
	let t40;
	let t41;
	let t42;
	let div8;
	let caption1;
	let t43;
	let t44;
	let t45;
	let div10;
	let h12;
	let t46;
	let t47;
	let div9;
	let table1;
	let caption2;
	let t48;
	let t49;
	let thead1;
	let tr2;
	let th14;
	let t50;
	let th15;
	let t51;
	let t52;
	let th16;
	let t53;
	let t54;
	let th17;
	let t55;
	let t56;
	let th18;
	let t57;
	let t58;
	let th19;
	let t59;
	let t60;
	let tr3;
	let th20;
	let t61;
	let t62;
	let th21;
	let t63;
	let t64;
	let th22;
	let t65;
	let t66;
	let th23;
	let t67;
	let t68;
	let th24;
	let t69;
	let t70;
	let th25;
	let t71;
	let t72;
	let th26;
	let t73;
	let t74;
	let th27;
	let t75;
	let t76;
	let th28;
	let t77;
	let t78;
	let th29;
	let t79;
	let t80;
	let th30;
	let t81;
	let t82;
	let tbody1;
	let t83;
	let div11;
	let t84;
	let span1;
	let t85;
	let t86;
	let t87;
	let t88;
	let div12;
	let caption3;
	let t89;
	let t90;
	let t91;
	let div14;
	let h13;
	let t92;
	let t93;
	let div13;
	let table2;
	let caption4;
	let t94;
	let t95;
	let thead2;
	let tr4;
	let th31;
	let t96;
	let th32;
	let t97;
	let t98;
	let th33;
	let t99;
	let t100;
	let th34;
	let t101;
	let t102;
	let tr5;
	let th35;
	let t103;
	let t104;
	let th36;
	let t105;
	let t106;
	let th37;
	let t107;
	let t108;
	let th38;
	let t109;
	let t110;
	let th39;
	let t111;
	let t112;
	let th40;
	let t113;
	let t114;
	let th41;
	let t115;
	let t116;
	let tbody2;
	let t117;
	let div15;
	let t118;
	let span2;
	let t119;
	let t120;
	let t121;
	let t122;
	let div16;
	let caption5;
	let t123;
	let t124;
	let t125;
	let div18;
	let h14;
	let t126;
	let t127;
	let div17;
	let table3;
	let caption6;
	let t128;
	let t129;
	let thead3;
	let tr6;
	let th42;
	let t130;
	let th43;
	let t131;
	let t132;
	let th44;
	let t133;
	let t134;
	let th45;
	let t135;
	let t136;
	let tr7;
	let th46;
	let t137;
	let t138;
	let th47;
	let t139;
	let t140;
	let th48;
	let t141;
	let t142;
	let th49;
	let t143;
	let t144;
	let th50;
	let t145;
	let t146;
	let th51;
	let t147;
	let t148;
	let th52;
	let t149;
	let t150;
	let tbody3;
	let t151;
	let div19;
	let t152;
	let span3;
	let t153;
	let t154;
	let t155;
	let t156;
	let div20;
	let caption7;
	let t157;
	let t158;
	let current;
	let each_value_4 = get_last_nb_sessions(3, /*list_date*/ ctx[5]);
	validate_each_argument(each_value_4);
	let each_blocks_4 = [];

	for (let i = 0; i < each_value_4.length; i += 1) {
		each_blocks_4[i] = create_each_block_4(get_each_context_4(ctx, each_value_4, i));
	}

	let each_value_3 = /*data_last5*/ ctx[4];
	validate_each_argument(each_value_3);
	let each_blocks_3 = [];

	for (let i = 0; i < each_value_3.length; i += 1) {
		each_blocks_3[i] = create_each_block_3(get_each_context_3(ctx, each_value_3, i));
	}

	const chartsradarleg = new Workoutlegs_radar({
			props: {
				data_leg_radar: /*data_leg_radar*/ ctx[0]
			},
			$$inline: true
		});

	let each_value_2 = /*data_last5*/ ctx[4];
	validate_each_argument(each_value_2);
	let each_blocks_2 = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks_2[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	const chartsradarpushups = new Workoutpushups_radar({
			props: {
				data_pushups_radar: /*data_pushups_radar*/ ctx[1]
			},
			$$inline: true
		});

	let each_value_1 = /*data_last5*/ ctx[4];
	validate_each_argument(each_value_1);
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const chartsradarabdominals = new Workoutabdo_radar({
			props: {
				data_abdominal_radar: /*data_abdominal_radar*/ ctx[2]
			},
			$$inline: true
		});

	let each_value = /*data_last5*/ ctx[4];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const chartsradarothers = new Workoutothers_radar({
			props: {
				data_others_radar: /*data_others_radar*/ ctx[3]
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div22 = element("div");
			div0 = element("div");
			img = element("img");
			t0 = space();
			div2 = element("div");
			div1 = element("div");
			t1 = text("Workout Performance");
			t2 = space();
			div21 = element("div");
			div4 = element("div");
			h10 = element("h1");
			t3 = text("Last Sessions");
			t4 = space();
			div3 = element("div");

			for (let i = 0; i < each_blocks_4.length; i += 1) {
				each_blocks_4[i].c();
			}

			t5 = space();
			div6 = element("div");
			h11 = element("h1");
			t6 = text("Legs");
			t7 = space();
			div5 = element("div");
			table0 = element("table");
			caption0 = element("caption");
			t8 = text("Data for legs");
			t9 = space();
			thead0 = element("thead");
			tr0 = element("tr");
			th0 = element("th");
			t10 = space();
			th1 = element("th");
			t11 = text("Squats");
			t12 = space();
			th2 = element("th");
			t13 = text("Stair Climbs");
			t14 = space();
			th3 = element("th");
			t15 = text("Bench Climbs");
			t16 = space();
			th4 = element("th");
			t17 = text("Leg Press");
			t18 = space();
			tr1 = element("tr");
			th5 = element("th");
			t19 = text("Date");
			t20 = space();
			th6 = element("th");
			t21 = text("Series");
			t22 = space();
			th7 = element("th");
			t23 = text("Repet.");
			t24 = space();
			th8 = element("th");
			t25 = text("Series");
			t26 = space();
			th9 = element("th");
			t27 = text("Repet.");
			t28 = space();
			th10 = element("th");
			t29 = text("Series");
			t30 = space();
			th11 = element("th");
			t31 = text("Repet.");
			t32 = space();
			th12 = element("th");
			t33 = text("Series");
			t34 = space();
			th13 = element("th");
			t35 = text("Repet.");
			t36 = space();
			tbody0 = element("tbody");

			for (let i = 0; i < each_blocks_3.length; i += 1) {
				each_blocks_3[i].c();
			}

			t37 = space();
			div7 = element("div");
			t38 = text("Your last session was ");
			span0 = element("span");
			t39 = text(/*leg_global_indicator*/ ctx[6]);
			t40 = text("%");
			t41 = text(" of the average of the sessions where you worked on legs");
			t42 = space();
			div8 = element("div");
			caption1 = element("caption");
			t43 = text("Performance Radar Chart");
			t44 = space();
			create_component(chartsradarleg.$$.fragment);
			t45 = space();
			div10 = element("div");
			h12 = element("h1");
			t46 = text("Push-Ups");
			t47 = space();
			div9 = element("div");
			table1 = element("table");
			caption2 = element("caption");
			t48 = text("Data for Push-ups");
			t49 = space();
			thead1 = element("thead");
			tr2 = element("tr");
			th14 = element("th");
			t50 = space();
			th15 = element("th");
			t51 = text("Regular");
			t52 = space();
			th16 = element("th");
			t53 = text("Lateral");
			t54 = space();
			th17 = element("th");
			t55 = text("Jumping");
			t56 = space();
			th18 = element("th");
			t57 = text("Close");
			t58 = space();
			th19 = element("th");
			t59 = text("Raised");
			t60 = space();
			tr3 = element("tr");
			th20 = element("th");
			t61 = text("Date");
			t62 = space();
			th21 = element("th");
			t63 = text("Series");
			t64 = space();
			th22 = element("th");
			t65 = text("Repet.");
			t66 = space();
			th23 = element("th");
			t67 = text("Series");
			t68 = space();
			th24 = element("th");
			t69 = text("Repet.");
			t70 = space();
			th25 = element("th");
			t71 = text("Series");
			t72 = space();
			th26 = element("th");
			t73 = text("Repet.");
			t74 = space();
			th27 = element("th");
			t75 = text("Series");
			t76 = space();
			th28 = element("th");
			t77 = text("Repet.");
			t78 = space();
			th29 = element("th");
			t79 = text("Series");
			t80 = space();
			th30 = element("th");
			t81 = text("Repet.");
			t82 = space();
			tbody1 = element("tbody");

			for (let i = 0; i < each_blocks_2.length; i += 1) {
				each_blocks_2[i].c();
			}

			t83 = space();
			div11 = element("div");
			t84 = text("Your last session was ");
			span1 = element("span");
			t85 = text(/*pushups_global_indicator*/ ctx[7]);
			t86 = text("%");
			t87 = text(" of the average of the sessions where you worked on push-ups");
			t88 = space();
			div12 = element("div");
			caption3 = element("caption");
			t89 = text("Performance Radar Chart");
			t90 = space();
			create_component(chartsradarpushups.$$.fragment);
			t91 = space();
			div14 = element("div");
			h13 = element("h1");
			t92 = text("Abdominals");
			t93 = space();
			div13 = element("div");
			table2 = element("table");
			caption4 = element("caption");
			t94 = text("Data for Abdominals");
			t95 = space();
			thead2 = element("thead");
			tr4 = element("tr");
			th31 = element("th");
			t96 = space();
			th32 = element("th");
			t97 = text("Regular");
			t98 = space();
			th33 = element("th");
			t99 = text("Lateral");
			t100 = space();
			th34 = element("th");
			t101 = text("Core");
			t102 = space();
			tr5 = element("tr");
			th35 = element("th");
			t103 = text("Date");
			t104 = space();
			th36 = element("th");
			t105 = text("Series");
			t106 = space();
			th37 = element("th");
			t107 = text("Repet.");
			t108 = space();
			th38 = element("th");
			t109 = text("Series");
			t110 = space();
			th39 = element("th");
			t111 = text("Repet.");
			t112 = space();
			th40 = element("th");
			t113 = text("Series");
			t114 = space();
			th41 = element("th");
			t115 = text("Repet.");
			t116 = space();
			tbody2 = element("tbody");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t117 = space();
			div15 = element("div");
			t118 = text("Your last session was ");
			span2 = element("span");
			t119 = text(/*abdominal_global_indicator*/ ctx[8]);
			t120 = text("%");
			t121 = text(" of the average of the sessions where you worked on abdominals");
			t122 = space();
			div16 = element("div");
			caption5 = element("caption");
			t123 = text("Performance Radar Chart");
			t124 = space();
			create_component(chartsradarabdominals.$$.fragment);
			t125 = space();
			div18 = element("div");
			h14 = element("h1");
			t126 = text("Others");
			t127 = space();
			div17 = element("div");
			table3 = element("table");
			caption6 = element("caption");
			t128 = text("Data for Others");
			t129 = space();
			thead3 = element("thead");
			tr6 = element("tr");
			th42 = element("th");
			t130 = space();
			th43 = element("th");
			t131 = text("Bench");
			t132 = space();
			th44 = element("th");
			t133 = text("Biceps Weight");
			t134 = space();
			th45 = element("th");
			t135 = text("Pull-Ups");
			t136 = space();
			tr7 = element("tr");
			th46 = element("th");
			t137 = text("Date");
			t138 = space();
			th47 = element("th");
			t139 = text("Series");
			t140 = space();
			th48 = element("th");
			t141 = text("Repet.");
			t142 = space();
			th49 = element("th");
			t143 = text("Series");
			t144 = space();
			th50 = element("th");
			t145 = text("Repet.");
			t146 = space();
			th51 = element("th");
			t147 = text("Series");
			t148 = space();
			th52 = element("th");
			t149 = text("Repet.");
			t150 = space();
			tbody3 = element("tbody");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t151 = space();
			div19 = element("div");
			t152 = text("Your last session was ");
			span3 = element("span");
			t153 = text(/*others_global_indicator*/ ctx[9]);
			t154 = text("%");
			t155 = text(" of the average of the sessions where you worked on other exercises");
			t156 = space();
			div20 = element("div");
			caption7 = element("caption");
			t157 = text("Performance Radar Chart");
			t158 = space();
			create_component(chartsradarothers.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div22 = claim_element(nodes, "DIV", { class: true });
			var div22_nodes = children(div22);
			div0 = claim_element(div22_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			img = claim_element(div0_nodes, "IMG", { src: true, alt: true, class: true });
			div0_nodes.forEach(detach_dev);
			t0 = claim_space(div22_nodes);
			div2 = claim_element(div22_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			t1 = claim_text(div1_nodes, "Workout Performance");
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			t2 = claim_space(div22_nodes);
			div21 = claim_element(div22_nodes, "DIV", { class: true });
			var div21_nodes = children(div21);
			div4 = claim_element(div21_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			h10 = claim_element(div4_nodes, "H1", { class: true });
			var h10_nodes = children(h10);
			t3 = claim_text(h10_nodes, "Last Sessions");
			h10_nodes.forEach(detach_dev);
			t4 = claim_space(div4_nodes);
			div3 = claim_element(div4_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);

			for (let i = 0; i < each_blocks_4.length; i += 1) {
				each_blocks_4[i].l(div3_nodes);
			}

			div3_nodes.forEach(detach_dev);
			div4_nodes.forEach(detach_dev);
			t5 = claim_space(div21_nodes);
			div6 = claim_element(div21_nodes, "DIV", { class: true });
			var div6_nodes = children(div6);
			h11 = claim_element(div6_nodes, "H1", { class: true });
			var h11_nodes = children(h11);
			t6 = claim_text(h11_nodes, "Legs");
			h11_nodes.forEach(detach_dev);
			t7 = claim_space(div6_nodes);
			div5 = claim_element(div6_nodes, "DIV", { class: true });
			var div5_nodes = children(div5);
			table0 = claim_element(div5_nodes, "TABLE", { class: true });
			var table0_nodes = children(table0);
			caption0 = claim_element(table0_nodes, "CAPTION", { class: true });
			var caption0_nodes = children(caption0);
			t8 = claim_text(caption0_nodes, "Data for legs");
			caption0_nodes.forEach(detach_dev);
			t9 = claim_space(table0_nodes);
			thead0 = claim_element(table0_nodes, "THEAD", { class: true });
			var thead0_nodes = children(thead0);
			tr0 = claim_element(thead0_nodes, "TR", { class: true });
			var tr0_nodes = children(tr0);
			th0 = claim_element(tr0_nodes, "TH", { class: true });
			children(th0).forEach(detach_dev);
			t10 = claim_space(tr0_nodes);
			th1 = claim_element(tr0_nodes, "TH", { colspan: true, class: true });
			var th1_nodes = children(th1);
			t11 = claim_text(th1_nodes, "Squats");
			th1_nodes.forEach(detach_dev);
			t12 = claim_space(tr0_nodes);
			th2 = claim_element(tr0_nodes, "TH", { colspan: true, class: true });
			var th2_nodes = children(th2);
			t13 = claim_text(th2_nodes, "Stair Climbs");
			th2_nodes.forEach(detach_dev);
			t14 = claim_space(tr0_nodes);
			th3 = claim_element(tr0_nodes, "TH", { colspan: true, class: true });
			var th3_nodes = children(th3);
			t15 = claim_text(th3_nodes, "Bench Climbs");
			th3_nodes.forEach(detach_dev);
			t16 = claim_space(tr0_nodes);
			th4 = claim_element(tr0_nodes, "TH", { colspan: true, class: true });
			var th4_nodes = children(th4);
			t17 = claim_text(th4_nodes, "Leg Press");
			th4_nodes.forEach(detach_dev);
			tr0_nodes.forEach(detach_dev);
			t18 = claim_space(thead0_nodes);
			tr1 = claim_element(thead0_nodes, "TR", { class: true });
			var tr1_nodes = children(tr1);
			th5 = claim_element(tr1_nodes, "TH", { class: true });
			var th5_nodes = children(th5);
			t19 = claim_text(th5_nodes, "Date");
			th5_nodes.forEach(detach_dev);
			t20 = claim_space(tr1_nodes);
			th6 = claim_element(tr1_nodes, "TH", { class: true });
			var th6_nodes = children(th6);
			t21 = claim_text(th6_nodes, "Series");
			th6_nodes.forEach(detach_dev);
			t22 = claim_space(tr1_nodes);
			th7 = claim_element(tr1_nodes, "TH", { class: true });
			var th7_nodes = children(th7);
			t23 = claim_text(th7_nodes, "Repet.");
			th7_nodes.forEach(detach_dev);
			t24 = claim_space(tr1_nodes);
			th8 = claim_element(tr1_nodes, "TH", { class: true });
			var th8_nodes = children(th8);
			t25 = claim_text(th8_nodes, "Series");
			th8_nodes.forEach(detach_dev);
			t26 = claim_space(tr1_nodes);
			th9 = claim_element(tr1_nodes, "TH", { class: true });
			var th9_nodes = children(th9);
			t27 = claim_text(th9_nodes, "Repet.");
			th9_nodes.forEach(detach_dev);
			t28 = claim_space(tr1_nodes);
			th10 = claim_element(tr1_nodes, "TH", { class: true });
			var th10_nodes = children(th10);
			t29 = claim_text(th10_nodes, "Series");
			th10_nodes.forEach(detach_dev);
			t30 = claim_space(tr1_nodes);
			th11 = claim_element(tr1_nodes, "TH", { class: true });
			var th11_nodes = children(th11);
			t31 = claim_text(th11_nodes, "Repet.");
			th11_nodes.forEach(detach_dev);
			t32 = claim_space(tr1_nodes);
			th12 = claim_element(tr1_nodes, "TH", { class: true });
			var th12_nodes = children(th12);
			t33 = claim_text(th12_nodes, "Series");
			th12_nodes.forEach(detach_dev);
			t34 = claim_space(tr1_nodes);
			th13 = claim_element(tr1_nodes, "TH", { class: true });
			var th13_nodes = children(th13);
			t35 = claim_text(th13_nodes, "Repet.");
			th13_nodes.forEach(detach_dev);
			tr1_nodes.forEach(detach_dev);
			thead0_nodes.forEach(detach_dev);
			t36 = claim_space(table0_nodes);
			tbody0 = claim_element(table0_nodes, "TBODY", {});
			var tbody0_nodes = children(tbody0);

			for (let i = 0; i < each_blocks_3.length; i += 1) {
				each_blocks_3[i].l(tbody0_nodes);
			}

			tbody0_nodes.forEach(detach_dev);
			table0_nodes.forEach(detach_dev);
			div5_nodes.forEach(detach_dev);
			div6_nodes.forEach(detach_dev);
			t37 = claim_space(div21_nodes);
			div7 = claim_element(div21_nodes, "DIV", {});
			var div7_nodes = children(div7);
			t38 = claim_text(div7_nodes, "Your last session was ");
			span0 = claim_element(div7_nodes, "SPAN", { class: true });
			var span0_nodes = children(span0);
			t39 = claim_text(span0_nodes, /*leg_global_indicator*/ ctx[6]);
			t40 = claim_text(span0_nodes, "%");
			span0_nodes.forEach(detach_dev);
			t41 = claim_text(div7_nodes, " of the average of the sessions where you worked on legs");
			div7_nodes.forEach(detach_dev);
			t42 = claim_space(div21_nodes);
			div8 = claim_element(div21_nodes, "DIV", { class: true });
			var div8_nodes = children(div8);
			caption1 = claim_element(div8_nodes, "CAPTION", { class: true });
			var caption1_nodes = children(caption1);
			t43 = claim_text(caption1_nodes, "Performance Radar Chart");
			caption1_nodes.forEach(detach_dev);
			t44 = claim_space(div8_nodes);
			claim_component(chartsradarleg.$$.fragment, div8_nodes);
			div8_nodes.forEach(detach_dev);
			t45 = claim_space(div21_nodes);
			div10 = claim_element(div21_nodes, "DIV", { class: true });
			var div10_nodes = children(div10);
			h12 = claim_element(div10_nodes, "H1", { class: true });
			var h12_nodes = children(h12);
			t46 = claim_text(h12_nodes, "Push-Ups");
			h12_nodes.forEach(detach_dev);
			t47 = claim_space(div10_nodes);
			div9 = claim_element(div10_nodes, "DIV", { class: true });
			var div9_nodes = children(div9);
			table1 = claim_element(div9_nodes, "TABLE", { class: true });
			var table1_nodes = children(table1);
			caption2 = claim_element(table1_nodes, "CAPTION", { class: true });
			var caption2_nodes = children(caption2);
			t48 = claim_text(caption2_nodes, "Data for Push-ups");
			caption2_nodes.forEach(detach_dev);
			t49 = claim_space(table1_nodes);
			thead1 = claim_element(table1_nodes, "THEAD", { class: true });
			var thead1_nodes = children(thead1);
			tr2 = claim_element(thead1_nodes, "TR", { class: true });
			var tr2_nodes = children(tr2);
			th14 = claim_element(tr2_nodes, "TH", { class: true });
			children(th14).forEach(detach_dev);
			t50 = claim_space(tr2_nodes);
			th15 = claim_element(tr2_nodes, "TH", { colspan: true, class: true });
			var th15_nodes = children(th15);
			t51 = claim_text(th15_nodes, "Regular");
			th15_nodes.forEach(detach_dev);
			t52 = claim_space(tr2_nodes);
			th16 = claim_element(tr2_nodes, "TH", { colspan: true, class: true });
			var th16_nodes = children(th16);
			t53 = claim_text(th16_nodes, "Lateral");
			th16_nodes.forEach(detach_dev);
			t54 = claim_space(tr2_nodes);
			th17 = claim_element(tr2_nodes, "TH", { colspan: true, class: true });
			var th17_nodes = children(th17);
			t55 = claim_text(th17_nodes, "Jumping");
			th17_nodes.forEach(detach_dev);
			t56 = claim_space(tr2_nodes);
			th18 = claim_element(tr2_nodes, "TH", { colspan: true, class: true });
			var th18_nodes = children(th18);
			t57 = claim_text(th18_nodes, "Close");
			th18_nodes.forEach(detach_dev);
			t58 = claim_space(tr2_nodes);
			th19 = claim_element(tr2_nodes, "TH", { colspan: true, class: true });
			var th19_nodes = children(th19);
			t59 = claim_text(th19_nodes, "Raised");
			th19_nodes.forEach(detach_dev);
			tr2_nodes.forEach(detach_dev);
			t60 = claim_space(thead1_nodes);
			tr3 = claim_element(thead1_nodes, "TR", { class: true });
			var tr3_nodes = children(tr3);
			th20 = claim_element(tr3_nodes, "TH", { class: true });
			var th20_nodes = children(th20);
			t61 = claim_text(th20_nodes, "Date");
			th20_nodes.forEach(detach_dev);
			t62 = claim_space(tr3_nodes);
			th21 = claim_element(tr3_nodes, "TH", { class: true });
			var th21_nodes = children(th21);
			t63 = claim_text(th21_nodes, "Series");
			th21_nodes.forEach(detach_dev);
			t64 = claim_space(tr3_nodes);
			th22 = claim_element(tr3_nodes, "TH", { class: true });
			var th22_nodes = children(th22);
			t65 = claim_text(th22_nodes, "Repet.");
			th22_nodes.forEach(detach_dev);
			t66 = claim_space(tr3_nodes);
			th23 = claim_element(tr3_nodes, "TH", { class: true });
			var th23_nodes = children(th23);
			t67 = claim_text(th23_nodes, "Series");
			th23_nodes.forEach(detach_dev);
			t68 = claim_space(tr3_nodes);
			th24 = claim_element(tr3_nodes, "TH", { class: true });
			var th24_nodes = children(th24);
			t69 = claim_text(th24_nodes, "Repet.");
			th24_nodes.forEach(detach_dev);
			t70 = claim_space(tr3_nodes);
			th25 = claim_element(tr3_nodes, "TH", { class: true });
			var th25_nodes = children(th25);
			t71 = claim_text(th25_nodes, "Series");
			th25_nodes.forEach(detach_dev);
			t72 = claim_space(tr3_nodes);
			th26 = claim_element(tr3_nodes, "TH", { class: true });
			var th26_nodes = children(th26);
			t73 = claim_text(th26_nodes, "Repet.");
			th26_nodes.forEach(detach_dev);
			t74 = claim_space(tr3_nodes);
			th27 = claim_element(tr3_nodes, "TH", { class: true });
			var th27_nodes = children(th27);
			t75 = claim_text(th27_nodes, "Series");
			th27_nodes.forEach(detach_dev);
			t76 = claim_space(tr3_nodes);
			th28 = claim_element(tr3_nodes, "TH", { class: true });
			var th28_nodes = children(th28);
			t77 = claim_text(th28_nodes, "Repet.");
			th28_nodes.forEach(detach_dev);
			t78 = claim_space(tr3_nodes);
			th29 = claim_element(tr3_nodes, "TH", { class: true });
			var th29_nodes = children(th29);
			t79 = claim_text(th29_nodes, "Series");
			th29_nodes.forEach(detach_dev);
			t80 = claim_space(tr3_nodes);
			th30 = claim_element(tr3_nodes, "TH", { class: true });
			var th30_nodes = children(th30);
			t81 = claim_text(th30_nodes, "Repet.");
			th30_nodes.forEach(detach_dev);
			tr3_nodes.forEach(detach_dev);
			thead1_nodes.forEach(detach_dev);
			t82 = claim_space(table1_nodes);
			tbody1 = claim_element(table1_nodes, "TBODY", {});
			var tbody1_nodes = children(tbody1);

			for (let i = 0; i < each_blocks_2.length; i += 1) {
				each_blocks_2[i].l(tbody1_nodes);
			}

			tbody1_nodes.forEach(detach_dev);
			table1_nodes.forEach(detach_dev);
			div9_nodes.forEach(detach_dev);
			div10_nodes.forEach(detach_dev);
			t83 = claim_space(div21_nodes);
			div11 = claim_element(div21_nodes, "DIV", {});
			var div11_nodes = children(div11);
			t84 = claim_text(div11_nodes, "Your last session was ");
			span1 = claim_element(div11_nodes, "SPAN", { class: true });
			var span1_nodes = children(span1);
			t85 = claim_text(span1_nodes, /*pushups_global_indicator*/ ctx[7]);
			t86 = claim_text(span1_nodes, "%");
			span1_nodes.forEach(detach_dev);
			t87 = claim_text(div11_nodes, " of the average of the sessions where you worked on push-ups");
			div11_nodes.forEach(detach_dev);
			t88 = claim_space(div21_nodes);
			div12 = claim_element(div21_nodes, "DIV", { class: true });
			var div12_nodes = children(div12);
			caption3 = claim_element(div12_nodes, "CAPTION", { class: true });
			var caption3_nodes = children(caption3);
			t89 = claim_text(caption3_nodes, "Performance Radar Chart");
			caption3_nodes.forEach(detach_dev);
			t90 = claim_space(div12_nodes);
			claim_component(chartsradarpushups.$$.fragment, div12_nodes);
			div12_nodes.forEach(detach_dev);
			t91 = claim_space(div21_nodes);
			div14 = claim_element(div21_nodes, "DIV", { class: true });
			var div14_nodes = children(div14);
			h13 = claim_element(div14_nodes, "H1", { class: true });
			var h13_nodes = children(h13);
			t92 = claim_text(h13_nodes, "Abdominals");
			h13_nodes.forEach(detach_dev);
			t93 = claim_space(div14_nodes);
			div13 = claim_element(div14_nodes, "DIV", { class: true });
			var div13_nodes = children(div13);
			table2 = claim_element(div13_nodes, "TABLE", { class: true });
			var table2_nodes = children(table2);
			caption4 = claim_element(table2_nodes, "CAPTION", { class: true });
			var caption4_nodes = children(caption4);
			t94 = claim_text(caption4_nodes, "Data for Abdominals");
			caption4_nodes.forEach(detach_dev);
			t95 = claim_space(table2_nodes);
			thead2 = claim_element(table2_nodes, "THEAD", { class: true });
			var thead2_nodes = children(thead2);
			tr4 = claim_element(thead2_nodes, "TR", { class: true });
			var tr4_nodes = children(tr4);
			th31 = claim_element(tr4_nodes, "TH", { class: true });
			children(th31).forEach(detach_dev);
			t96 = claim_space(tr4_nodes);
			th32 = claim_element(tr4_nodes, "TH", { colspan: true, class: true });
			var th32_nodes = children(th32);
			t97 = claim_text(th32_nodes, "Regular");
			th32_nodes.forEach(detach_dev);
			t98 = claim_space(tr4_nodes);
			th33 = claim_element(tr4_nodes, "TH", { colspan: true, class: true });
			var th33_nodes = children(th33);
			t99 = claim_text(th33_nodes, "Lateral");
			th33_nodes.forEach(detach_dev);
			t100 = claim_space(tr4_nodes);
			th34 = claim_element(tr4_nodes, "TH", { colspan: true, class: true });
			var th34_nodes = children(th34);
			t101 = claim_text(th34_nodes, "Core");
			th34_nodes.forEach(detach_dev);
			tr4_nodes.forEach(detach_dev);
			t102 = claim_space(thead2_nodes);
			tr5 = claim_element(thead2_nodes, "TR", { class: true });
			var tr5_nodes = children(tr5);
			th35 = claim_element(tr5_nodes, "TH", { class: true });
			var th35_nodes = children(th35);
			t103 = claim_text(th35_nodes, "Date");
			th35_nodes.forEach(detach_dev);
			t104 = claim_space(tr5_nodes);
			th36 = claim_element(tr5_nodes, "TH", { class: true });
			var th36_nodes = children(th36);
			t105 = claim_text(th36_nodes, "Series");
			th36_nodes.forEach(detach_dev);
			t106 = claim_space(tr5_nodes);
			th37 = claim_element(tr5_nodes, "TH", { class: true });
			var th37_nodes = children(th37);
			t107 = claim_text(th37_nodes, "Repet.");
			th37_nodes.forEach(detach_dev);
			t108 = claim_space(tr5_nodes);
			th38 = claim_element(tr5_nodes, "TH", { class: true });
			var th38_nodes = children(th38);
			t109 = claim_text(th38_nodes, "Series");
			th38_nodes.forEach(detach_dev);
			t110 = claim_space(tr5_nodes);
			th39 = claim_element(tr5_nodes, "TH", { class: true });
			var th39_nodes = children(th39);
			t111 = claim_text(th39_nodes, "Repet.");
			th39_nodes.forEach(detach_dev);
			t112 = claim_space(tr5_nodes);
			th40 = claim_element(tr5_nodes, "TH", { class: true });
			var th40_nodes = children(th40);
			t113 = claim_text(th40_nodes, "Series");
			th40_nodes.forEach(detach_dev);
			t114 = claim_space(tr5_nodes);
			th41 = claim_element(tr5_nodes, "TH", { class: true });
			var th41_nodes = children(th41);
			t115 = claim_text(th41_nodes, "Repet.");
			th41_nodes.forEach(detach_dev);
			tr5_nodes.forEach(detach_dev);
			thead2_nodes.forEach(detach_dev);
			t116 = claim_space(table2_nodes);
			tbody2 = claim_element(table2_nodes, "TBODY", {});
			var tbody2_nodes = children(tbody2);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].l(tbody2_nodes);
			}

			tbody2_nodes.forEach(detach_dev);
			table2_nodes.forEach(detach_dev);
			div13_nodes.forEach(detach_dev);
			div14_nodes.forEach(detach_dev);
			t117 = claim_space(div21_nodes);
			div15 = claim_element(div21_nodes, "DIV", {});
			var div15_nodes = children(div15);
			t118 = claim_text(div15_nodes, "Your last session was ");
			span2 = claim_element(div15_nodes, "SPAN", { class: true });
			var span2_nodes = children(span2);
			t119 = claim_text(span2_nodes, /*abdominal_global_indicator*/ ctx[8]);
			t120 = claim_text(span2_nodes, "%");
			span2_nodes.forEach(detach_dev);
			t121 = claim_text(div15_nodes, " of the average of the sessions where you worked on abdominals");
			div15_nodes.forEach(detach_dev);
			t122 = claim_space(div21_nodes);
			div16 = claim_element(div21_nodes, "DIV", { class: true });
			var div16_nodes = children(div16);
			caption5 = claim_element(div16_nodes, "CAPTION", { class: true });
			var caption5_nodes = children(caption5);
			t123 = claim_text(caption5_nodes, "Performance Radar Chart");
			caption5_nodes.forEach(detach_dev);
			t124 = claim_space(div16_nodes);
			claim_component(chartsradarabdominals.$$.fragment, div16_nodes);
			div16_nodes.forEach(detach_dev);
			t125 = claim_space(div21_nodes);
			div18 = claim_element(div21_nodes, "DIV", { class: true });
			var div18_nodes = children(div18);
			h14 = claim_element(div18_nodes, "H1", { class: true });
			var h14_nodes = children(h14);
			t126 = claim_text(h14_nodes, "Others");
			h14_nodes.forEach(detach_dev);
			t127 = claim_space(div18_nodes);
			div17 = claim_element(div18_nodes, "DIV", { class: true });
			var div17_nodes = children(div17);
			table3 = claim_element(div17_nodes, "TABLE", { class: true });
			var table3_nodes = children(table3);
			caption6 = claim_element(table3_nodes, "CAPTION", { class: true });
			var caption6_nodes = children(caption6);
			t128 = claim_text(caption6_nodes, "Data for Others");
			caption6_nodes.forEach(detach_dev);
			t129 = claim_space(table3_nodes);
			thead3 = claim_element(table3_nodes, "THEAD", { class: true });
			var thead3_nodes = children(thead3);
			tr6 = claim_element(thead3_nodes, "TR", { class: true });
			var tr6_nodes = children(tr6);
			th42 = claim_element(tr6_nodes, "TH", { class: true });
			children(th42).forEach(detach_dev);
			t130 = claim_space(tr6_nodes);
			th43 = claim_element(tr6_nodes, "TH", { colspan: true, class: true });
			var th43_nodes = children(th43);
			t131 = claim_text(th43_nodes, "Bench");
			th43_nodes.forEach(detach_dev);
			t132 = claim_space(tr6_nodes);
			th44 = claim_element(tr6_nodes, "TH", { colspan: true, class: true });
			var th44_nodes = children(th44);
			t133 = claim_text(th44_nodes, "Biceps Weight");
			th44_nodes.forEach(detach_dev);
			t134 = claim_space(tr6_nodes);
			th45 = claim_element(tr6_nodes, "TH", { colspan: true, class: true });
			var th45_nodes = children(th45);
			t135 = claim_text(th45_nodes, "Pull-Ups");
			th45_nodes.forEach(detach_dev);
			tr6_nodes.forEach(detach_dev);
			t136 = claim_space(thead3_nodes);
			tr7 = claim_element(thead3_nodes, "TR", { class: true });
			var tr7_nodes = children(tr7);
			th46 = claim_element(tr7_nodes, "TH", { class: true });
			var th46_nodes = children(th46);
			t137 = claim_text(th46_nodes, "Date");
			th46_nodes.forEach(detach_dev);
			t138 = claim_space(tr7_nodes);
			th47 = claim_element(tr7_nodes, "TH", { class: true });
			var th47_nodes = children(th47);
			t139 = claim_text(th47_nodes, "Series");
			th47_nodes.forEach(detach_dev);
			t140 = claim_space(tr7_nodes);
			th48 = claim_element(tr7_nodes, "TH", { class: true });
			var th48_nodes = children(th48);
			t141 = claim_text(th48_nodes, "Repet.");
			th48_nodes.forEach(detach_dev);
			t142 = claim_space(tr7_nodes);
			th49 = claim_element(tr7_nodes, "TH", { class: true });
			var th49_nodes = children(th49);
			t143 = claim_text(th49_nodes, "Series");
			th49_nodes.forEach(detach_dev);
			t144 = claim_space(tr7_nodes);
			th50 = claim_element(tr7_nodes, "TH", { class: true });
			var th50_nodes = children(th50);
			t145 = claim_text(th50_nodes, "Repet.");
			th50_nodes.forEach(detach_dev);
			t146 = claim_space(tr7_nodes);
			th51 = claim_element(tr7_nodes, "TH", { class: true });
			var th51_nodes = children(th51);
			t147 = claim_text(th51_nodes, "Series");
			th51_nodes.forEach(detach_dev);
			t148 = claim_space(tr7_nodes);
			th52 = claim_element(tr7_nodes, "TH", { class: true });
			var th52_nodes = children(th52);
			t149 = claim_text(th52_nodes, "Repet.");
			th52_nodes.forEach(detach_dev);
			tr7_nodes.forEach(detach_dev);
			thead3_nodes.forEach(detach_dev);
			t150 = claim_space(table3_nodes);
			tbody3 = claim_element(table3_nodes, "TBODY", {});
			var tbody3_nodes = children(tbody3);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(tbody3_nodes);
			}

			tbody3_nodes.forEach(detach_dev);
			table3_nodes.forEach(detach_dev);
			div17_nodes.forEach(detach_dev);
			div18_nodes.forEach(detach_dev);
			t151 = claim_space(div21_nodes);
			div19 = claim_element(div21_nodes, "DIV", {});
			var div19_nodes = children(div19);
			t152 = claim_text(div19_nodes, "Your last session was ");
			span3 = claim_element(div19_nodes, "SPAN", { class: true });
			var span3_nodes = children(span3);
			t153 = claim_text(span3_nodes, /*others_global_indicator*/ ctx[9]);
			t154 = claim_text(span3_nodes, "%");
			span3_nodes.forEach(detach_dev);
			t155 = claim_text(div19_nodes, " of the average of the sessions where you worked on other exercises");
			div19_nodes.forEach(detach_dev);
			t156 = claim_space(div21_nodes);
			div20 = claim_element(div21_nodes, "DIV", { class: true });
			var div20_nodes = children(div20);
			caption7 = claim_element(div20_nodes, "CAPTION", { class: true });
			var caption7_nodes = children(caption7);
			t157 = claim_text(caption7_nodes, "Performance Radar Chart");
			caption7_nodes.forEach(detach_dev);
			t158 = claim_space(div20_nodes);
			claim_component(chartsradarothers.$$.fragment, div20_nodes);
			div20_nodes.forEach(detach_dev);
			div21_nodes.forEach(detach_dev);
			div22_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = "workout2.jpg")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "cycling");
			attr_dev(img, "class", "object-cover h-48 w-full shadow rounded-md");
			add_location(img, file, 285, 8, 8039);
			attr_dev(div0, "class", "mb-6 shadow ");
			add_location(div0, file, 284, 4, 8004);
			attr_dev(div1, "class", "font-sans Arial text-center p-2 text-3xl text-blue-700 font-semibold bg-blue-100 px-8 tracking-widest");
			add_location(div1, file, 288, 8, 8252);
			attr_dev(div2, "class", "flex justify-center mb-16 bg-blue-700 border-2 border-gray-300 shadow-lg rounded-t-md");
			add_location(div2, file, 287, 4, 8144);
			attr_dev(h10, "class", "text-blue-800  mb-8 ");
			add_location(h10, file, 294, 8, 8471);
			attr_dev(div3, "class", "italic grid grid-cols-3 divide-x divide-gray-400");
			add_location(div3, file, 296, 8, 8537);
			attr_dev(div4, "class", "pb-8");
			add_location(div4, file, 293, 4, 8444);
			attr_dev(h11, "class", "text-blue-800");
			add_location(h11, file, 306, 8, 8817);
			attr_dev(caption0, "class", "font-semibold mb-6 mt-8 text-xl italic text-blue-700");
			add_location(caption0, file, 312, 12, 8998);
			attr_dev(th0, "class", "px-2 py-2");
			add_location(th0, file, 315, 12, 9215);
			attr_dev(th1, "colspan", "2");
			attr_dev(th1, "class", "px-2 py-2");
			add_location(th1, file, 316, 12, 9255);
			attr_dev(th2, "colspan", "2");
			attr_dev(th2, "class", "px-2 py-2");
			add_location(th2, file, 317, 12, 9312);
			attr_dev(th3, "colspan", "2");
			attr_dev(th3, "class", "px-2 py-2");
			add_location(th3, file, 318, 12, 9374);
			attr_dev(th4, "colspan", "2");
			attr_dev(th4, "class", "px-2 py-2");
			add_location(th4, file, 319, 12, 9436);
			attr_dev(tr0, "class", "bg-blue-200 border border-gray-300");
			add_location(tr0, file, 314, 12, 9155);
			attr_dev(th5, "class", "px-2 py-2");
			add_location(th5, file, 322, 12, 9573);
			attr_dev(th6, "class", "px-2 py-2");
			add_location(th6, file, 323, 12, 9617);
			attr_dev(th7, "class", "px-2 py-2");
			add_location(th7, file, 324, 12, 9664);
			attr_dev(th8, "class", "px-2 py-2");
			add_location(th8, file, 325, 12, 9711);
			attr_dev(th9, "class", "px-2 py-2");
			add_location(th9, file, 326, 12, 9758);
			attr_dev(th10, "class", "px-2 py-2");
			add_location(th10, file, 327, 12, 9805);
			attr_dev(th11, "class", "px-2 py-2");
			add_location(th11, file, 328, 12, 9852);
			attr_dev(th12, "class", "px-2 py-2");
			add_location(th12, file, 329, 12, 9899);
			attr_dev(th13, "class", "px-2 py-2");
			add_location(th13, file, 330, 12, 9946);
			attr_dev(tr1, "class", "bg-blue-100 border border-gray-300");
			add_location(tr1, file, 321, 12, 9513);
			attr_dev(thead0, "class", "border-gray-300 italic");
			add_location(thead0, file, 313, 12, 9104);
			add_location(tbody0, file, 335, 8, 10038);
			attr_dev(table0, "class", "table-auto text-center container mx-auto");
			add_location(table0, file, 311, 12, 8929);
			attr_dev(div5, "class", "m-12 container mx-auto");
			add_location(div5, file, 310, 8, 8880);
			attr_dev(div6, "class", "divide-y mt-16");
			add_location(div6, file, 303, 4, 8764);
			attr_dev(span0, "class", "svelte-x4tdvp");
			toggle_class(span0, "green", /*leg_global_indicator*/ ctx[6] >= 100);
			toggle_class(span0, "red", /*leg_global_indicator*/ ctx[6] < 100);
			add_location(span0, file, 355, 28, 10905);
			add_location(div7, file, 355, 0, 10877);
			attr_dev(caption1, "class", "text-center container mx-auto font-semibold mb-6 mt-8 text-xl italic text-blue-700");
			add_location(caption1, file, 358, 12, 11130);
			attr_dev(div8, "class", "mt-8  m-12  ");
			add_location(div8, file, 357, 4, 11091);
			attr_dev(h12, "class", "text-blue-800");
			add_location(h12, file, 365, 8, 11386);
			attr_dev(caption2, "class", "font-semibold mb-6 mt-8 text-xl italic text-blue-700");
			add_location(caption2, file, 371, 12, 11571);
			attr_dev(th14, "class", "px-2 py-2");
			add_location(th14, file, 374, 12, 11792);
			attr_dev(th15, "colspan", "2");
			attr_dev(th15, "class", "px-2 py-2");
			add_location(th15, file, 375, 12, 11832);
			attr_dev(th16, "colspan", "2");
			attr_dev(th16, "class", "px-2 py-2");
			add_location(th16, file, 376, 12, 11890);
			attr_dev(th17, "colspan", "2");
			attr_dev(th17, "class", "px-2 py-2");
			add_location(th17, file, 377, 12, 11947);
			attr_dev(th18, "colspan", "2");
			attr_dev(th18, "class", "px-2 py-2");
			add_location(th18, file, 378, 12, 12004);
			attr_dev(th19, "colspan", "2");
			attr_dev(th19, "class", "px-2 py-2");
			add_location(th19, file, 379, 12, 12059);
			attr_dev(tr2, "class", "bg-blue-200 border border-gray-300");
			add_location(tr2, file, 373, 12, 11732);
			attr_dev(th20, "class", "px-2 py-2");
			add_location(th20, file, 382, 12, 12193);
			attr_dev(th21, "class", "px-2 py-2");
			add_location(th21, file, 383, 12, 12237);
			attr_dev(th22, "class", "px-2 py-2");
			add_location(th22, file, 384, 12, 12284);
			attr_dev(th23, "class", "px-2 py-2");
			add_location(th23, file, 385, 12, 12331);
			attr_dev(th24, "class", "px-2 py-2");
			add_location(th24, file, 386, 12, 12378);
			attr_dev(th25, "class", "px-2 py-2");
			add_location(th25, file, 387, 12, 12425);
			attr_dev(th26, "class", "px-2 py-2");
			add_location(th26, file, 388, 12, 12472);
			attr_dev(th27, "class", "px-2 py-2");
			add_location(th27, file, 389, 12, 12519);
			attr_dev(th28, "class", "px-2 py-2");
			add_location(th28, file, 390, 12, 12566);
			attr_dev(th29, "class", "px-2 py-2");
			add_location(th29, file, 391, 12, 12613);
			attr_dev(th30, "class", "px-2 py-2");
			add_location(th30, file, 392, 12, 12660);
			attr_dev(tr3, "class", "bg-blue-100 border border-gray-300");
			add_location(tr3, file, 381, 12, 12133);
			attr_dev(thead1, "class", "border-gray-300 italic");
			add_location(thead1, file, 372, 12, 11681);
			add_location(tbody1, file, 397, 8, 12752);
			attr_dev(table1, "class", "table-auto text-center container mx-auto");
			add_location(table1, file, 370, 12, 11502);
			attr_dev(div9, "class", "m-12 container mx-auto");
			add_location(div9, file, 369, 8, 11453);
			attr_dev(div10, "class", "divide-y mt-16");
			add_location(div10, file, 362, 4, 11333);
			attr_dev(span1, "class", "svelte-x4tdvp");
			toggle_class(span1, "green", /*pushups_global_indicator*/ ctx[7] >= 100);
			toggle_class(span1, "red", /*pushups_global_indicator*/ ctx[7] < 100);
			add_location(span1, file, 418, 28, 13815);
			add_location(div11, file, 418, 0, 13787);
			attr_dev(caption3, "class", "text-center container mx-auto font-semibold mb-6 mt-8 text-xl italic text-blue-700");
			add_location(caption3, file, 422, 12, 14057);
			attr_dev(div12, "class", "mt-8  m-12  ");
			add_location(div12, file, 421, 4, 14018);
			attr_dev(h13, "class", "text-blue-800");
			add_location(h13, file, 430, 8, 14310);
			attr_dev(caption4, "class", "font-semibold mb-6 mt-8 text-xl italic text-blue-700");
			add_location(caption4, file, 436, 12, 14497);
			attr_dev(th31, "class", "px-2 py-2");
			add_location(th31, file, 439, 12, 14720);
			attr_dev(th32, "colspan", "2");
			attr_dev(th32, "class", "px-2 py-2");
			add_location(th32, file, 440, 12, 14760);
			attr_dev(th33, "colspan", "2");
			attr_dev(th33, "class", "px-2 py-2");
			add_location(th33, file, 441, 12, 14818);
			attr_dev(th34, "colspan", "2");
			attr_dev(th34, "class", "px-2 py-2");
			add_location(th34, file, 442, 12, 14875);
			attr_dev(tr4, "class", "bg-blue-200 border border-gray-300");
			add_location(tr4, file, 438, 12, 14660);
			attr_dev(th35, "class", "px-2 py-2");
			add_location(th35, file, 445, 12, 15007);
			attr_dev(th36, "class", "px-2 py-2");
			add_location(th36, file, 446, 12, 15051);
			attr_dev(th37, "class", "px-2 py-2");
			add_location(th37, file, 447, 12, 15098);
			attr_dev(th38, "class", "px-2 py-2");
			add_location(th38, file, 448, 12, 15145);
			attr_dev(th39, "class", "px-2 py-2");
			add_location(th39, file, 449, 12, 15192);
			attr_dev(th40, "class", "px-2 py-2");
			add_location(th40, file, 450, 12, 15239);
			attr_dev(th41, "class", "px-2 py-2");
			add_location(th41, file, 451, 12, 15286);
			attr_dev(tr5, "class", "bg-blue-100 border border-gray-300");
			add_location(tr5, file, 444, 12, 14947);
			attr_dev(thead2, "class", "border-gray-300 italic");
			add_location(thead2, file, 437, 12, 14609);
			add_location(tbody2, file, 456, 8, 15378);
			attr_dev(table2, "class", "table-auto text-center container mx-auto");
			add_location(table2, file, 435, 12, 14428);
			attr_dev(div13, "class", "m-12 container mx-auto");
			add_location(div13, file, 434, 8, 14379);
			attr_dev(div14, "class", "divide-y mt-16");
			add_location(div14, file, 427, 4, 14257);
			attr_dev(span2, "class", "svelte-x4tdvp");
			toggle_class(span2, "green", /*abdominal_global_indicator*/ ctx[8] >= 100);
			toggle_class(span2, "red", /*abdominal_global_indicator*/ ctx[8] < 100);
			add_location(span2, file, 473, 28, 16112);
			add_location(div15, file, 473, 0, 16084);
			attr_dev(caption5, "class", "text-center container mx-auto font-semibold mb-6 mt-8 text-xl italic text-blue-700");
			add_location(caption5, file, 477, 12, 16362);
			attr_dev(div16, "class", "mt-8  m-12  ");
			add_location(div16, file, 476, 4, 16323);
			attr_dev(h14, "class", "text-blue-800");
			add_location(h14, file, 484, 8, 16619);
			attr_dev(caption6, "class", "font-semibold mb-6 mt-8 text-xl italic text-blue-700");
			add_location(caption6, file, 490, 12, 16802);
			attr_dev(th42, "class", "px-2 py-2");
			add_location(th42, file, 493, 12, 17021);
			attr_dev(th43, "colspan", "2");
			attr_dev(th43, "class", "px-2 py-2");
			add_location(th43, file, 494, 12, 17061);
			attr_dev(th44, "colspan", "2");
			attr_dev(th44, "class", "px-2 py-2");
			add_location(th44, file, 495, 12, 17117);
			attr_dev(th45, "colspan", "2");
			attr_dev(th45, "class", "px-2 py-2");
			add_location(th45, file, 496, 12, 17180);
			attr_dev(tr6, "class", "bg-blue-200 border border-gray-300");
			add_location(tr6, file, 492, 12, 16961);
			attr_dev(th46, "class", "px-2 py-2");
			add_location(th46, file, 499, 13, 17317);
			attr_dev(th47, "class", "px-2 py-2");
			add_location(th47, file, 500, 12, 17361);
			attr_dev(th48, "class", "px-2 py-2");
			add_location(th48, file, 501, 12, 17408);
			attr_dev(th49, "class", "px-2 py-2");
			add_location(th49, file, 502, 12, 17455);
			attr_dev(th50, "class", "px-2 py-2");
			add_location(th50, file, 503, 12, 17502);
			attr_dev(th51, "class", "px-2 py-2");
			add_location(th51, file, 504, 12, 17549);
			attr_dev(th52, "class", "px-2 py-2");
			add_location(th52, file, 505, 12, 17596);
			attr_dev(tr7, "class", "bg-blue-100 border border-gray-300");
			add_location(tr7, file, 498, 12, 17256);
			attr_dev(thead3, "class", "border-gray-300 italic");
			add_location(thead3, file, 491, 12, 16910);
			add_location(tbody3, file, 510, 8, 17688);
			attr_dev(table3, "class", "table-auto text-center container mx-auto");
			add_location(table3, file, 489, 12, 16733);
			attr_dev(div17, "class", "m-12 container mx-auto");
			add_location(div17, file, 488, 8, 16684);
			attr_dev(div18, "class", "divide-y mt-16");
			add_location(div18, file, 481, 4, 16566);
			attr_dev(span3, "class", "svelte-x4tdvp");
			toggle_class(span3, "green", /*others_global_indicator*/ ctx[9] >= 100);
			toggle_class(span3, "red", /*others_global_indicator*/ ctx[9] < 100);
			add_location(span3, file, 527, 28, 18394);
			add_location(div19, file, 527, 0, 18366);
			attr_dev(caption7, "class", "text-center container mx-auto font-semibold mb-6 mt-8 text-xl italic text-blue-700");
			add_location(caption7, file, 532, 12, 18641);
			attr_dev(div20, "class", "mt-8  m-12  ");
			add_location(div20, file, 531, 4, 18602);
			attr_dev(div21, "class", "p-8");
			add_location(div21, file, 292, 0, 8422);
			attr_dev(div22, "class", "mb-20");
			add_location(div22, file, 283, 0, 7980);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div22, anchor);
			append_dev(div22, div0);
			append_dev(div0, img);
			append_dev(div22, t0);
			append_dev(div22, div2);
			append_dev(div2, div1);
			append_dev(div1, t1);
			append_dev(div22, t2);
			append_dev(div22, div21);
			append_dev(div21, div4);
			append_dev(div4, h10);
			append_dev(h10, t3);
			append_dev(div4, t4);
			append_dev(div4, div3);

			for (let i = 0; i < each_blocks_4.length; i += 1) {
				each_blocks_4[i].m(div3, null);
			}

			append_dev(div21, t5);
			append_dev(div21, div6);
			append_dev(div6, h11);
			append_dev(h11, t6);
			append_dev(div6, t7);
			append_dev(div6, div5);
			append_dev(div5, table0);
			append_dev(table0, caption0);
			append_dev(caption0, t8);
			append_dev(table0, t9);
			append_dev(table0, thead0);
			append_dev(thead0, tr0);
			append_dev(tr0, th0);
			append_dev(tr0, t10);
			append_dev(tr0, th1);
			append_dev(th1, t11);
			append_dev(tr0, t12);
			append_dev(tr0, th2);
			append_dev(th2, t13);
			append_dev(tr0, t14);
			append_dev(tr0, th3);
			append_dev(th3, t15);
			append_dev(tr0, t16);
			append_dev(tr0, th4);
			append_dev(th4, t17);
			append_dev(thead0, t18);
			append_dev(thead0, tr1);
			append_dev(tr1, th5);
			append_dev(th5, t19);
			append_dev(tr1, t20);
			append_dev(tr1, th6);
			append_dev(th6, t21);
			append_dev(tr1, t22);
			append_dev(tr1, th7);
			append_dev(th7, t23);
			append_dev(tr1, t24);
			append_dev(tr1, th8);
			append_dev(th8, t25);
			append_dev(tr1, t26);
			append_dev(tr1, th9);
			append_dev(th9, t27);
			append_dev(tr1, t28);
			append_dev(tr1, th10);
			append_dev(th10, t29);
			append_dev(tr1, t30);
			append_dev(tr1, th11);
			append_dev(th11, t31);
			append_dev(tr1, t32);
			append_dev(tr1, th12);
			append_dev(th12, t33);
			append_dev(tr1, t34);
			append_dev(tr1, th13);
			append_dev(th13, t35);
			append_dev(table0, t36);
			append_dev(table0, tbody0);

			for (let i = 0; i < each_blocks_3.length; i += 1) {
				each_blocks_3[i].m(tbody0, null);
			}

			append_dev(div21, t37);
			append_dev(div21, div7);
			append_dev(div7, t38);
			append_dev(div7, span0);
			append_dev(span0, t39);
			append_dev(span0, t40);
			append_dev(div7, t41);
			append_dev(div21, t42);
			append_dev(div21, div8);
			append_dev(div8, caption1);
			append_dev(caption1, t43);
			append_dev(div8, t44);
			mount_component(chartsradarleg, div8, null);
			append_dev(div21, t45);
			append_dev(div21, div10);
			append_dev(div10, h12);
			append_dev(h12, t46);
			append_dev(div10, t47);
			append_dev(div10, div9);
			append_dev(div9, table1);
			append_dev(table1, caption2);
			append_dev(caption2, t48);
			append_dev(table1, t49);
			append_dev(table1, thead1);
			append_dev(thead1, tr2);
			append_dev(tr2, th14);
			append_dev(tr2, t50);
			append_dev(tr2, th15);
			append_dev(th15, t51);
			append_dev(tr2, t52);
			append_dev(tr2, th16);
			append_dev(th16, t53);
			append_dev(tr2, t54);
			append_dev(tr2, th17);
			append_dev(th17, t55);
			append_dev(tr2, t56);
			append_dev(tr2, th18);
			append_dev(th18, t57);
			append_dev(tr2, t58);
			append_dev(tr2, th19);
			append_dev(th19, t59);
			append_dev(thead1, t60);
			append_dev(thead1, tr3);
			append_dev(tr3, th20);
			append_dev(th20, t61);
			append_dev(tr3, t62);
			append_dev(tr3, th21);
			append_dev(th21, t63);
			append_dev(tr3, t64);
			append_dev(tr3, th22);
			append_dev(th22, t65);
			append_dev(tr3, t66);
			append_dev(tr3, th23);
			append_dev(th23, t67);
			append_dev(tr3, t68);
			append_dev(tr3, th24);
			append_dev(th24, t69);
			append_dev(tr3, t70);
			append_dev(tr3, th25);
			append_dev(th25, t71);
			append_dev(tr3, t72);
			append_dev(tr3, th26);
			append_dev(th26, t73);
			append_dev(tr3, t74);
			append_dev(tr3, th27);
			append_dev(th27, t75);
			append_dev(tr3, t76);
			append_dev(tr3, th28);
			append_dev(th28, t77);
			append_dev(tr3, t78);
			append_dev(tr3, th29);
			append_dev(th29, t79);
			append_dev(tr3, t80);
			append_dev(tr3, th30);
			append_dev(th30, t81);
			append_dev(table1, t82);
			append_dev(table1, tbody1);

			for (let i = 0; i < each_blocks_2.length; i += 1) {
				each_blocks_2[i].m(tbody1, null);
			}

			append_dev(div21, t83);
			append_dev(div21, div11);
			append_dev(div11, t84);
			append_dev(div11, span1);
			append_dev(span1, t85);
			append_dev(span1, t86);
			append_dev(div11, t87);
			append_dev(div21, t88);
			append_dev(div21, div12);
			append_dev(div12, caption3);
			append_dev(caption3, t89);
			append_dev(div12, t90);
			mount_component(chartsradarpushups, div12, null);
			append_dev(div21, t91);
			append_dev(div21, div14);
			append_dev(div14, h13);
			append_dev(h13, t92);
			append_dev(div14, t93);
			append_dev(div14, div13);
			append_dev(div13, table2);
			append_dev(table2, caption4);
			append_dev(caption4, t94);
			append_dev(table2, t95);
			append_dev(table2, thead2);
			append_dev(thead2, tr4);
			append_dev(tr4, th31);
			append_dev(tr4, t96);
			append_dev(tr4, th32);
			append_dev(th32, t97);
			append_dev(tr4, t98);
			append_dev(tr4, th33);
			append_dev(th33, t99);
			append_dev(tr4, t100);
			append_dev(tr4, th34);
			append_dev(th34, t101);
			append_dev(thead2, t102);
			append_dev(thead2, tr5);
			append_dev(tr5, th35);
			append_dev(th35, t103);
			append_dev(tr5, t104);
			append_dev(tr5, th36);
			append_dev(th36, t105);
			append_dev(tr5, t106);
			append_dev(tr5, th37);
			append_dev(th37, t107);
			append_dev(tr5, t108);
			append_dev(tr5, th38);
			append_dev(th38, t109);
			append_dev(tr5, t110);
			append_dev(tr5, th39);
			append_dev(th39, t111);
			append_dev(tr5, t112);
			append_dev(tr5, th40);
			append_dev(th40, t113);
			append_dev(tr5, t114);
			append_dev(tr5, th41);
			append_dev(th41, t115);
			append_dev(table2, t116);
			append_dev(table2, tbody2);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(tbody2, null);
			}

			append_dev(div21, t117);
			append_dev(div21, div15);
			append_dev(div15, t118);
			append_dev(div15, span2);
			append_dev(span2, t119);
			append_dev(span2, t120);
			append_dev(div15, t121);
			append_dev(div21, t122);
			append_dev(div21, div16);
			append_dev(div16, caption5);
			append_dev(caption5, t123);
			append_dev(div16, t124);
			mount_component(chartsradarabdominals, div16, null);
			append_dev(div21, t125);
			append_dev(div21, div18);
			append_dev(div18, h14);
			append_dev(h14, t126);
			append_dev(div18, t127);
			append_dev(div18, div17);
			append_dev(div17, table3);
			append_dev(table3, caption6);
			append_dev(caption6, t128);
			append_dev(table3, t129);
			append_dev(table3, thead3);
			append_dev(thead3, tr6);
			append_dev(tr6, th42);
			append_dev(tr6, t130);
			append_dev(tr6, th43);
			append_dev(th43, t131);
			append_dev(tr6, t132);
			append_dev(tr6, th44);
			append_dev(th44, t133);
			append_dev(tr6, t134);
			append_dev(tr6, th45);
			append_dev(th45, t135);
			append_dev(thead3, t136);
			append_dev(thead3, tr7);
			append_dev(tr7, th46);
			append_dev(th46, t137);
			append_dev(tr7, t138);
			append_dev(tr7, th47);
			append_dev(th47, t139);
			append_dev(tr7, t140);
			append_dev(tr7, th48);
			append_dev(th48, t141);
			append_dev(tr7, t142);
			append_dev(tr7, th49);
			append_dev(th49, t143);
			append_dev(tr7, t144);
			append_dev(tr7, th50);
			append_dev(th50, t145);
			append_dev(tr7, t146);
			append_dev(tr7, th51);
			append_dev(th51, t147);
			append_dev(tr7, t148);
			append_dev(tr7, th52);
			append_dev(th52, t149);
			append_dev(table3, t150);
			append_dev(table3, tbody3);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(tbody3, null);
			}

			append_dev(div21, t151);
			append_dev(div21, div19);
			append_dev(div19, t152);
			append_dev(div19, span3);
			append_dev(span3, t153);
			append_dev(span3, t154);
			append_dev(div19, t155);
			append_dev(div21, t156);
			append_dev(div21, div20);
			append_dev(div20, caption7);
			append_dev(caption7, t157);
			append_dev(div20, t158);
			mount_component(chartsradarothers, div20, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*list_date*/ 32) {
				each_value_4 = get_last_nb_sessions(3, /*list_date*/ ctx[5]);
				validate_each_argument(each_value_4);
				let i;

				for (i = 0; i < each_value_4.length; i += 1) {
					const child_ctx = get_each_context_4(ctx, each_value_4, i);

					if (each_blocks_4[i]) {
						each_blocks_4[i].p(child_ctx, dirty);
					} else {
						each_blocks_4[i] = create_each_block_4(child_ctx);
						each_blocks_4[i].c();
						each_blocks_4[i].m(div3, null);
					}
				}

				for (; i < each_blocks_4.length; i += 1) {
					each_blocks_4[i].d(1);
				}

				each_blocks_4.length = each_value_4.length;
			}

			if (dirty[0] & /*data_last5*/ 16) {
				each_value_3 = /*data_last5*/ ctx[4];
				validate_each_argument(each_value_3);
				let i;

				for (i = 0; i < each_value_3.length; i += 1) {
					const child_ctx = get_each_context_3(ctx, each_value_3, i);

					if (each_blocks_3[i]) {
						each_blocks_3[i].p(child_ctx, dirty);
					} else {
						each_blocks_3[i] = create_each_block_3(child_ctx);
						each_blocks_3[i].c();
						each_blocks_3[i].m(tbody0, null);
					}
				}

				for (; i < each_blocks_3.length; i += 1) {
					each_blocks_3[i].d(1);
				}

				each_blocks_3.length = each_value_3.length;
			}

			if (dirty[0] & /*leg_global_indicator*/ 64) {
				toggle_class(span0, "green", /*leg_global_indicator*/ ctx[6] >= 100);
			}

			if (dirty[0] & /*leg_global_indicator*/ 64) {
				toggle_class(span0, "red", /*leg_global_indicator*/ ctx[6] < 100);
			}

			if (dirty[0] & /*data_last5*/ 16) {
				each_value_2 = /*data_last5*/ ctx[4];
				validate_each_argument(each_value_2);
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks_2[i]) {
						each_blocks_2[i].p(child_ctx, dirty);
					} else {
						each_blocks_2[i] = create_each_block_2(child_ctx);
						each_blocks_2[i].c();
						each_blocks_2[i].m(tbody1, null);
					}
				}

				for (; i < each_blocks_2.length; i += 1) {
					each_blocks_2[i].d(1);
				}

				each_blocks_2.length = each_value_2.length;
			}

			if (dirty[0] & /*pushups_global_indicator*/ 128) {
				toggle_class(span1, "green", /*pushups_global_indicator*/ ctx[7] >= 100);
			}

			if (dirty[0] & /*pushups_global_indicator*/ 128) {
				toggle_class(span1, "red", /*pushups_global_indicator*/ ctx[7] < 100);
			}

			if (dirty[0] & /*data_last5*/ 16) {
				each_value_1 = /*data_last5*/ ctx[4];
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
					} else {
						each_blocks_1[i] = create_each_block_1(child_ctx);
						each_blocks_1[i].c();
						each_blocks_1[i].m(tbody2, null);
					}
				}

				for (; i < each_blocks_1.length; i += 1) {
					each_blocks_1[i].d(1);
				}

				each_blocks_1.length = each_value_1.length;
			}

			if (dirty[0] & /*abdominal_global_indicator*/ 256) {
				toggle_class(span2, "green", /*abdominal_global_indicator*/ ctx[8] >= 100);
			}

			if (dirty[0] & /*abdominal_global_indicator*/ 256) {
				toggle_class(span2, "red", /*abdominal_global_indicator*/ ctx[8] < 100);
			}

			if (dirty[0] & /*data_last5*/ 16) {
				each_value = /*data_last5*/ ctx[4];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(tbody3, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty[0] & /*others_global_indicator*/ 512) {
				toggle_class(span3, "green", /*others_global_indicator*/ ctx[9] >= 100);
			}

			if (dirty[0] & /*others_global_indicator*/ 512) {
				toggle_class(span3, "red", /*others_global_indicator*/ ctx[9] < 100);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(chartsradarleg.$$.fragment, local);
			transition_in(chartsradarpushups.$$.fragment, local);
			transition_in(chartsradarabdominals.$$.fragment, local);
			transition_in(chartsradarothers.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(chartsradarleg.$$.fragment, local);
			transition_out(chartsradarpushups.$$.fragment, local);
			transition_out(chartsradarabdominals.$$.fragment, local);
			transition_out(chartsradarothers.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div22);
			destroy_each(each_blocks_4, detaching);
			destroy_each(each_blocks_3, detaching);
			destroy_component(chartsradarleg);
			destroy_each(each_blocks_2, detaching);
			destroy_component(chartsradarpushups);
			destroy_each(each_blocks_1, detaching);
			destroy_component(chartsradarabdominals);
			destroy_each(each_blocks, detaching);
			destroy_component(chartsradarothers);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function preload({ params, query }) {
	return this.fetch(`sports/workout.json`).then(r => r.json()).then(data_raw => {
		return { data_raw };
	});
}

function custom_sort(a, b) {
	return new Date(a.date).getTime() - new Date(b.date).getTime();
}

function push_series(x, exercise) {
	if (exercise in x) {
		return x[exercise]["Series"] * x[exercise]["Number"];
	} else return 0;
}

function last_element(list) {
	return list[list.length - 1];
}

function average_perf(list1, list2) {
	let count = 0;
	let length = 0;

	for (let i in list1) {
		if (list2[i] > 0) {
			count += list1[i] / list2[i];
			length += 1;
		}
	}

	return count / length * 100;
}

function round_1_decimal(float) {
	return Math.round(float * 10) / 10;
}

function mean_list_notnull(list) {
	let count = 0;
	let length = 0;

	list.forEach(elem => {
		if (elem > 0) {
			count += elem;
			length += 1;
		}
	});

	return count / length;
}

function get_last_nb_sessions(int, list) {
	return list.slice(Math.max(list.length - int, 0));
}

function instance($$self, $$props, $$invalidate) {
	let { data_raw } = $$props;
	data_raw = data_raw.sort(custom_sort);
	let data_last5 = data_raw.slice(Math.max(data_raw.length - 5, 0));

	const workout_exercise = [
		{
			"name": "Squats",
			"features": ["Series", "Number"],
			"group": "Legs"
		},
		{
			"name": "Stair Climbs",
			"features": ["Series", "Number"],
			"group": "Legs"
		},
		{
			"name": "Bench Climbs",
			"features": ["Series", "Number"],
			"group": "Legs"
		},
		{
			"name": "Leg Press",
			"features": ["Series", "Number"],
			"group": "Legs"
		},
		{
			"name": "Push-Ups",
			"features": ["Series", "Number"],
			"group": "Push-Ups"
		},
		{
			"name": "Lateral Push-Ups",
			"features": ["Series", "Number"],
			"group": "Push-Ups"
		},
		{
			"name": "Jumping Push-Ups",
			"features": ["Series", "Number"],
			"group": "Push-Ups"
		},
		{
			"name": "Close Push-Ups",
			"features": ["Series", "Number"],
			"group": "Push-Ups"
		},
		{
			"name": "Raised Push-Ups",
			"features": ["Series", "Number"],
			"group": "Push-Ups"
		},
		{
			"name": "Abdominal",
			"features": ["Series", "Number"],
			"group": "Abdominals"
		},
		{
			"name": "Abdominal Lateral",
			"features": ["Series", "Number"],
			"group": "Abdominals"
		},
		{
			"name": "Core Abdominal",
			"features": ["Series", "Number"],
			"group": "Abdominals"
		},
		{
			"name": "Bench",
			"features": ["Series", "Number"],
			"group": "Weight"
		},
		{
			"name": "Biceps Weight",
			"features": ["Series", "Number"],
			"group": "Weight"
		},
		{
			"name": "Pull-Ups",
			"features": ["Series", "Number"],
			"group": "Pull-Ups"
		}
	];

	const group_list = {
		"Legs": ["Squats", "Stair Climbs", "Bench Climbs", "Leg Press"],
		"Push-Ups": [
			"Push-Ups",
			"Lateral Push-Ups",
			"Jumping Push-Ups",
			"Close Push-Ups",
			"Raised Push-Ups"
		],
		"Abdominals": ["Abdominal", "Abdominal Lateral", "Core Abdominal"],
		"Others": ["Bench", "Biceps Weight", "Pull-Ups"]
	};

	// LEGS : 
	let squats = [];

	let stair_climbs = [];
	let bench_climbs = [];
	let leg_press = [];
	let list_date = [];

	data_raw.forEach(x => {
		list_date.push(x["date"]);
		squats.push(push_series(x, "Squats"));
		stair_climbs.push(push_series(x, "Stair Climbs"));
		bench_climbs.push(push_series(x, "Bench Climbs"));
		leg_press.push(push_series(x, "Leg Press"));
	});

	let last_legs = [
		last_element(squats),
		last_element(stair_climbs),
		last_element(bench_climbs),
		last_element(leg_press)
	];

	let mean_legs = [
		mean_list_notnull(squats),
		mean_list_notnull(stair_climbs),
		mean_list_notnull(bench_climbs),
		mean_list_notnull(leg_press)
	];

	const data_leg_radar = {
		labels: group_list["Legs"],
		datasets: [
			{
				label: "Last session",
				data: last_legs,
				borderColor: "#192E5B",
				fill: false
			},
			{
				label: "Average session",
				data: mean_legs,
				borderColor: "#1D65A6",
				fill: false
			}
		]
	};

	let leg_global_indicator = round_1_decimal(average_perf(last_legs, mean_legs));
	let pushups = [];
	let pushups_lateral = [];
	let pushups_jumping = [];
	let pushups_close = [];
	let raised_pushups = [];

	data_raw.forEach(x => {
		pushups.push(push_series(x, "Push-Ups"));
		pushups_lateral.push(push_series(x, "Lateral Push-Ups"));
		pushups_jumping.push(push_series(x, "Jumping Push-Ups"));
		pushups_close.push(push_series(x, "Close Push-Ups"));
		raised_pushups.push(push_series(x, "Raised Push-Ups"));
	});

	let last_pushups = [
		last_element(pushups),
		last_element(pushups_lateral),
		last_element(pushups_jumping),
		last_element(pushups_close),
		last_element(raised_pushups)
	];

	let mean_pushups = [
		mean_list_notnull(pushups),
		mean_list_notnull(pushups_lateral),
		mean_list_notnull(pushups_jumping),
		mean_list_notnull(pushups_close),
		mean_list_notnull(raised_pushups)
	];

	const data_pushups_radar = {
		labels: group_list["Push-Ups"],
		datasets: [
			{
				label: "Last session",
				data: last_pushups,
				borderColor: "#192E5B",
				fill: false
			},
			{
				label: "Average session",
				data: mean_pushups,
				borderColor: "#1D65A6",
				fill: false
			}
		]
	};

	let pushups_global_indicator = round_1_decimal(average_perf(last_pushups, mean_pushups));
	let abdominal = [];
	let abdominal_lateral = [];
	let abdominal_core = [];

	data_raw.forEach(x => {
		abdominal.push(push_series(x, "Abdominal"));
		abdominal_lateral.push(push_series(x, "Abdominal Lateral"));
		abdominal_core.push(push_series(x, "Core Abdominal"));
	});

	let last_abdominal = [
		last_element(abdominal),
		last_element(abdominal_lateral),
		last_element(abdominal_core)
	];

	let mean_abdominal = [
		mean_list_notnull(abdominal),
		mean_list_notnull(abdominal_lateral),
		mean_list_notnull(abdominal_core)
	];

	const data_abdominal_radar = {
		labels: group_list["Abdominals"],
		datasets: [
			{
				label: "Last session",
				data: last_abdominal,
				borderColor: "#192E5B",
				fill: false
			},
			{
				label: "Average session",
				data: mean_abdominal,
				borderColor: "#1D65A6",
				fill: false
			}
		]
	};

	let abdominal_global_indicator = round_1_decimal(average_perf(last_abdominal, mean_abdominal));

	// Others : 
	//['Bench', 'Biceps Weight', 'Pull-Ups']
	let bench = [];

	let biceps_weight = [];
	let pullups = [];

	data_raw.forEach(x => {
		bench.push(push_series(x, "Bench"));
		biceps_weight.push(push_series(x, "Biceps Weight"));
		pullups.push(push_series(x, "Pull-Ups"));
	});

	let last_others = [last_element(bench), last_element(biceps_weight), last_element(pullups)];

	let mean_others = [
		mean_list_notnull(bench),
		mean_list_notnull(biceps_weight),
		mean_list_notnull(pullups)
	];

	const data_others_radar = {
		labels: group_list["Others"],
		datasets: [
			{
				label: "Last session",
				data: last_others,
				borderColor: "#192E5B",
				fill: false
			},
			{
				label: "Average session",
				data: mean_others,
				borderColor: "#1D65A6",
				fill: false
			}
		]
	};

	let others_global_indicator = round_1_decimal(average_perf(last_others, mean_others));
	const writable_props = ["data_raw"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Workout> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Workout", $$slots, []);

	$$self.$set = $$props => {
		if ("data_raw" in $$props) $$invalidate(10, data_raw = $$props.data_raw);
	};

	$$self.$capture_state = () => ({
		preload,
		ChartsRadarLeg: Workoutlegs_radar,
		ChartsRadarPushUps: Workoutpushups_radar,
		ChartsRadarAbdominals: Workoutabdo_radar,
		ChartsRadarOthers: Workoutothers_radar,
		data_raw,
		custom_sort,
		data_last5,
		workout_exercise,
		group_list,
		push_series,
		last_element,
		average_perf,
		round_1_decimal,
		mean_list_notnull,
		get_last_nb_sessions,
		squats,
		stair_climbs,
		bench_climbs,
		leg_press,
		list_date,
		last_legs,
		mean_legs,
		data_leg_radar,
		leg_global_indicator,
		pushups,
		pushups_lateral,
		pushups_jumping,
		pushups_close,
		raised_pushups,
		last_pushups,
		mean_pushups,
		data_pushups_radar,
		pushups_global_indicator,
		abdominal,
		abdominal_lateral,
		abdominal_core,
		last_abdominal,
		mean_abdominal,
		data_abdominal_radar,
		abdominal_global_indicator,
		bench,
		biceps_weight,
		pullups,
		last_others,
		mean_others,
		data_others_radar,
		others_global_indicator
	});

	$$self.$inject_state = $$props => {
		if ("data_raw" in $$props) $$invalidate(10, data_raw = $$props.data_raw);
		if ("data_last5" in $$props) $$invalidate(4, data_last5 = $$props.data_last5);
		if ("squats" in $$props) squats = $$props.squats;
		if ("stair_climbs" in $$props) stair_climbs = $$props.stair_climbs;
		if ("bench_climbs" in $$props) bench_climbs = $$props.bench_climbs;
		if ("leg_press" in $$props) leg_press = $$props.leg_press;
		if ("list_date" in $$props) $$invalidate(5, list_date = $$props.list_date);
		if ("last_legs" in $$props) last_legs = $$props.last_legs;
		if ("mean_legs" in $$props) mean_legs = $$props.mean_legs;
		if ("leg_global_indicator" in $$props) $$invalidate(6, leg_global_indicator = $$props.leg_global_indicator);
		if ("pushups" in $$props) pushups = $$props.pushups;
		if ("pushups_lateral" in $$props) pushups_lateral = $$props.pushups_lateral;
		if ("pushups_jumping" in $$props) pushups_jumping = $$props.pushups_jumping;
		if ("pushups_close" in $$props) pushups_close = $$props.pushups_close;
		if ("raised_pushups" in $$props) raised_pushups = $$props.raised_pushups;
		if ("last_pushups" in $$props) last_pushups = $$props.last_pushups;
		if ("mean_pushups" in $$props) mean_pushups = $$props.mean_pushups;
		if ("pushups_global_indicator" in $$props) $$invalidate(7, pushups_global_indicator = $$props.pushups_global_indicator);
		if ("abdominal" in $$props) abdominal = $$props.abdominal;
		if ("abdominal_lateral" in $$props) abdominal_lateral = $$props.abdominal_lateral;
		if ("abdominal_core" in $$props) abdominal_core = $$props.abdominal_core;
		if ("last_abdominal" in $$props) last_abdominal = $$props.last_abdominal;
		if ("mean_abdominal" in $$props) mean_abdominal = $$props.mean_abdominal;
		if ("abdominal_global_indicator" in $$props) $$invalidate(8, abdominal_global_indicator = $$props.abdominal_global_indicator);
		if ("bench" in $$props) bench = $$props.bench;
		if ("biceps_weight" in $$props) biceps_weight = $$props.biceps_weight;
		if ("pullups" in $$props) pullups = $$props.pullups;
		if ("last_others" in $$props) last_others = $$props.last_others;
		if ("mean_others" in $$props) mean_others = $$props.mean_others;
		if ("others_global_indicator" in $$props) $$invalidate(9, others_global_indicator = $$props.others_global_indicator);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		data_leg_radar,
		data_pushups_radar,
		data_abdominal_radar,
		data_others_radar,
		data_last5,
		list_date,
		leg_global_indicator,
		pushups_global_indicator,
		abdominal_global_indicator,
		others_global_indicator,
		data_raw
	];
}

class Workout extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				data_raw: 10,
				data_leg_radar: 0,
				data_pushups_radar: 1,
				data_abdominal_radar: 2,
				data_others_radar: 3
			},
			[-1, -1]
		);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Workout",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*data_raw*/ ctx[10] === undefined && !("data_raw" in props)) {
			console.warn("<Workout> was created without expected prop 'data_raw'");
		}
	}

	get data_raw() {
		throw new Error("<Workout>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set data_raw(value) {
		throw new Error("<Workout>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get data_leg_radar() {
		return this.$$.ctx[0];
	}

	set data_leg_radar(value) {
		throw new Error("<Workout>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get data_pushups_radar() {
		return this.$$.ctx[1];
	}

	set data_pushups_radar(value) {
		throw new Error("<Workout>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get data_abdominal_radar() {
		return this.$$.ctx[2];
	}

	set data_abdominal_radar(value) {
		throw new Error("<Workout>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get data_others_radar() {
		return this.$$.ctx[3];
	}

	set data_others_radar(value) {
		throw new Error("<Workout>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Workout;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
