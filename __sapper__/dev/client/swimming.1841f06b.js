import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, F as validate_each_argument, v as validate_slots, e as element, t as text, f as claim_element, g as children, h as claim_text, b as detach_dev, k as add_location, l as insert_dev, m as append_dev, n as noop, a as space, c as claim_space, j as attr_dev, w as create_component, x as claim_component, y as mount_component, z as transition_in, A as transition_out, G as destroy_each, B as destroy_component } from './client.5013a978.js';
import './_commonjsHelpers.1e235def.js';
import './Chart.b2015135.js';
import Swimming_charts from './swimming-charts.efc083f6.js';

/* src/routes/sports/swimming/swimming.svelte generated by Svelte v3.22.3 */
const file = "src/routes/sports/swimming/swimming.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[31] = list[i];
	child_ctx[33] = i;
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[34] = list[i];
	return child_ctx;
}

// (138:4) {#each get_last_nb_sessions(3, list_date) as date}
function create_each_block_1(ctx) {
	let li;
	let t_value = /*date*/ ctx[34] + "";
	let t;

	const block = {
		c: function create() {
			li = element("li");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", {});
			var li_nodes = children(li);
			t = claim_text(li_nodes, t_value);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(li, file, 138, 4, 3768);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, t);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(138:4) {#each get_last_nb_sessions(3, list_date) as date}",
		ctx
	});

	return block;
}

// (205:12) {#each distance_3_session as distance, i}
function create_each_block(ctx) {
	let tr;
	let td0;
	let t0_value = /*date_3_session*/ ctx[8][/*i*/ ctx[33]] + "";
	let t0;
	let t1;
	let td1;
	let t2_value = /*distance*/ ctx[31] + "";
	let t2;
	let t3;
	let td2;
	let t4_value = /*minutes_3_session*/ ctx[6][/*i*/ ctx[33]] + "";
	let t4;
	let t5;
	let td3;
	let t6_value = /*distance*/ ctx[31] / 1000 / (/*minutes_3_session*/ ctx[6][/*i*/ ctx[33]] / 60) + "";
	let t6;
	let t7;
	let td4;
	let t8_value = /*elevation_3_session*/ ctx[7][/*i*/ ctx[33]] + "";
	let t8;
	let t9;

	const block = {
		c: function create() {
			tr = element("tr");
			td0 = element("td");
			t0 = text(t0_value);
			t1 = space();
			td1 = element("td");
			t2 = text(t2_value);
			t3 = space();
			td2 = element("td");
			t4 = text(t4_value);
			t5 = space();
			td3 = element("td");
			t6 = text(t6_value);
			t7 = space();
			td4 = element("td");
			t8 = text(t8_value);
			t9 = space();
			this.h();
		},
		l: function claim(nodes) {
			tr = claim_element(nodes, "TR", {});
			var tr_nodes = children(tr);
			td0 = claim_element(tr_nodes, "TD", { class: true });
			var td0_nodes = children(td0);
			t0 = claim_text(td0_nodes, t0_value);
			td0_nodes.forEach(detach_dev);
			t1 = claim_space(tr_nodes);
			td1 = claim_element(tr_nodes, "TD", { class: true });
			var td1_nodes = children(td1);
			t2 = claim_text(td1_nodes, t2_value);
			td1_nodes.forEach(detach_dev);
			t3 = claim_space(tr_nodes);
			td2 = claim_element(tr_nodes, "TD", { class: true });
			var td2_nodes = children(td2);
			t4 = claim_text(td2_nodes, t4_value);
			td2_nodes.forEach(detach_dev);
			t5 = claim_space(tr_nodes);
			td3 = claim_element(tr_nodes, "TD", { class: true });
			var td3_nodes = children(td3);
			t6 = claim_text(td3_nodes, t6_value);
			td3_nodes.forEach(detach_dev);
			t7 = claim_space(tr_nodes);
			td4 = claim_element(tr_nodes, "TD", { class: true });
			var td4_nodes = children(td4);
			t8 = claim_text(td4_nodes, t8_value);
			td4_nodes.forEach(detach_dev);
			t9 = claim_space(tr_nodes);
			tr_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(td0, "class", "border px-4 py-2");
			add_location(td0, file, 206, 12, 5977);
			attr_dev(td1, "class", "border px-4 py-2");
			add_location(td1, file, 207, 12, 6043);
			attr_dev(td2, "class", "border px-4 py-2");
			add_location(td2, file, 208, 12, 6100);
			attr_dev(td3, "class", "border px-4 py-2");
			add_location(td3, file, 209, 12, 6169);
			attr_dev(td4, "class", "border px-4 py-2");
			add_location(td4, file, 210, 12, 6262);
			add_location(tr, file, 205, 12, 5960);
		},
		m: function mount(target, anchor) {
			insert_dev(target, tr, anchor);
			append_dev(tr, td0);
			append_dev(td0, t0);
			append_dev(tr, t1);
			append_dev(tr, td1);
			append_dev(td1, t2);
			append_dev(tr, t3);
			append_dev(tr, td2);
			append_dev(td2, t4);
			append_dev(tr, t5);
			append_dev(tr, td3);
			append_dev(td3, t6);
			append_dev(tr, t7);
			append_dev(tr, td4);
			append_dev(td4, t8);
			append_dev(tr, t9);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(tr);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(205:12) {#each distance_3_session as distance, i}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div4;
	let div1;
	let div0;
	let t0;
	let t1;
	let div3;
	let div2;
	let img;
	let img_src_value;
	let t2;
	let div5;
	let t3;
	let lu;
	let t4;
	let div6;
	let table0;
	let thead0;
	let tr0;
	let th0;
	let t5;
	let t6;
	let th1;
	let t7;
	let t8;
	let th2;
	let t9;
	let t10;
	let th3;
	let t11;
	let t12;
	let tbody0;
	let tr1;
	let td0;
	let t13;
	let t14;
	let td1;
	let t15;
	let t16;
	let td2;
	let t17;
	let t18;
	let td3;
	let t19;
	let t20;
	let t21;
	let td4;
	let t22;
	let t23;
	let td5;
	let t24;
	let t25;
	let t26;
	let tr2;
	let td6;
	let t27;
	let t28;
	let td7;
	let t29;
	let t30;
	let td8;
	let t31;
	let t32;
	let td9;
	let t33;
	let t34;
	let t35;
	let td10;
	let t36;
	let t37;
	let td11;
	let t38;
	let t39;
	let t40;
	let tr3;
	let td12;
	let t41;
	let t42;
	let td13;
	let t43;
	let t44;
	let td14;
	let t45;
	let t46;
	let td15;
	let t47;
	let t48;
	let t49;
	let td16;
	let t50;
	let t51;
	let td17;
	let t52;
	let t53;
	let t54;
	let div8;
	let t55;
	let div7;
	let table1;
	let thead1;
	let tr4;
	let th4;
	let t56;
	let t57;
	let th5;
	let t58;
	let t59;
	let th6;
	let t60;
	let t61;
	let th7;
	let t62;
	let t63;
	let th8;
	let t64;
	let t65;
	let tbody1;
	let t66;
	let div9;
	let h3;
	let t67;
	let t68;
	let current;
	let each_value_1 = get_last_nb_sessions(3, /*list_date*/ ctx[1]);
	validate_each_argument(each_value_1);
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	let each_value = /*distance_3_session*/ ctx[5];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const charts = new Swimming_charts({
			props: { data: /*data*/ ctx[0] },
			$$inline: true
		});

	const block = {
		c: function create() {
			div4 = element("div");
			div1 = element("div");
			div0 = element("div");
			t0 = text("swimming Performance");
			t1 = space();
			div3 = element("div");
			div2 = element("div");
			img = element("img");
			t2 = space();
			div5 = element("div");
			t3 = text("Your last sessions took place on: \n    ");
			lu = element("lu");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t4 = space();
			div6 = element("div");
			table0 = element("table");
			thead0 = element("thead");
			tr0 = element("tr");
			th0 = element("th");
			t5 = text("Metrics");
			t6 = space();
			th1 = element("th");
			t7 = text("Value");
			t8 = space();
			th2 = element("th");
			t9 = text("vs. Last 3 sessions");
			t10 = space();
			th3 = element("th");
			t11 = text("vs. Last 10 sessions");
			t12 = space();
			tbody0 = element("tbody");
			tr1 = element("tr");
			td0 = element("td");
			t13 = text("Distance (m)");
			t14 = space();
			td1 = element("td");
			t15 = text(/*last_distance*/ ctx[2]);
			t16 = space();
			td2 = element("td");
			t17 = text(/*average_3_distance*/ ctx[9]);
			t18 = space();
			td3 = element("td");
			t19 = text(/*variation_3_distance*/ ctx[12]);
			t20 = text("%");
			t21 = space();
			td4 = element("td");
			t22 = text(/*average_10_distance*/ ctx[15]);
			t23 = space();
			td5 = element("td");
			t24 = text(/*variation_10_distance*/ ctx[18]);
			t25 = text("%");
			t26 = space();
			tr2 = element("tr");
			td6 = element("td");
			t27 = text("Speed (km/h)");
			t28 = space();
			td7 = element("td");
			t29 = text(/*last_speed*/ ctx[3]);
			t30 = space();
			td8 = element("td");
			t31 = text(/*average_3_speed*/ ctx[11]);
			t32 = space();
			td9 = element("td");
			t33 = text(/*variation_3_speed*/ ctx[13]);
			t34 = text("%");
			t35 = space();
			td10 = element("td");
			t36 = text(/*average_10_speed*/ ctx[17]);
			t37 = space();
			td11 = element("td");
			t38 = text(/*variation_10_speed*/ ctx[19]);
			t39 = text("%");
			t40 = space();
			tr3 = element("tr");
			td12 = element("td");
			t41 = text("Elevation (m)");
			t42 = space();
			td13 = element("td");
			t43 = text(/*last_elevation*/ ctx[4]);
			t44 = space();
			td14 = element("td");
			t45 = text(/*average_3_elevation*/ ctx[10]);
			t46 = space();
			td15 = element("td");
			t47 = text(/*variation_3_elevation*/ ctx[14]);
			t48 = text("%");
			t49 = space();
			td16 = element("td");
			t50 = text(/*average_10_elevation*/ ctx[16]);
			t51 = space();
			td17 = element("td");
			t52 = text(/*variation_10_elevation*/ ctx[20]);
			t53 = text("%");
			t54 = space();
			div8 = element("div");
			t55 = text("Get the data available in table\n\n    ");
			div7 = element("div");
			table1 = element("table");
			thead1 = element("thead");
			tr4 = element("tr");
			th4 = element("th");
			t56 = text("Date");
			t57 = space();
			th5 = element("th");
			t58 = text("Distance (m)");
			t59 = space();
			th6 = element("th");
			t60 = text("Time (min)");
			t61 = space();
			th7 = element("th");
			t62 = text("Speed (km/h)");
			t63 = space();
			th8 = element("th");
			t64 = text("Elevation (m)");
			t65 = space();
			tbody1 = element("tbody");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t66 = space();
			div9 = element("div");
			h3 = element("h3");
			t67 = text("See your evolution in this chart:");
			t68 = space();
			create_component(charts.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div4 = claim_element(nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			div1 = claim_element(div4_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			t0 = claim_text(div0_nodes, "swimming Performance");
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			t1 = claim_space(div4_nodes);
			div3 = claim_element(div4_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			img = claim_element(div2_nodes, "IMG", { src: true, alt: true });
			div2_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			div4_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			div5 = claim_element(nodes, "DIV", { class: true });
			var div5_nodes = children(div5);
			t3 = claim_text(div5_nodes, "Your last sessions took place on: \n    ");
			lu = claim_element(div5_nodes, "LU", {});
			var lu_nodes = children(lu);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].l(lu_nodes);
			}

			lu_nodes.forEach(detach_dev);
			div5_nodes.forEach(detach_dev);
			t4 = claim_space(nodes);
			div6 = claim_element(nodes, "DIV", { class: true });
			var div6_nodes = children(div6);
			table0 = claim_element(div6_nodes, "TABLE", { class: true });
			var table0_nodes = children(table0);
			thead0 = claim_element(table0_nodes, "THEAD", {});
			var thead0_nodes = children(thead0);
			tr0 = claim_element(thead0_nodes, "TR", {});
			var tr0_nodes = children(tr0);
			th0 = claim_element(tr0_nodes, "TH", { class: true });
			var th0_nodes = children(th0);
			t5 = claim_text(th0_nodes, "Metrics");
			th0_nodes.forEach(detach_dev);
			t6 = claim_space(tr0_nodes);
			th1 = claim_element(tr0_nodes, "TH", { class: true });
			var th1_nodes = children(th1);
			t7 = claim_text(th1_nodes, "Value");
			th1_nodes.forEach(detach_dev);
			t8 = claim_space(tr0_nodes);
			th2 = claim_element(tr0_nodes, "TH", { colspan: true, class: true });
			var th2_nodes = children(th2);
			t9 = claim_text(th2_nodes, "vs. Last 3 sessions");
			th2_nodes.forEach(detach_dev);
			t10 = claim_space(tr0_nodes);
			th3 = claim_element(tr0_nodes, "TH", { colspan: true, class: true });
			var th3_nodes = children(th3);
			t11 = claim_text(th3_nodes, "vs. Last 10 sessions");
			th3_nodes.forEach(detach_dev);
			tr0_nodes.forEach(detach_dev);
			thead0_nodes.forEach(detach_dev);
			t12 = claim_space(table0_nodes);
			tbody0 = claim_element(table0_nodes, "TBODY", {});
			var tbody0_nodes = children(tbody0);
			tr1 = claim_element(tbody0_nodes, "TR", {});
			var tr1_nodes = children(tr1);
			td0 = claim_element(tr1_nodes, "TD", { class: true });
			var td0_nodes = children(td0);
			t13 = claim_text(td0_nodes, "Distance (m)");
			td0_nodes.forEach(detach_dev);
			t14 = claim_space(tr1_nodes);
			td1 = claim_element(tr1_nodes, "TD", { class: true });
			var td1_nodes = children(td1);
			t15 = claim_text(td1_nodes, /*last_distance*/ ctx[2]);
			td1_nodes.forEach(detach_dev);
			t16 = claim_space(tr1_nodes);
			td2 = claim_element(tr1_nodes, "TD", { class: true });
			var td2_nodes = children(td2);
			t17 = claim_text(td2_nodes, /*average_3_distance*/ ctx[9]);
			td2_nodes.forEach(detach_dev);
			t18 = claim_space(tr1_nodes);
			td3 = claim_element(tr1_nodes, "TD", { class: true });
			var td3_nodes = children(td3);
			t19 = claim_text(td3_nodes, /*variation_3_distance*/ ctx[12]);
			t20 = claim_text(td3_nodes, "%");
			td3_nodes.forEach(detach_dev);
			t21 = claim_space(tr1_nodes);
			td4 = claim_element(tr1_nodes, "TD", { class: true });
			var td4_nodes = children(td4);
			t22 = claim_text(td4_nodes, /*average_10_distance*/ ctx[15]);
			td4_nodes.forEach(detach_dev);
			t23 = claim_space(tr1_nodes);
			td5 = claim_element(tr1_nodes, "TD", { class: true });
			var td5_nodes = children(td5);
			t24 = claim_text(td5_nodes, /*variation_10_distance*/ ctx[18]);
			t25 = claim_text(td5_nodes, "%");
			td5_nodes.forEach(detach_dev);
			tr1_nodes.forEach(detach_dev);
			t26 = claim_space(tbody0_nodes);
			tr2 = claim_element(tbody0_nodes, "TR", { class: true });
			var tr2_nodes = children(tr2);
			td6 = claim_element(tr2_nodes, "TD", { class: true });
			var td6_nodes = children(td6);
			t27 = claim_text(td6_nodes, "Speed (km/h)");
			td6_nodes.forEach(detach_dev);
			t28 = claim_space(tr2_nodes);
			td7 = claim_element(tr2_nodes, "TD", { class: true });
			var td7_nodes = children(td7);
			t29 = claim_text(td7_nodes, /*last_speed*/ ctx[3]);
			td7_nodes.forEach(detach_dev);
			t30 = claim_space(tr2_nodes);
			td8 = claim_element(tr2_nodes, "TD", { class: true });
			var td8_nodes = children(td8);
			t31 = claim_text(td8_nodes, /*average_3_speed*/ ctx[11]);
			td8_nodes.forEach(detach_dev);
			t32 = claim_space(tr2_nodes);
			td9 = claim_element(tr2_nodes, "TD", { class: true });
			var td9_nodes = children(td9);
			t33 = claim_text(td9_nodes, /*variation_3_speed*/ ctx[13]);
			t34 = claim_text(td9_nodes, "%");
			td9_nodes.forEach(detach_dev);
			t35 = claim_space(tr2_nodes);
			td10 = claim_element(tr2_nodes, "TD", { class: true });
			var td10_nodes = children(td10);
			t36 = claim_text(td10_nodes, /*average_10_speed*/ ctx[17]);
			td10_nodes.forEach(detach_dev);
			t37 = claim_space(tr2_nodes);
			td11 = claim_element(tr2_nodes, "TD", { class: true });
			var td11_nodes = children(td11);
			t38 = claim_text(td11_nodes, /*variation_10_speed*/ ctx[19]);
			t39 = claim_text(td11_nodes, "%");
			td11_nodes.forEach(detach_dev);
			tr2_nodes.forEach(detach_dev);
			t40 = claim_space(tbody0_nodes);
			tr3 = claim_element(tbody0_nodes, "TR", {});
			var tr3_nodes = children(tr3);
			td12 = claim_element(tr3_nodes, "TD", { class: true });
			var td12_nodes = children(td12);
			t41 = claim_text(td12_nodes, "Elevation (m)");
			td12_nodes.forEach(detach_dev);
			t42 = claim_space(tr3_nodes);
			td13 = claim_element(tr3_nodes, "TD", { class: true });
			var td13_nodes = children(td13);
			t43 = claim_text(td13_nodes, /*last_elevation*/ ctx[4]);
			td13_nodes.forEach(detach_dev);
			t44 = claim_space(tr3_nodes);
			td14 = claim_element(tr3_nodes, "TD", { class: true });
			var td14_nodes = children(td14);
			t45 = claim_text(td14_nodes, /*average_3_elevation*/ ctx[10]);
			td14_nodes.forEach(detach_dev);
			t46 = claim_space(tr3_nodes);
			td15 = claim_element(tr3_nodes, "TD", { class: true });
			var td15_nodes = children(td15);
			t47 = claim_text(td15_nodes, /*variation_3_elevation*/ ctx[14]);
			t48 = claim_text(td15_nodes, "%");
			td15_nodes.forEach(detach_dev);
			t49 = claim_space(tr3_nodes);
			td16 = claim_element(tr3_nodes, "TD", { class: true });
			var td16_nodes = children(td16);
			t50 = claim_text(td16_nodes, /*average_10_elevation*/ ctx[16]);
			td16_nodes.forEach(detach_dev);
			t51 = claim_space(tr3_nodes);
			td17 = claim_element(tr3_nodes, "TD", { class: true });
			var td17_nodes = children(td17);
			t52 = claim_text(td17_nodes, /*variation_10_elevation*/ ctx[20]);
			t53 = claim_text(td17_nodes, "%");
			td17_nodes.forEach(detach_dev);
			tr3_nodes.forEach(detach_dev);
			tbody0_nodes.forEach(detach_dev);
			table0_nodes.forEach(detach_dev);
			div6_nodes.forEach(detach_dev);
			t54 = claim_space(nodes);
			div8 = claim_element(nodes, "DIV", { class: true });
			var div8_nodes = children(div8);
			t55 = claim_text(div8_nodes, "Get the data available in table\n\n    ");
			div7 = claim_element(div8_nodes, "DIV", { class: true });
			var div7_nodes = children(div7);
			table1 = claim_element(div7_nodes, "TABLE", { class: true });
			var table1_nodes = children(table1);
			thead1 = claim_element(table1_nodes, "THEAD", {});
			var thead1_nodes = children(thead1);
			tr4 = claim_element(thead1_nodes, "TR", {});
			var tr4_nodes = children(tr4);
			th4 = claim_element(tr4_nodes, "TH", { class: true });
			var th4_nodes = children(th4);
			t56 = claim_text(th4_nodes, "Date");
			th4_nodes.forEach(detach_dev);
			t57 = claim_space(tr4_nodes);
			th5 = claim_element(tr4_nodes, "TH", { class: true });
			var th5_nodes = children(th5);
			t58 = claim_text(th5_nodes, "Distance (m)");
			th5_nodes.forEach(detach_dev);
			t59 = claim_space(tr4_nodes);
			th6 = claim_element(tr4_nodes, "TH", { class: true });
			var th6_nodes = children(th6);
			t60 = claim_text(th6_nodes, "Time (min)");
			th6_nodes.forEach(detach_dev);
			t61 = claim_space(tr4_nodes);
			th7 = claim_element(tr4_nodes, "TH", { class: true });
			var th7_nodes = children(th7);
			t62 = claim_text(th7_nodes, "Speed (km/h)");
			th7_nodes.forEach(detach_dev);
			t63 = claim_space(tr4_nodes);
			th8 = claim_element(tr4_nodes, "TH", { class: true });
			var th8_nodes = children(th8);
			t64 = claim_text(th8_nodes, "Elevation (m)");
			th8_nodes.forEach(detach_dev);
			tr4_nodes.forEach(detach_dev);
			thead1_nodes.forEach(detach_dev);
			t65 = claim_space(table1_nodes);
			tbody1 = claim_element(table1_nodes, "TBODY", {});
			var tbody1_nodes = children(tbody1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(tbody1_nodes);
			}

			tbody1_nodes.forEach(detach_dev);
			table1_nodes.forEach(detach_dev);
			div7_nodes.forEach(detach_dev);
			div8_nodes.forEach(detach_dev);
			t66 = claim_space(nodes);
			div9 = claim_element(nodes, "DIV", { class: true });
			var div9_nodes = children(div9);
			h3 = claim_element(div9_nodes, "H3", {});
			var h3_nodes = children(h3);
			t67 = claim_text(h3_nodes, "See your evolution in this chart:");
			h3_nodes.forEach(detach_dev);
			t68 = claim_space(div9_nodes);
			claim_component(charts.$$.fragment, div9_nodes);
			div9_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "text-center p-2 text-2xl font-semibold bg-gray-100");
			add_location(div0, file, 122, 4, 3389);
			attr_dev(div1, "class", "flex-initial w-2/3 p-2");
			add_location(div1, file, 121, 2, 3348);
			if (img.src !== (img_src_value = "swimming.jpg")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "swimming");
			add_location(img, file, 128, 4, 3576);
			attr_dev(div2, "class", " text-right p-2");
			add_location(div2, file, 127, 4, 3542);
			attr_dev(div3, "class", "flex-initial w-1/3 p-2");
			add_location(div3, file, 126, 2, 3501);
			attr_dev(div4, "class", "flex h-48");
			add_location(div4, file, 120, 0, 3322);
			add_location(lu, file, 136, 4, 3704);
			attr_dev(div5, "class", "px-10");
			add_location(div5, file, 134, 0, 3645);
			attr_dev(th0, "class", "px-4 py-2");
			add_location(th0, file, 148, 8, 3911);
			attr_dev(th1, "class", "px-4 py-2");
			add_location(th1, file, 149, 8, 3954);
			attr_dev(th2, "colspan", "2");
			attr_dev(th2, "class", "px-4 py-2 ");
			add_location(th2, file, 150, 8, 3995);
			attr_dev(th3, "colspan", "2");
			attr_dev(th3, "class", "px-4 py-2");
			add_location(th3, file, 151, 8, 4061);
			add_location(tr0, file, 147, 8, 3898);
			add_location(thead0, file, 146, 4, 3882);
			attr_dev(td0, "class", "border px-4 py-2");
			add_location(td0, file, 156, 8, 4179);
			attr_dev(td1, "class", "border px-4 py-2");
			add_location(td1, file, 157, 8, 4234);
			attr_dev(td2, "class", "border px-4 py-2");
			add_location(td2, file, 158, 8, 4292);
			attr_dev(td3, "class", "border px-4 py-2");
			add_location(td3, file, 159, 8, 4355);
			attr_dev(td4, "class", "border px-4 py-2");
			add_location(td4, file, 160, 8, 4421);
			attr_dev(td5, "class", "border px-4 py-2");
			add_location(td5, file, 161, 8, 4485);
			add_location(tr1, file, 155, 8, 4166);
			attr_dev(td6, "class", "border px-4 py-2");
			add_location(td6, file, 164, 8, 4599);
			attr_dev(td7, "class", "border px-4 py-2");
			add_location(td7, file, 165, 8, 4654);
			attr_dev(td8, "class", "border px-4 py-2");
			add_location(td8, file, 166, 8, 4709);
			attr_dev(td9, "class", "border px-4 py-2");
			add_location(td9, file, 167, 8, 4769);
			attr_dev(td10, "class", "border px-4 py-2");
			add_location(td10, file, 168, 8, 4832);
			attr_dev(td11, "class", "border px-4 py-2");
			add_location(td11, file, 169, 8, 4893);
			attr_dev(tr2, "class", "bg-gray-100");
			add_location(tr2, file, 163, 8, 4566);
			attr_dev(td12, "class", "border px-4 py-2");
			add_location(td12, file, 172, 8, 4984);
			attr_dev(td13, "class", "border px-4 py-2");
			add_location(td13, file, 173, 8, 5040);
			attr_dev(td14, "class", "border px-4 py-2");
			add_location(td14, file, 174, 8, 5099);
			attr_dev(td15, "class", "border px-4 py-2");
			add_location(td15, file, 175, 8, 5163);
			attr_dev(td16, "class", "border px-4 py-2");
			add_location(td16, file, 176, 8, 5230);
			attr_dev(td17, "class", "border px-4 py-2");
			add_location(td17, file, 177, 8, 5295);
			add_location(tr3, file, 171, 8, 4971);
			add_location(tbody0, file, 154, 4, 4150);
			attr_dev(table0, "class", "table-auto text-center ");
			add_location(table0, file, 145, 4, 3838);
			attr_dev(div6, "class", "p-10");
			add_location(div6, file, 144, 0, 3815);
			attr_dev(th4, "class", "px-4 py-2");
			add_location(th4, file, 193, 12, 5581);
			attr_dev(th5, "class", "px-4 py-2");
			add_location(th5, file, 194, 12, 5625);
			attr_dev(th6, "class", "px-4 py-2");
			add_location(th6, file, 195, 12, 5677);
			attr_dev(th7, "class", "px-4 py-2");
			add_location(th7, file, 196, 12, 5727);
			attr_dev(th8, "class", "px-4 py-2");
			add_location(th8, file, 197, 12, 5779);
			add_location(tr4, file, 192, 12, 5564);
			add_location(thead1, file, 191, 8, 5544);
			add_location(tbody1, file, 202, 8, 5877);
			attr_dev(table1, "class", "table-auto text-center ");
			add_location(table1, file, 190, 8, 5496);
			attr_dev(div7, "class", "py-5");
			add_location(div7, file, 189, 4, 5469);
			attr_dev(div8, "class", "px-10 py-5");
			add_location(div8, file, 186, 0, 5407);
			add_location(h3, file, 224, 1, 6455);
			attr_dev(div9, "class", "px-10 py-5");
			add_location(div9, file, 223, 0, 6429);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div4, anchor);
			append_dev(div4, div1);
			append_dev(div1, div0);
			append_dev(div0, t0);
			append_dev(div4, t1);
			append_dev(div4, div3);
			append_dev(div3, div2);
			append_dev(div2, img);
			insert_dev(target, t2, anchor);
			insert_dev(target, div5, anchor);
			append_dev(div5, t3);
			append_dev(div5, lu);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(lu, null);
			}

			insert_dev(target, t4, anchor);
			insert_dev(target, div6, anchor);
			append_dev(div6, table0);
			append_dev(table0, thead0);
			append_dev(thead0, tr0);
			append_dev(tr0, th0);
			append_dev(th0, t5);
			append_dev(tr0, t6);
			append_dev(tr0, th1);
			append_dev(th1, t7);
			append_dev(tr0, t8);
			append_dev(tr0, th2);
			append_dev(th2, t9);
			append_dev(tr0, t10);
			append_dev(tr0, th3);
			append_dev(th3, t11);
			append_dev(table0, t12);
			append_dev(table0, tbody0);
			append_dev(tbody0, tr1);
			append_dev(tr1, td0);
			append_dev(td0, t13);
			append_dev(tr1, t14);
			append_dev(tr1, td1);
			append_dev(td1, t15);
			append_dev(tr1, t16);
			append_dev(tr1, td2);
			append_dev(td2, t17);
			append_dev(tr1, t18);
			append_dev(tr1, td3);
			append_dev(td3, t19);
			append_dev(td3, t20);
			append_dev(tr1, t21);
			append_dev(tr1, td4);
			append_dev(td4, t22);
			append_dev(tr1, t23);
			append_dev(tr1, td5);
			append_dev(td5, t24);
			append_dev(td5, t25);
			append_dev(tbody0, t26);
			append_dev(tbody0, tr2);
			append_dev(tr2, td6);
			append_dev(td6, t27);
			append_dev(tr2, t28);
			append_dev(tr2, td7);
			append_dev(td7, t29);
			append_dev(tr2, t30);
			append_dev(tr2, td8);
			append_dev(td8, t31);
			append_dev(tr2, t32);
			append_dev(tr2, td9);
			append_dev(td9, t33);
			append_dev(td9, t34);
			append_dev(tr2, t35);
			append_dev(tr2, td10);
			append_dev(td10, t36);
			append_dev(tr2, t37);
			append_dev(tr2, td11);
			append_dev(td11, t38);
			append_dev(td11, t39);
			append_dev(tbody0, t40);
			append_dev(tbody0, tr3);
			append_dev(tr3, td12);
			append_dev(td12, t41);
			append_dev(tr3, t42);
			append_dev(tr3, td13);
			append_dev(td13, t43);
			append_dev(tr3, t44);
			append_dev(tr3, td14);
			append_dev(td14, t45);
			append_dev(tr3, t46);
			append_dev(tr3, td15);
			append_dev(td15, t47);
			append_dev(td15, t48);
			append_dev(tr3, t49);
			append_dev(tr3, td16);
			append_dev(td16, t50);
			append_dev(tr3, t51);
			append_dev(tr3, td17);
			append_dev(td17, t52);
			append_dev(td17, t53);
			insert_dev(target, t54, anchor);
			insert_dev(target, div8, anchor);
			append_dev(div8, t55);
			append_dev(div8, div7);
			append_dev(div7, table1);
			append_dev(table1, thead1);
			append_dev(thead1, tr4);
			append_dev(tr4, th4);
			append_dev(th4, t56);
			append_dev(tr4, t57);
			append_dev(tr4, th5);
			append_dev(th5, t58);
			append_dev(tr4, t59);
			append_dev(tr4, th6);
			append_dev(th6, t60);
			append_dev(tr4, t61);
			append_dev(tr4, th7);
			append_dev(th7, t62);
			append_dev(tr4, t63);
			append_dev(tr4, th8);
			append_dev(th8, t64);
			append_dev(table1, t65);
			append_dev(table1, tbody1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(tbody1, null);
			}

			insert_dev(target, t66, anchor);
			insert_dev(target, div9, anchor);
			append_dev(div9, h3);
			append_dev(h3, t67);
			append_dev(div9, t68);
			mount_component(charts, div9, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*list_date*/ 2) {
				each_value_1 = get_last_nb_sessions(3, /*list_date*/ ctx[1]);
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
					} else {
						each_blocks_1[i] = create_each_block_1(child_ctx);
						each_blocks_1[i].c();
						each_blocks_1[i].m(lu, null);
					}
				}

				for (; i < each_blocks_1.length; i += 1) {
					each_blocks_1[i].d(1);
				}

				each_blocks_1.length = each_value_1.length;
			}

			if (dirty[0] & /*elevation_3_session, distance_3_session, minutes_3_session, date_3_session*/ 480) {
				each_value = /*distance_3_session*/ ctx[5];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(tbody1, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(charts.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(charts.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div4);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(div5);
			destroy_each(each_blocks_1, detaching);
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(div6);
			if (detaching) detach_dev(t54);
			if (detaching) detach_dev(div8);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(t66);
			if (detaching) detach_dev(div9);
			destroy_component(charts);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function preload({ params, query }) {
	return this.fetch(`sports/swimming.json`).then(r => r.json()).then(data_raw => {
		return { data_raw };
	});
}

const nb_displayed = 3;

// TODO: right now including last session, probably should not
// TODO: colors green or red for variations
function get_last_nb_sessions(int, list) {
	return list.slice(Math.max(list.length - int, 0));
}

function dividevector(a, b) {
	return a.map((e, i) => e / b[i]);
}

function variation(x_new, x_old) {
	const variation = Math.round((x_new - x_old) / x_old * 100);
	return variation;
}

function instance($$self, $$props, $$invalidate) {
	let { data_raw } = $$props;

	// Compute data for charts
	let list_meters = [];

	let list_date = [];
	let list_elevation = [];
	let list_minutes = [];
	let list_sprints = [];

	data_raw.forEach(x => {
		list_meters.push(x.meters);
		list_date.push(x.date);
		list_elevation.push(x.elevation);
		list_minutes.push(x.minutes);
	});

	const data = {
		labels: list_date,
		datasets: [
			{
				label: "Meters covered",
				yAxisID: "Meters covered",
				data: list_meters,
				borderColor: "#3e95cd",
				fill: false
			},
			{
				label: "elevation",
				data: list_elevation,
				yAxisID: "elevation",
				borderColor: "#8e5ea2",
				fill: false
			}
		]
	};

	// TODO: verifiy ordering of dates and sessions
	const average = arr => arr.reduce((p, c) => p + c, 0) / arr.length;

	// Compute average distance, speed, elevation, 
	// Last session
	const last_distance = list_meters[list_meters.length - 1];

	const last_hours = list_minutes[list_minutes.length - 1] / 60;
	const last_speed = last_distance / 1000 / last_hours;
	const last_elevation = list_elevation[list_elevation.length - 1];

	// Last 3 sessions
	//const distance_3_session = list_meters.slice(Math.max(list_meters.length - 3, 0))
	const distance_3_session = get_last_nb_sessions(3, list_meters);

	const minutes_3_session = get_last_nb_sessions(3, list_minutes);
	const elevation_3_session = get_last_nb_sessions(3, list_elevation);
	const date_3_session = get_last_nb_sessions(3, list_date);
	const average_3_distance = average(distance_3_session);
	const average_3_elevation = average(elevation_3_session);
	const average_3_speed = average(dividevector(distance_3_session, minutes_3_session)) * 60 / 1000;
	const variation_3_distance = variation(last_distance, average_3_distance);
	const variation_3_speed = variation(last_speed, average_3_speed);
	const variation_3_elevation = variation(last_elevation, average_3_elevation);

	// Last 10 sessions
	const distance_10_session = get_last_nb_sessions(10, list_meters);

	const minutes_10_session = get_last_nb_sessions(10, list_minutes);
	const elevation_10_session = get_last_nb_sessions(10, list_elevation);
	const average_10_distance = average(distance_10_session);
	const average_10_elevation = average(elevation_10_session);
	const average_10_speed = average(dividevector(distance_10_session, minutes_10_session)) * 60 / 1000;
	const variation_10_distance = variation(last_distance, average_10_distance);
	const variation_10_speed = variation(last_speed, average_10_speed);
	const variation_10_elevation = variation(last_elevation, average_10_elevation);
	const writable_props = ["data_raw"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Swimming> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Swimming", $$slots, []);

	$$self.$set = $$props => {
		if ("data_raw" in $$props) $$invalidate(21, data_raw = $$props.data_raw);
	};

	$$self.$capture_state = () => ({
		preload,
		Charts: Swimming_charts,
		data_raw,
		list_meters,
		list_date,
		list_elevation,
		list_minutes,
		list_sprints,
		data,
		average,
		get_last_nb_sessions,
		dividevector,
		variation,
		last_distance,
		last_hours,
		last_speed,
		last_elevation,
		distance_3_session,
		minutes_3_session,
		elevation_3_session,
		date_3_session,
		average_3_distance,
		average_3_elevation,
		average_3_speed,
		variation_3_distance,
		variation_3_speed,
		variation_3_elevation,
		distance_10_session,
		minutes_10_session,
		elevation_10_session,
		average_10_distance,
		average_10_elevation,
		average_10_speed,
		variation_10_distance,
		variation_10_speed,
		variation_10_elevation,
		nb_displayed
	});

	$$self.$inject_state = $$props => {
		if ("data_raw" in $$props) $$invalidate(21, data_raw = $$props.data_raw);
		if ("list_meters" in $$props) list_meters = $$props.list_meters;
		if ("list_date" in $$props) $$invalidate(1, list_date = $$props.list_date);
		if ("list_elevation" in $$props) list_elevation = $$props.list_elevation;
		if ("list_minutes" in $$props) list_minutes = $$props.list_minutes;
		if ("list_sprints" in $$props) list_sprints = $$props.list_sprints;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		data,
		list_date,
		last_distance,
		last_speed,
		last_elevation,
		distance_3_session,
		minutes_3_session,
		elevation_3_session,
		date_3_session,
		average_3_distance,
		average_3_elevation,
		average_3_speed,
		variation_3_distance,
		variation_3_speed,
		variation_3_elevation,
		average_10_distance,
		average_10_elevation,
		average_10_speed,
		variation_10_distance,
		variation_10_speed,
		variation_10_elevation,
		data_raw
	];
}

class Swimming extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { data_raw: 21, data: 0 }, [-1, -1]);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Swimming",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*data_raw*/ ctx[21] === undefined && !("data_raw" in props)) {
			console.warn("<Swimming> was created without expected prop 'data_raw'");
		}
	}

	get data_raw() {
		throw new Error("<Swimming>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set data_raw(value) {
		throw new Error("<Swimming>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get data() {
		return this.$$.ctx[0];
	}

	set data(value) {
		throw new Error("<Swimming>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Swimming;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
