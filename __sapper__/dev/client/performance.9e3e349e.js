import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, v as validate_slots, w as create_component, a as space, e as element, t as text, x as claim_component, c as claim_space, f as claim_element, g as children, h as claim_text, b as detach_dev, j as attr_dev, k as add_location, y as mount_component, l as insert_dev, m as append_dev, z as transition_in, A as transition_out, B as destroy_component } from './client.d3f16ceb.js';
import Box from './Box.8b66b341.js';

/* src/routes/performance.svelte generated by Svelte v3.22.3 */
const file = "src/routes/performance.svelte";

// (6:0) <Box>
function create_default_slot(ctx) {
	let a;
	let t;

	const block = {
		c: function create() {
			a = element("a");
			t = text("Cycling");
			this.h();
		},
		l: function claim(nodes) {
			a = claim_element(nodes, "A", { href: true });
			var a_nodes = children(a);
			t = claim_text(a_nodes, "Cycling");
			a_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a, "href", "sports/cycling/cycling");
			add_location(a, file, 6, 1, 61);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			append_dev(a, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(6:0) <Box>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let ul;
	let li0;
	let a0;
	let t1;
	let t2;
	let li1;
	let a1;
	let t3;
	let t4;
	let li2;
	let a2;
	let t5;
	let current;

	const box = new Box({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(box.$$.fragment);
			t0 = space();
			ul = element("ul");
			li0 = element("li");
			a0 = element("a");
			t1 = text("Cycling");
			t2 = space();
			li1 = element("li");
			a1 = element("a");
			t3 = text("Running");
			t4 = space();
			li2 = element("li");
			a2 = element("a");
			t5 = text("Work-out");
			this.h();
		},
		l: function claim(nodes) {
			claim_component(box.$$.fragment, nodes);
			t0 = claim_space(nodes);
			ul = claim_element(nodes, "UL", {});
			var ul_nodes = children(ul);
			li0 = claim_element(ul_nodes, "LI", { class: true });
			var li0_nodes = children(li0);
			a0 = claim_element(li0_nodes, "A", { href: true });
			var a0_nodes = children(a0);
			t1 = claim_text(a0_nodes, "Cycling");
			a0_nodes.forEach(detach_dev);
			li0_nodes.forEach(detach_dev);
			t2 = claim_space(ul_nodes);
			li1 = claim_element(ul_nodes, "LI", {});
			var li1_nodes = children(li1);
			a1 = claim_element(li1_nodes, "A", { href: true });
			var a1_nodes = children(a1);
			t3 = claim_text(a1_nodes, "Running");
			a1_nodes.forEach(detach_dev);
			li1_nodes.forEach(detach_dev);
			t4 = claim_space(ul_nodes);
			li2 = claim_element(ul_nodes, "LI", {});
			var li2_nodes = children(li2);
			a2 = claim_element(li2_nodes, "A", { href: true });
			var a2_nodes = children(a2);
			t5 = claim_text(a2_nodes, "Work-out");
			a2_nodes.forEach(detach_dev);
			li2_nodes.forEach(detach_dev);
			ul_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a0, "href", "sports/cycling/cycling");
			add_location(a0, file, 12, 26, 147);
			attr_dev(li0, "class", "bg-blue-100");
			add_location(li0, file, 12, 2, 123);
			attr_dev(a1, "href", "sports/running/running");
			add_location(a1, file, 14, 6, 212);
			add_location(li1, file, 14, 2, 208);
			attr_dev(a2, "href", "sports/workout/workout");
			add_location(a2, file, 16, 12, 277);
			add_location(li2, file, 16, 8, 273);
			add_location(ul, file, 10, 0, 115);
		},
		m: function mount(target, anchor) {
			mount_component(box, target, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, ul, anchor);
			append_dev(ul, li0);
			append_dev(li0, a0);
			append_dev(a0, t1);
			append_dev(ul, t2);
			append_dev(ul, li1);
			append_dev(li1, a1);
			append_dev(a1, t3);
			append_dev(ul, t4);
			append_dev(ul, li2);
			append_dev(li2, a2);
			append_dev(a2, t5);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const box_changes = {};

			if (dirty & /*$$scope*/ 1) {
				box_changes.$$scope = { dirty, ctx };
			}

			box.$set(box_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(box.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(box.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(box, detaching);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(ul);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Performance> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Performance", $$slots, []);
	$$self.$capture_state = () => ({ Box });
	return [];
}

class Performance extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Performance",
			options,
			id: create_fragment.name
		});
	}
}

export default Performance;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVyZm9ybWFuY2UuOWUzZTM0OWUuanMiLCJzb3VyY2VzIjpbXSwic291cmNlc0NvbnRlbnQiOltdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=
