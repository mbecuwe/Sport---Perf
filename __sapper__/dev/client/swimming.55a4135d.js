import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, v as validate_each_argument, a as validate_slots, e as element, t as text, c as claim_element, f as children, j as claim_text, g as detach_dev, k as attr_dev, l as add_location, m as insert_dev, n as append_dev, o as noop, b as space, h as claim_space, G as create_component, H as claim_component, I as toggle_class, J as mount_component, D as transition_in, E as transition_out, p as destroy_each, K as destroy_component } from './client.9962ea37.js';
import './moment.98d1f4f0.js';
import './Chart.d62ec9f6.js';
import Swimming_charts from './swimming-charts.109e3a90.js';

/* src/routes/sports/swimming/swimming.svelte generated by Svelte v3.22.3 */
const file = "src/routes/sports/swimming/swimming.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[31] = list[i];
	child_ctx[33] = i;
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[34] = list[i];
	return child_ctx;
}

// (164:12) {#each get_last_nb_sessions(3, list_date) as date}
function create_each_block_1(ctx) {
	let div;
	let t_value = /*date*/ ctx[34] + "";
	let t;

	const block = {
		c: function create() {
			div = element("div");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t = claim_text(div_nodes, t_value);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "text-center");
			add_location(div, file, 164, 12, 4617);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(164:12) {#each get_last_nb_sessions(3, list_date) as date}",
		ctx
	});

	return block;
}

// (231:16) {#each distance_3_session as distance, i}
function create_each_block(ctx) {
	let tr;
	let td0;
	let t0_value = /*date_3_session*/ ctx[8][/*i*/ ctx[33]] + "";
	let t0;
	let t1;
	let td1;
	let t2_value = /*distance*/ ctx[31] + "";
	let t2;
	let t3;
	let td2;
	let t4_value = /*minutes_3_session*/ ctx[6][/*i*/ ctx[33]] + "";
	let t4;
	let t5;
	let td3;
	let t6_value = round_2_decimal(/*distance*/ ctx[31] / 1000 / (/*minutes_3_session*/ ctx[6][/*i*/ ctx[33]] / 60)) + "";
	let t6;
	let t7;
	let td4;
	let t8_value = /*sprint_3_session*/ ctx[7][/*i*/ ctx[33]] + "";
	let t8;
	let t9;

	const block = {
		c: function create() {
			tr = element("tr");
			td0 = element("td");
			t0 = text(t0_value);
			t1 = space();
			td1 = element("td");
			t2 = text(t2_value);
			t3 = space();
			td2 = element("td");
			t4 = text(t4_value);
			t5 = space();
			td3 = element("td");
			t6 = text(t6_value);
			t7 = space();
			td4 = element("td");
			t8 = text(t8_value);
			t9 = space();
			this.h();
		},
		l: function claim(nodes) {
			tr = claim_element(nodes, "TR", {});
			var tr_nodes = children(tr);
			td0 = claim_element(tr_nodes, "TD", { class: true });
			var td0_nodes = children(td0);
			t0 = claim_text(td0_nodes, t0_value);
			td0_nodes.forEach(detach_dev);
			t1 = claim_space(tr_nodes);
			td1 = claim_element(tr_nodes, "TD", { class: true });
			var td1_nodes = children(td1);
			t2 = claim_text(td1_nodes, t2_value);
			td1_nodes.forEach(detach_dev);
			t3 = claim_space(tr_nodes);
			td2 = claim_element(tr_nodes, "TD", { class: true });
			var td2_nodes = children(td2);
			t4 = claim_text(td2_nodes, t4_value);
			td2_nodes.forEach(detach_dev);
			t5 = claim_space(tr_nodes);
			td3 = claim_element(tr_nodes, "TD", { class: true });
			var td3_nodes = children(td3);
			t6 = claim_text(td3_nodes, t6_value);
			td3_nodes.forEach(detach_dev);
			t7 = claim_space(tr_nodes);
			td4 = claim_element(tr_nodes, "TD", { class: true });
			var td4_nodes = children(td4);
			t8 = claim_text(td4_nodes, t8_value);
			td4_nodes.forEach(detach_dev);
			t9 = claim_space(tr_nodes);
			tr_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(td0, "class", "border px-4 py-2");
			add_location(td0, file, 232, 16, 8280);
			attr_dev(td1, "class", "border px-4 py-2");
			add_location(td1, file, 233, 16, 8350);
			attr_dev(td2, "class", "border px-4 py-2");
			add_location(td2, file, 234, 16, 8411);
			attr_dev(td3, "class", "border px-4 py-2");
			add_location(td3, file, 235, 16, 8484);
			attr_dev(td4, "class", "border px-4 py-2");
			add_location(td4, file, 236, 16, 8598);
			add_location(tr, file, 231, 16, 8259);
		},
		m: function mount(target, anchor) {
			insert_dev(target, tr, anchor);
			append_dev(tr, td0);
			append_dev(td0, t0);
			append_dev(tr, t1);
			append_dev(tr, td1);
			append_dev(td1, t2);
			append_dev(tr, t3);
			append_dev(tr, td2);
			append_dev(td2, t4);
			append_dev(tr, t5);
			append_dev(tr, td3);
			append_dev(td3, t6);
			append_dev(tr, t7);
			append_dev(tr, td4);
			append_dev(td4, t8);
			append_dev(tr, t9);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(tr);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(231:16) {#each distance_3_session as distance, i}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div10;
	let div0;
	let img;
	let img_src_value;
	let t0;
	let div2;
	let div1;
	let t1;
	let t2;
	let div9;
	let div4;
	let h10;
	let t3;
	let t4;
	let div3;
	let t5;
	let div8;
	let h11;
	let t6;
	let t7;
	let div5;
	let table0;
	let caption0;
	let t8;
	let t9;
	let thead0;
	let tr0;
	let th0;
	let t10;
	let t11;
	let th1;
	let t12;
	let t13;
	let th2;
	let t14;
	let t15;
	let th3;
	let t16;
	let t17;
	let tbody0;
	let tr1;
	let td0;
	let t18;
	let t19;
	let td1;
	let t20;
	let t21;
	let td2;
	let t22_value = Math.round(/*average_3_distance*/ ctx[9]) + "";
	let t22;
	let t23;
	let td3;
	let t24;
	let t25;
	let t26;
	let td4;
	let t27_value = round_2_decimal(/*average_10_distance*/ ctx[15]) + "";
	let t27;
	let t28;
	let td5;
	let t29;
	let t30;
	let t31;
	let tr2;
	let td6;
	let t32;
	let t33;
	let td7;
	let t34_value = round_2_decimal(/*last_speed*/ ctx[3]) + "";
	let t34;
	let t35;
	let td8;
	let t36_value = round_2_decimal(/*average_3_speed*/ ctx[11]) + "";
	let t36;
	let t37;
	let td9;
	let t38;
	let t39;
	let t40;
	let td10;
	let t41_value = round_2_decimal(/*average_10_speed*/ ctx[17]) + "";
	let t41;
	let t42;
	let td11;
	let t43;
	let t44;
	let t45;
	let tr3;
	let td12;
	let t46;
	let t47;
	let td13;
	let t48;
	let t49;
	let td14;
	let t50_value = round_2_decimal(/*average_3_sprint*/ ctx[10]) + "";
	let t50;
	let t51;
	let td15;
	let t52;
	let t53;
	let t54;
	let td16;
	let t55_value = round_2_decimal(/*average_10_sprint*/ ctx[16]) + "";
	let t55;
	let t56;
	let td17;
	let t57;
	let t58;
	let t59;
	let div6;
	let table1;
	let caption1;
	let t60;
	let t61;
	let thead1;
	let tr4;
	let th4;
	let t62;
	let t63;
	let th5;
	let t64;
	let t65;
	let th6;
	let t66;
	let t67;
	let th7;
	let t68;
	let t69;
	let th8;
	let t70;
	let t71;
	let tbody1;
	let t72;
	let div7;
	let h12;
	let t73;
	let t74;
	let current;
	let each_value_1 = get_last_nb_sessions(3, /*list_date*/ ctx[1]);
	validate_each_argument(each_value_1);
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	let each_value = /*distance_3_session*/ ctx[5];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const charts = new Swimming_charts({
			props: { data: /*data*/ ctx[0] },
			$$inline: true
		});

	const block = {
		c: function create() {
			div10 = element("div");
			div0 = element("div");
			img = element("img");
			t0 = space();
			div2 = element("div");
			div1 = element("div");
			t1 = text("Swimming Performance");
			t2 = space();
			div9 = element("div");
			div4 = element("div");
			h10 = element("h1");
			t3 = text("Last Sessions");
			t4 = space();
			div3 = element("div");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t5 = space();
			div8 = element("div");
			h11 = element("h1");
			t6 = text("Performance Tables");
			t7 = space();
			div5 = element("div");
			table0 = element("table");
			caption0 = element("caption");
			t8 = text("Performance evolution of main metrics");
			t9 = space();
			thead0 = element("thead");
			tr0 = element("tr");
			th0 = element("th");
			t10 = text("Metrics");
			t11 = space();
			th1 = element("th");
			t12 = text("Value");
			t13 = space();
			th2 = element("th");
			t14 = text("vs. Last 3 sessions");
			t15 = space();
			th3 = element("th");
			t16 = text("vs. Last 10 sessions");
			t17 = space();
			tbody0 = element("tbody");
			tr1 = element("tr");
			td0 = element("td");
			t18 = text("Distance (m)");
			t19 = space();
			td1 = element("td");
			t20 = text(/*last_distance*/ ctx[2]);
			t21 = space();
			td2 = element("td");
			t22 = text(t22_value);
			t23 = space();
			td3 = element("td");
			t24 = text(/*variation_3_distance*/ ctx[12]);
			t25 = text("%");
			t26 = space();
			td4 = element("td");
			t27 = text(t27_value);
			t28 = space();
			td5 = element("td");
			t29 = text(/*variation_10_distance*/ ctx[18]);
			t30 = text("%");
			t31 = space();
			tr2 = element("tr");
			td6 = element("td");
			t32 = text("Speed (km/h)");
			t33 = space();
			td7 = element("td");
			t34 = text(t34_value);
			t35 = space();
			td8 = element("td");
			t36 = text(t36_value);
			t37 = space();
			td9 = element("td");
			t38 = text(/*variation_3_speed*/ ctx[13]);
			t39 = text("%");
			t40 = space();
			td10 = element("td");
			t41 = text(t41_value);
			t42 = space();
			td11 = element("td");
			t43 = text(/*variation_10_speed*/ ctx[19]);
			t44 = text("%");
			t45 = space();
			tr3 = element("tr");
			td12 = element("td");
			t46 = text("Sprints");
			t47 = space();
			td13 = element("td");
			t48 = text(/*last_sprint*/ ctx[4]);
			t49 = space();
			td14 = element("td");
			t50 = text(t50_value);
			t51 = space();
			td15 = element("td");
			t52 = text(/*variation_3_sprint*/ ctx[14]);
			t53 = text("%");
			t54 = space();
			td16 = element("td");
			t55 = text(t55_value);
			t56 = space();
			td17 = element("td");
			t57 = text(/*variation_10_sprint*/ ctx[20]);
			t58 = text("%");
			t59 = space();
			div6 = element("div");
			table1 = element("table");
			caption1 = element("caption");
			t60 = text("Performance of last sessions");
			t61 = space();
			thead1 = element("thead");
			tr4 = element("tr");
			th4 = element("th");
			t62 = text("Date");
			t63 = space();
			th5 = element("th");
			t64 = text("Distance (m)");
			t65 = space();
			th6 = element("th");
			t66 = text("Time (min)");
			t67 = space();
			th7 = element("th");
			t68 = text("Speed (km/h)");
			t69 = space();
			th8 = element("th");
			t70 = text("Sprints");
			t71 = space();
			tbody1 = element("tbody");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t72 = space();
			div7 = element("div");
			h12 = element("h1");
			t73 = text("Performance Chart");
			t74 = space();
			create_component(charts.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div10 = claim_element(nodes, "DIV", { class: true });
			var div10_nodes = children(div10);
			div0 = claim_element(div10_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			img = claim_element(div0_nodes, "IMG", { src: true, alt: true, class: true });
			div0_nodes.forEach(detach_dev);
			t0 = claim_space(div10_nodes);
			div2 = claim_element(div10_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			t1 = claim_text(div1_nodes, "Swimming Performance");
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			t2 = claim_space(div10_nodes);
			div9 = claim_element(div10_nodes, "DIV", { class: true });
			var div9_nodes = children(div9);
			div4 = claim_element(div9_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			h10 = claim_element(div4_nodes, "H1", { class: true });
			var h10_nodes = children(h10);
			t3 = claim_text(h10_nodes, "Last Sessions");
			h10_nodes.forEach(detach_dev);
			t4 = claim_space(div4_nodes);
			div3 = claim_element(div4_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].l(div3_nodes);
			}

			div3_nodes.forEach(detach_dev);
			div4_nodes.forEach(detach_dev);
			t5 = claim_space(div9_nodes);
			div8 = claim_element(div9_nodes, "DIV", { class: true });
			var div8_nodes = children(div8);
			h11 = claim_element(div8_nodes, "H1", { class: true });
			var h11_nodes = children(h11);
			t6 = claim_text(h11_nodes, "Performance Tables");
			h11_nodes.forEach(detach_dev);
			t7 = claim_space(div8_nodes);
			div5 = claim_element(div8_nodes, "DIV", { class: true });
			var div5_nodes = children(div5);
			table0 = claim_element(div5_nodes, "TABLE", { class: true });
			var table0_nodes = children(table0);
			caption0 = claim_element(table0_nodes, "CAPTION", { class: true });
			var caption0_nodes = children(caption0);
			t8 = claim_text(caption0_nodes, "Performance evolution of main metrics");
			caption0_nodes.forEach(detach_dev);
			t9 = claim_space(table0_nodes);
			thead0 = claim_element(table0_nodes, "THEAD", { class: true });
			var thead0_nodes = children(thead0);
			tr0 = claim_element(thead0_nodes, "TR", { class: true });
			var tr0_nodes = children(tr0);
			th0 = claim_element(tr0_nodes, "TH", { class: true });
			var th0_nodes = children(th0);
			t10 = claim_text(th0_nodes, "Metrics");
			th0_nodes.forEach(detach_dev);
			t11 = claim_space(tr0_nodes);
			th1 = claim_element(tr0_nodes, "TH", { class: true });
			var th1_nodes = children(th1);
			t12 = claim_text(th1_nodes, "Value");
			th1_nodes.forEach(detach_dev);
			t13 = claim_space(tr0_nodes);
			th2 = claim_element(tr0_nodes, "TH", { colspan: true, class: true });
			var th2_nodes = children(th2);
			t14 = claim_text(th2_nodes, "vs. Last 3 sessions");
			th2_nodes.forEach(detach_dev);
			t15 = claim_space(tr0_nodes);
			th3 = claim_element(tr0_nodes, "TH", { colspan: true, class: true });
			var th3_nodes = children(th3);
			t16 = claim_text(th3_nodes, "vs. Last 10 sessions");
			th3_nodes.forEach(detach_dev);
			tr0_nodes.forEach(detach_dev);
			thead0_nodes.forEach(detach_dev);
			t17 = claim_space(table0_nodes);
			tbody0 = claim_element(table0_nodes, "TBODY", {});
			var tbody0_nodes = children(tbody0);
			tr1 = claim_element(tbody0_nodes, "TR", {});
			var tr1_nodes = children(tr1);
			td0 = claim_element(tr1_nodes, "TD", { class: true });
			var td0_nodes = children(td0);
			t18 = claim_text(td0_nodes, "Distance (m)");
			td0_nodes.forEach(detach_dev);
			t19 = claim_space(tr1_nodes);
			td1 = claim_element(tr1_nodes, "TD", { class: true });
			var td1_nodes = children(td1);
			t20 = claim_text(td1_nodes, /*last_distance*/ ctx[2]);
			td1_nodes.forEach(detach_dev);
			t21 = claim_space(tr1_nodes);
			td2 = claim_element(tr1_nodes, "TD", { class: true });
			var td2_nodes = children(td2);
			t22 = claim_text(td2_nodes, t22_value);
			td2_nodes.forEach(detach_dev);
			t23 = claim_space(tr1_nodes);
			td3 = claim_element(tr1_nodes, "TD", { class: true });
			var td3_nodes = children(td3);
			t24 = claim_text(td3_nodes, /*variation_3_distance*/ ctx[12]);
			t25 = claim_text(td3_nodes, "%");
			td3_nodes.forEach(detach_dev);
			t26 = claim_space(tr1_nodes);
			td4 = claim_element(tr1_nodes, "TD", { class: true });
			var td4_nodes = children(td4);
			t27 = claim_text(td4_nodes, t27_value);
			td4_nodes.forEach(detach_dev);
			t28 = claim_space(tr1_nodes);
			td5 = claim_element(tr1_nodes, "TD", { class: true });
			var td5_nodes = children(td5);
			t29 = claim_text(td5_nodes, /*variation_10_distance*/ ctx[18]);
			t30 = claim_text(td5_nodes, "%");
			td5_nodes.forEach(detach_dev);
			tr1_nodes.forEach(detach_dev);
			t31 = claim_space(tbody0_nodes);
			tr2 = claim_element(tbody0_nodes, "TR", { class: true });
			var tr2_nodes = children(tr2);
			td6 = claim_element(tr2_nodes, "TD", { class: true });
			var td6_nodes = children(td6);
			t32 = claim_text(td6_nodes, "Speed (km/h)");
			td6_nodes.forEach(detach_dev);
			t33 = claim_space(tr2_nodes);
			td7 = claim_element(tr2_nodes, "TD", { class: true });
			var td7_nodes = children(td7);
			t34 = claim_text(td7_nodes, t34_value);
			td7_nodes.forEach(detach_dev);
			t35 = claim_space(tr2_nodes);
			td8 = claim_element(tr2_nodes, "TD", { class: true });
			var td8_nodes = children(td8);
			t36 = claim_text(td8_nodes, t36_value);
			td8_nodes.forEach(detach_dev);
			t37 = claim_space(tr2_nodes);
			td9 = claim_element(tr2_nodes, "TD", { class: true });
			var td9_nodes = children(td9);
			t38 = claim_text(td9_nodes, /*variation_3_speed*/ ctx[13]);
			t39 = claim_text(td9_nodes, "%");
			td9_nodes.forEach(detach_dev);
			t40 = claim_space(tr2_nodes);
			td10 = claim_element(tr2_nodes, "TD", { class: true });
			var td10_nodes = children(td10);
			t41 = claim_text(td10_nodes, t41_value);
			td10_nodes.forEach(detach_dev);
			t42 = claim_space(tr2_nodes);
			td11 = claim_element(tr2_nodes, "TD", { class: true });
			var td11_nodes = children(td11);
			t43 = claim_text(td11_nodes, /*variation_10_speed*/ ctx[19]);
			t44 = claim_text(td11_nodes, "%");
			td11_nodes.forEach(detach_dev);
			tr2_nodes.forEach(detach_dev);
			t45 = claim_space(tbody0_nodes);
			tr3 = claim_element(tbody0_nodes, "TR", {});
			var tr3_nodes = children(tr3);
			td12 = claim_element(tr3_nodes, "TD", { class: true });
			var td12_nodes = children(td12);
			t46 = claim_text(td12_nodes, "Sprints");
			td12_nodes.forEach(detach_dev);
			t47 = claim_space(tr3_nodes);
			td13 = claim_element(tr3_nodes, "TD", { class: true });
			var td13_nodes = children(td13);
			t48 = claim_text(td13_nodes, /*last_sprint*/ ctx[4]);
			td13_nodes.forEach(detach_dev);
			t49 = claim_space(tr3_nodes);
			td14 = claim_element(tr3_nodes, "TD", { class: true });
			var td14_nodes = children(td14);
			t50 = claim_text(td14_nodes, t50_value);
			td14_nodes.forEach(detach_dev);
			t51 = claim_space(tr3_nodes);
			td15 = claim_element(tr3_nodes, "TD", { class: true });
			var td15_nodes = children(td15);
			t52 = claim_text(td15_nodes, /*variation_3_sprint*/ ctx[14]);
			t53 = claim_text(td15_nodes, "%");
			td15_nodes.forEach(detach_dev);
			t54 = claim_space(tr3_nodes);
			td16 = claim_element(tr3_nodes, "TD", { class: true });
			var td16_nodes = children(td16);
			t55 = claim_text(td16_nodes, t55_value);
			td16_nodes.forEach(detach_dev);
			t56 = claim_space(tr3_nodes);
			td17 = claim_element(tr3_nodes, "TD", { class: true });
			var td17_nodes = children(td17);
			t57 = claim_text(td17_nodes, /*variation_10_sprint*/ ctx[20]);
			t58 = claim_text(td17_nodes, "%");
			td17_nodes.forEach(detach_dev);
			tr3_nodes.forEach(detach_dev);
			tbody0_nodes.forEach(detach_dev);
			table0_nodes.forEach(detach_dev);
			div5_nodes.forEach(detach_dev);
			t59 = claim_space(div8_nodes);
			div6 = claim_element(div8_nodes, "DIV", { class: true });
			var div6_nodes = children(div6);
			table1 = claim_element(div6_nodes, "TABLE", { class: true });
			var table1_nodes = children(table1);
			caption1 = claim_element(table1_nodes, "CAPTION", { class: true });
			var caption1_nodes = children(caption1);
			t60 = claim_text(caption1_nodes, "Performance of last sessions");
			caption1_nodes.forEach(detach_dev);
			t61 = claim_space(table1_nodes);
			thead1 = claim_element(table1_nodes, "THEAD", { class: true });
			var thead1_nodes = children(thead1);
			tr4 = claim_element(thead1_nodes, "TR", { class: true });
			var tr4_nodes = children(tr4);
			th4 = claim_element(tr4_nodes, "TH", { class: true });
			var th4_nodes = children(th4);
			t62 = claim_text(th4_nodes, "Date");
			th4_nodes.forEach(detach_dev);
			t63 = claim_space(tr4_nodes);
			th5 = claim_element(tr4_nodes, "TH", { class: true });
			var th5_nodes = children(th5);
			t64 = claim_text(th5_nodes, "Distance (m)");
			th5_nodes.forEach(detach_dev);
			t65 = claim_space(tr4_nodes);
			th6 = claim_element(tr4_nodes, "TH", { class: true });
			var th6_nodes = children(th6);
			t66 = claim_text(th6_nodes, "Time (min)");
			th6_nodes.forEach(detach_dev);
			t67 = claim_space(tr4_nodes);
			th7 = claim_element(tr4_nodes, "TH", { class: true });
			var th7_nodes = children(th7);
			t68 = claim_text(th7_nodes, "Speed (km/h)");
			th7_nodes.forEach(detach_dev);
			t69 = claim_space(tr4_nodes);
			th8 = claim_element(tr4_nodes, "TH", { class: true });
			var th8_nodes = children(th8);
			t70 = claim_text(th8_nodes, "Sprints");
			th8_nodes.forEach(detach_dev);
			tr4_nodes.forEach(detach_dev);
			thead1_nodes.forEach(detach_dev);
			t71 = claim_space(table1_nodes);
			tbody1 = claim_element(table1_nodes, "TBODY", {});
			var tbody1_nodes = children(tbody1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(tbody1_nodes);
			}

			tbody1_nodes.forEach(detach_dev);
			table1_nodes.forEach(detach_dev);
			div6_nodes.forEach(detach_dev);
			t72 = claim_space(div8_nodes);
			div7 = claim_element(div8_nodes, "DIV", { class: true });
			var div7_nodes = children(div7);
			h12 = claim_element(div7_nodes, "H1", { class: true });
			var h12_nodes = children(h12);
			t73 = claim_text(h12_nodes, "Performance Chart");
			h12_nodes.forEach(detach_dev);
			t74 = claim_space(div7_nodes);
			claim_component(charts.$$.fragment, div7_nodes);
			div7_nodes.forEach(detach_dev);
			div8_nodes.forEach(detach_dev);
			div9_nodes.forEach(detach_dev);
			div10_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = "swimming2.jpg")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "cycling");
			attr_dev(img, "class", "object-cover h-48 w-full shadow rounded-md");
			add_location(img, file, 148, 8, 3969);
			attr_dev(div0, "class", "mb-6 shadow ");
			add_location(div0, file, 147, 4, 3934);
			attr_dev(div1, "class", "font-sans Arial text-center p-2 text-3xl text-blue-700 font-semibold bg-blue-100 px-8 tracking-widest");
			add_location(div1, file, 153, 8, 4185);
			attr_dev(div2, "class", "flex justify-center mb-16 bg-blue-700 border-2 border-gray-300 shadow-lg rounded-t-md");
			add_location(div2, file, 152, 4, 4077);
			attr_dev(h10, "class", "text-blue-800  mb-8 ");
			add_location(h10, file, 160, 8, 4410);
			attr_dev(div3, "class", "italic grid grid-cols-3 divide-x divide-gray-400");
			add_location(div3, file, 162, 8, 4479);
			attr_dev(div4, "class", "pb-8");
			add_location(div4, file, 159, 4, 4383);
			attr_dev(h11, "class", "text-blue-800");
			add_location(h11, file, 170, 8, 4743);
			attr_dev(caption0, "class", "font-semibold mb-6 mt-8 text-xl italic text-blue-700");
			add_location(caption0, file, 173, 12, 4919);
			attr_dev(th0, "class", "px-4 py-2");
			add_location(th0, file, 176, 16, 5168);
			attr_dev(th1, "class", "px-4 py-2");
			add_location(th1, file, 177, 16, 5219);
			attr_dev(th2, "colspan", "2");
			attr_dev(th2, "class", "px-4 py-2 ");
			add_location(th2, file, 178, 16, 5268);
			attr_dev(th3, "colspan", "2");
			attr_dev(th3, "class", "px-4 py-2");
			add_location(th3, file, 179, 16, 5342);
			attr_dev(tr0, "class", "bg-blue-100 border border-gray-300");
			add_location(tr0, file, 175, 16, 5104);
			attr_dev(thead0, "class", "border-gray-300 italic");
			add_location(thead0, file, 174, 12, 5049);
			attr_dev(td0, "class", "border px-4 py-2");
			add_location(td0, file, 184, 16, 5500);
			attr_dev(td1, "class", "border px-4 py-2");
			add_location(td1, file, 185, 16, 5563);
			attr_dev(td2, "class", "border px-4 py-2");
			add_location(td2, file, 186, 16, 5629);
			attr_dev(td3, "class", "border px-4 py-2 svelte-x4tdvp");
			toggle_class(td3, "green", /*variation_3_distance*/ ctx[12] >= 0);
			toggle_class(td3, "red", /*variation_3_distance*/ ctx[12] < 0);
			add_location(td3, file, 187, 16, 5712);
			attr_dev(td4, "class", "border px-4 py-2");
			add_location(td4, file, 188, 16, 5863);
			attr_dev(td5, "class", "border px-4 py-2 svelte-x4tdvp");
			toggle_class(td5, "green", /*variation_10_distance*/ ctx[18] >= 0);
			toggle_class(td5, "red", /*variation_10_distance*/ ctx[18] < 0);
			add_location(td5, file, 189, 16, 5952);
			add_location(tr1, file, 183, 16, 5479);
			attr_dev(td6, "class", "border px-4 py-2");
			add_location(td6, file, 192, 16, 6158);
			attr_dev(td7, "class", "border px-4 py-2");
			add_location(td7, file, 193, 16, 6221);
			attr_dev(td8, "class", "border px-4 py-2");
			add_location(td8, file, 194, 16, 6301);
			attr_dev(td9, "class", "border px-4 py-2 svelte-x4tdvp");
			toggle_class(td9, "green", /*variation_3_speed*/ ctx[13] >= 0);
			toggle_class(td9, "red", /*variation_3_speed*/ ctx[13] < 0);
			add_location(td9, file, 195, 16, 6386);
			attr_dev(td10, "class", "border px-4 py-2");
			add_location(td10, file, 196, 16, 6528);
			attr_dev(td11, "class", "border px-4 py-2 svelte-x4tdvp");
			toggle_class(td11, "green", /*variation_10_speed*/ ctx[19] >= 0);
			toggle_class(td11, "red", /*variation_10_speed*/ ctx[19] < 0);
			add_location(td11, file, 197, 16, 6614);
			attr_dev(tr2, "class", "");
			add_location(tr2, file, 191, 16, 6128);
			attr_dev(td12, "class", "border px-4 py-2");
			add_location(td12, file, 200, 16, 6802);
			attr_dev(td13, "class", "border px-4 py-2");
			add_location(td13, file, 201, 16, 6860);
			attr_dev(td14, "class", "border px-4 py-2");
			add_location(td14, file, 202, 16, 6924);
			attr_dev(td15, "class", "border px-4 py-2 svelte-x4tdvp");
			toggle_class(td15, "green", /*variation_3_sprint*/ ctx[14] >= 0);
			toggle_class(td15, "red", /*variation_3_sprint*/ ctx[14] < 0);
			add_location(td15, file, 203, 16, 7010);
			attr_dev(td16, "class", "border px-4 py-2");
			add_location(td16, file, 204, 16, 7155);
			attr_dev(td17, "class", "border px-4 py-2 svelte-x4tdvp");
			toggle_class(td17, "green", /*variation_10_sprint*/ ctx[20] >= 0);
			toggle_class(td17, "red", /*variation_10_sprint*/ ctx[20] < 0);
			add_location(td17, file, 205, 16, 7242);
			add_location(tr3, file, 199, 16, 6781);
			add_location(tbody0, file, 182, 12, 5455);
			attr_dev(table0, "class", "table-auto text-center container mx-auto");
			add_location(table0, file, 172, 12, 4850);
			attr_dev(div5, "class", "m-12 container mx-auto");
			add_location(div5, file, 171, 8, 4801);
			attr_dev(caption1, "class", "font-semibold mb-6 mt-8 text-xl italic text-blue-700");
			add_location(caption1, file, 216, 12, 7591);
			attr_dev(th4, "class", "px-4 py-2");
			add_location(th4, file, 219, 16, 7842);
			attr_dev(th5, "class", "px-4 py-2");
			add_location(th5, file, 220, 16, 7890);
			attr_dev(th6, "class", "px-4 py-2");
			add_location(th6, file, 221, 16, 7946);
			attr_dev(th7, "class", "px-4 py-2");
			add_location(th7, file, 222, 16, 8000);
			attr_dev(th8, "class", "px-4 py-2");
			add_location(th8, file, 223, 16, 8056);
			attr_dev(tr4, "class", "bg-blue-100 border border-gray-300");
			add_location(tr4, file, 218, 16, 7778);
			attr_dev(thead1, "class", "italic border-gray-300");
			add_location(thead1, file, 217, 12, 7723);
			add_location(tbody1, file, 228, 12, 8164);
			attr_dev(table1, "class", "table-auto text-center container mx-auto");
			add_location(table1, file, 215, 12, 7522);
			attr_dev(div6, "class", "m-12 container mx-auto");
			add_location(div6, file, 214, 8, 7473);
			attr_dev(h12, "class", "text-blue-800 mb-8 mt-16");
			add_location(h12, file, 245, 12, 8814);
			attr_dev(div7, "class", "mt-8");
			add_location(div7, file, 244, 8, 8783);
			attr_dev(div8, "class", "divide-y mt-16");
			add_location(div8, file, 169, 4, 4706);
			attr_dev(div9, "class", "p-8");
			add_location(div9, file, 158, 0, 4361);
			attr_dev(div10, "class", "mb-20");
			add_location(div10, file, 146, 0, 3910);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div10, anchor);
			append_dev(div10, div0);
			append_dev(div0, img);
			append_dev(div10, t0);
			append_dev(div10, div2);
			append_dev(div2, div1);
			append_dev(div1, t1);
			append_dev(div10, t2);
			append_dev(div10, div9);
			append_dev(div9, div4);
			append_dev(div4, h10);
			append_dev(h10, t3);
			append_dev(div4, t4);
			append_dev(div4, div3);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(div3, null);
			}

			append_dev(div9, t5);
			append_dev(div9, div8);
			append_dev(div8, h11);
			append_dev(h11, t6);
			append_dev(div8, t7);
			append_dev(div8, div5);
			append_dev(div5, table0);
			append_dev(table0, caption0);
			append_dev(caption0, t8);
			append_dev(table0, t9);
			append_dev(table0, thead0);
			append_dev(thead0, tr0);
			append_dev(tr0, th0);
			append_dev(th0, t10);
			append_dev(tr0, t11);
			append_dev(tr0, th1);
			append_dev(th1, t12);
			append_dev(tr0, t13);
			append_dev(tr0, th2);
			append_dev(th2, t14);
			append_dev(tr0, t15);
			append_dev(tr0, th3);
			append_dev(th3, t16);
			append_dev(table0, t17);
			append_dev(table0, tbody0);
			append_dev(tbody0, tr1);
			append_dev(tr1, td0);
			append_dev(td0, t18);
			append_dev(tr1, t19);
			append_dev(tr1, td1);
			append_dev(td1, t20);
			append_dev(tr1, t21);
			append_dev(tr1, td2);
			append_dev(td2, t22);
			append_dev(tr1, t23);
			append_dev(tr1, td3);
			append_dev(td3, t24);
			append_dev(td3, t25);
			append_dev(tr1, t26);
			append_dev(tr1, td4);
			append_dev(td4, t27);
			append_dev(tr1, t28);
			append_dev(tr1, td5);
			append_dev(td5, t29);
			append_dev(td5, t30);
			append_dev(tbody0, t31);
			append_dev(tbody0, tr2);
			append_dev(tr2, td6);
			append_dev(td6, t32);
			append_dev(tr2, t33);
			append_dev(tr2, td7);
			append_dev(td7, t34);
			append_dev(tr2, t35);
			append_dev(tr2, td8);
			append_dev(td8, t36);
			append_dev(tr2, t37);
			append_dev(tr2, td9);
			append_dev(td9, t38);
			append_dev(td9, t39);
			append_dev(tr2, t40);
			append_dev(tr2, td10);
			append_dev(td10, t41);
			append_dev(tr2, t42);
			append_dev(tr2, td11);
			append_dev(td11, t43);
			append_dev(td11, t44);
			append_dev(tbody0, t45);
			append_dev(tbody0, tr3);
			append_dev(tr3, td12);
			append_dev(td12, t46);
			append_dev(tr3, t47);
			append_dev(tr3, td13);
			append_dev(td13, t48);
			append_dev(tr3, t49);
			append_dev(tr3, td14);
			append_dev(td14, t50);
			append_dev(tr3, t51);
			append_dev(tr3, td15);
			append_dev(td15, t52);
			append_dev(td15, t53);
			append_dev(tr3, t54);
			append_dev(tr3, td16);
			append_dev(td16, t55);
			append_dev(tr3, t56);
			append_dev(tr3, td17);
			append_dev(td17, t57);
			append_dev(td17, t58);
			append_dev(div8, t59);
			append_dev(div8, div6);
			append_dev(div6, table1);
			append_dev(table1, caption1);
			append_dev(caption1, t60);
			append_dev(table1, t61);
			append_dev(table1, thead1);
			append_dev(thead1, tr4);
			append_dev(tr4, th4);
			append_dev(th4, t62);
			append_dev(tr4, t63);
			append_dev(tr4, th5);
			append_dev(th5, t64);
			append_dev(tr4, t65);
			append_dev(tr4, th6);
			append_dev(th6, t66);
			append_dev(tr4, t67);
			append_dev(tr4, th7);
			append_dev(th7, t68);
			append_dev(tr4, t69);
			append_dev(tr4, th8);
			append_dev(th8, t70);
			append_dev(table1, t71);
			append_dev(table1, tbody1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(tbody1, null);
			}

			append_dev(div8, t72);
			append_dev(div8, div7);
			append_dev(div7, h12);
			append_dev(h12, t73);
			append_dev(div7, t74);
			mount_component(charts, div7, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*list_date*/ 2) {
				each_value_1 = get_last_nb_sessions(3, /*list_date*/ ctx[1]);
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
					} else {
						each_blocks_1[i] = create_each_block_1(child_ctx);
						each_blocks_1[i].c();
						each_blocks_1[i].m(div3, null);
					}
				}

				for (; i < each_blocks_1.length; i += 1) {
					each_blocks_1[i].d(1);
				}

				each_blocks_1.length = each_value_1.length;
			}

			if (dirty[0] & /*variation_3_distance*/ 4096) {
				toggle_class(td3, "green", /*variation_3_distance*/ ctx[12] >= 0);
			}

			if (dirty[0] & /*variation_3_distance*/ 4096) {
				toggle_class(td3, "red", /*variation_3_distance*/ ctx[12] < 0);
			}

			if (dirty[0] & /*variation_10_distance*/ 262144) {
				toggle_class(td5, "green", /*variation_10_distance*/ ctx[18] >= 0);
			}

			if (dirty[0] & /*variation_10_distance*/ 262144) {
				toggle_class(td5, "red", /*variation_10_distance*/ ctx[18] < 0);
			}

			if (dirty[0] & /*variation_3_speed*/ 8192) {
				toggle_class(td9, "green", /*variation_3_speed*/ ctx[13] >= 0);
			}

			if (dirty[0] & /*variation_3_speed*/ 8192) {
				toggle_class(td9, "red", /*variation_3_speed*/ ctx[13] < 0);
			}

			if (dirty[0] & /*variation_10_speed*/ 524288) {
				toggle_class(td11, "green", /*variation_10_speed*/ ctx[19] >= 0);
			}

			if (dirty[0] & /*variation_10_speed*/ 524288) {
				toggle_class(td11, "red", /*variation_10_speed*/ ctx[19] < 0);
			}

			if (dirty[0] & /*variation_3_sprint*/ 16384) {
				toggle_class(td15, "green", /*variation_3_sprint*/ ctx[14] >= 0);
			}

			if (dirty[0] & /*variation_3_sprint*/ 16384) {
				toggle_class(td15, "red", /*variation_3_sprint*/ ctx[14] < 0);
			}

			if (dirty[0] & /*variation_10_sprint*/ 1048576) {
				toggle_class(td17, "green", /*variation_10_sprint*/ ctx[20] >= 0);
			}

			if (dirty[0] & /*variation_10_sprint*/ 1048576) {
				toggle_class(td17, "red", /*variation_10_sprint*/ ctx[20] < 0);
			}

			if (dirty[0] & /*sprint_3_session, distance_3_session, minutes_3_session, date_3_session*/ 480) {
				each_value = /*distance_3_session*/ ctx[5];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(tbody1, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(charts.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(charts.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div10);
			destroy_each(each_blocks_1, detaching);
			destroy_each(each_blocks, detaching);
			destroy_component(charts);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function preload({ params, query }) {
	return this.fetch(`sports/swimming.json`).then(r => r.json()).then(data_raw => {
		return { data_raw };
	});
}

const nb_displayed = 3;

// Sort list of Json by dates (closest dates to last positions)
function custom_sort(a, b) {
	return new Date(a.date).getTime() - new Date(b.date).getTime();
}

function get_last_nb_sessions(int, list) {
	return list.slice(Math.max(list.length - int, 0));
}

function dividevector(a, b) {
	return a.map((e, i) => e / b[i]);
}

function variation(x_new, x_old) {
	const variation = Math.round((x_new - x_old) / x_old * 100);
	return variation;
}

function round_1_decimal(float) {
	return Math.round(float * 10) / 10;
}

function round_2_decimal(float) {
	return Math.round(float * 100) / 100;
}

function instance($$self, $$props, $$invalidate) {
	let { data_raw } = $$props;
	data_raw = data_raw.sort(custom_sort);

	// Compute data for charts
	let list_meters = [];

	let list_date = [];
	let list_sprint = [];
	let list_minutes = [];
	let list_speed = [];

	data_raw.forEach(x => {
		list_meters.push(x.meters);
		list_date.push(x.date);
		list_sprint.push(x.nb_sprint);
		list_minutes.push(x.minutes);
		let speed = x.meters / x.minutes * 0.06;
		list_speed.push(round_2_decimal(speed));
	});

	const data = {
		labels: list_date,
		datasets: [
			{
				label: "Distance",
				yAxisID: "Distance",
				data: list_meters,
				borderColor: "#192E5B",
				fill: false
			},
			{
				label: "Sprints",
				data: list_sprint,
				yAxisID: "Sprints",
				borderColor: "#1D65A6",
				fill: false
			},
			{
				label: "Speed",
				data: list_speed,
				yAxisID: "Speed",
				borderColor: "#72A2C0",
				fill: false
			}
		]
	};

	// TODO: verifiy ordering of dates and sessions
	const average = arr => arr.reduce((p, c) => p + c, 0) / arr.length;

	// TODO: right now including last session, probably should not
	// TODO: colors green or red for variations
	// Compute average distance, speed, sprint, 
	// Last session
	const last_distance = list_meters[list_meters.length - 1];

	const last_hours = list_minutes[list_minutes.length - 1] / 60;
	const last_speed = last_distance / 1000 / last_hours;
	const last_sprint = list_sprint[list_sprint.length - 1];

	// Last 3 sessions
	//const distance_3_session = list_meters.slice(Math.max(list_meters.length - 3, 0))
	const distance_3_session = get_last_nb_sessions(3, list_meters);

	const minutes_3_session = get_last_nb_sessions(3, list_minutes);
	const sprint_3_session = get_last_nb_sessions(3, list_sprint);
	const date_3_session = get_last_nb_sessions(3, list_date);
	const average_3_distance = average(distance_3_session);
	const average_3_sprint = average(sprint_3_session);
	const average_3_speed = average(dividevector(distance_3_session, minutes_3_session)) * 60 / 1000;
	const variation_3_distance = variation(last_distance, average_3_distance);
	const variation_3_speed = variation(last_speed, average_3_speed);
	const variation_3_sprint = variation(last_sprint, average_3_sprint);

	// Last 10 sessions
	const distance_10_session = get_last_nb_sessions(10, list_meters);

	const minutes_10_session = get_last_nb_sessions(10, list_minutes);
	const sprint_10_session = get_last_nb_sessions(10, list_sprint);
	const average_10_distance = average(distance_10_session);
	const average_10_sprint = average(sprint_10_session);
	const average_10_speed = average(dividevector(distance_10_session, minutes_10_session)) * 60 / 1000;
	const variation_10_distance = variation(last_distance, average_10_distance);
	const variation_10_speed = variation(last_speed, average_10_speed);
	const variation_10_sprint = variation(last_sprint, average_10_sprint);
	const writable_props = ["data_raw"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Swimming> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Swimming", $$slots, []);

	$$self.$set = $$props => {
		if ("data_raw" in $$props) $$invalidate(21, data_raw = $$props.data_raw);
	};

	$$self.$capture_state = () => ({
		preload,
		Charts: Swimming_charts,
		data_raw,
		custom_sort,
		get_last_nb_sessions,
		dividevector,
		variation,
		round_1_decimal,
		round_2_decimal,
		list_meters,
		list_date,
		list_sprint,
		list_minutes,
		list_speed,
		data,
		average,
		last_distance,
		last_hours,
		last_speed,
		last_sprint,
		distance_3_session,
		minutes_3_session,
		sprint_3_session,
		date_3_session,
		average_3_distance,
		average_3_sprint,
		average_3_speed,
		variation_3_distance,
		variation_3_speed,
		variation_3_sprint,
		distance_10_session,
		minutes_10_session,
		sprint_10_session,
		average_10_distance,
		average_10_sprint,
		average_10_speed,
		variation_10_distance,
		variation_10_speed,
		variation_10_sprint,
		nb_displayed
	});

	$$self.$inject_state = $$props => {
		if ("data_raw" in $$props) $$invalidate(21, data_raw = $$props.data_raw);
		if ("list_meters" in $$props) list_meters = $$props.list_meters;
		if ("list_date" in $$props) $$invalidate(1, list_date = $$props.list_date);
		if ("list_sprint" in $$props) list_sprint = $$props.list_sprint;
		if ("list_minutes" in $$props) list_minutes = $$props.list_minutes;
		if ("list_speed" in $$props) list_speed = $$props.list_speed;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		data,
		list_date,
		last_distance,
		last_speed,
		last_sprint,
		distance_3_session,
		minutes_3_session,
		sprint_3_session,
		date_3_session,
		average_3_distance,
		average_3_sprint,
		average_3_speed,
		variation_3_distance,
		variation_3_speed,
		variation_3_sprint,
		average_10_distance,
		average_10_sprint,
		average_10_speed,
		variation_10_distance,
		variation_10_speed,
		variation_10_sprint,
		data_raw
	];
}

class Swimming extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { data_raw: 21, data: 0 }, [-1, -1]);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Swimming",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*data_raw*/ ctx[21] === undefined && !("data_raw" in props)) {
			console.warn("<Swimming> was created without expected prop 'data_raw'");
		}
	}

	get data_raw() {
		throw new Error("<Swimming>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set data_raw(value) {
		throw new Error("<Swimming>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get data() {
		return this.$$.ctx[0];
	}

	set data(value) {
		throw new Error("<Swimming>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Swimming;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
