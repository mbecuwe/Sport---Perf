main.svelte-1qqf5bf{position:relative;max-width:72em;background-color:#ebf8ff;padding:0;margin:0 auto;box-sizing:border-box}
h1.svelte-8od9u6,p.svelte-8od9u6{margin:0 auto}h1.svelte-8od9u6{font-size:2.8em;font-weight:700;margin:0 0 0.5em 0}p.svelte-8od9u6{margin:1em auto}@media(min-width: 480px){h1.svelte-8od9u6{font-size:4em}}
.box.svelte-1vpl77v{width:300px;border:1px solid #aaa;border-radius:2px;box-shadow:2px 2px 8px rgba(0,0,0,0.1);padding:1em;margin:0 0 1em 0}
.red.svelte-x4tdvp{color:red}.green.svelte-x4tdvp{color:green}
.red.svelte-x4tdvp{color:red}.green.svelte-x4tdvp{color:green}
.red.svelte-x4tdvp{color:red}.green.svelte-x4tdvp{color:green}
ul.svelte-gm7f4q{margin:0;padding:0}ul.svelte-gm7f4q::after{content:'';display:block;clear:both}li.svelte-gm7f4q{display:block;float:left}[aria-current].svelte-gm7f4q{position:relative;display:inline-block}[aria-current].svelte-gm7f4q::after{position:absolute;content:'';width:calc(100% - 1em);height:2px;background-color:rgb(255,62,0);display:block;bottom:-1px}a.svelte-gm7f4q{text-decoration:none;padding:1em 0.5em;display:block}[aria-current].svelte-gm7f4q::after{position:absolute;content:'';width:calc(100% - 1em);height:2px;background-color:orange;display:block;bottom:-1px}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */