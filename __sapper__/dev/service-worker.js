(function () {
	'use strict';

	// This file is generated by Sapper â€” do not edit it!
	const timestamp = 1591194877946;

	const files = [
		"service-worker-index.html",
		"bycicle.jpg",
		"bycicle2.jpg",
		"bycicle21.jpg",
		"cycling.jpg",
		"favicon.png",
		"fitness.jpg",
		"fitness2.jpg",
		"fitness3.jpg",
		"global.css",
		"logo-192.png",
		"logo-512.png",
		"main.css",
		"manifest.json",
		"running.jpg",
		"running1.jpg",
		"running2.jpg",
		"running3.jpg",
		"successkid.jpg",
		"swimming.jpg",
		"swimming2.jpg",
		"swimming3.jpg",
		"swimming4.jpg",
		"tailwind.css",
		"workout.jpg",
		"workout1.jpg",
		"workout2.jpg",
		"workout3.jpg"
	];

	const shell = [
		"client/client.049d9a08.js",
		"client/index.10bb186d.js",
		"client/frappe-charts.91cbffef.js",
		"client/chart.ae753c49.js",
		"client/_commonjsHelpers.1e235def.js",
		"client/new_cycling.64fc123b.js",
		"client/new_session.03638706.js",
		"client/Box.8866d267.js",
		"client/performance.894e5369.js",
		"client/index.91c8cffe.js",
		"client/[slug].d1193fe8.js",
		"client/chartest.4fbb5976.js",
		"client/Chart.97e39373.js",
		"client/tutorial.e2e27c58.js",
		"client/swimming-charts.2a9c4d4b.js",
		"client/swimming.93c66c14.js",
		"client/cycling-charts.c1882b31.js",
		"client/cycling.28c1fd73.js",
		"client/running-charts.d17afefe.js",
		"client/running.715cc59c.js",
		"client/workout.8c91d114.js",
		"client/about.8e83d0d2.js",
		"client/index.89cc3e78.js",
		"client/[slug].b5f82384.js",
		"client/sapper-dev-client.89e34bae.js"
	];

	const ASSETS = `cache${timestamp}`;

	// `shell` is an array of all the files generated by the bundler,
	// `files` is an array of everything in the `static` directory
	const to_cache = shell.concat(files);
	const cached = new Set(to_cache);

	self.addEventListener('install', event => {
		event.waitUntil(
			caches
				.open(ASSETS)
				.then(cache => cache.addAll(to_cache))
				.then(() => {
					self.skipWaiting();
				})
		);
	});

	self.addEventListener('activate', event => {
		event.waitUntil(
			caches.keys().then(async keys => {
				// delete old caches
				for (const key of keys) {
					if (key !== ASSETS) await caches.delete(key);
				}

				self.clients.claim();
			})
		);
	});

	self.addEventListener('fetch', event => {
		if (event.request.method !== 'GET' || event.request.headers.has('range')) return;

		const url = new URL(event.request.url);

		// don't try to handle e.g. data: URIs
		if (!url.protocol.startsWith('http')) return;

		// ignore dev server requests
		if (url.hostname === self.location.hostname && url.port !== self.location.port) return;

		// always serve static files and bundler-generated assets from cache
		if (url.host === self.location.host && cached.has(url.pathname)) {
			event.respondWith(caches.match(event.request));
			return;
		}

		// for pages, you might want to serve a shell `service-worker-index.html` file,
		// which Sapper has generated for you. It's not right for every
		// app, but if it's right for yours then uncomment this section
		/*
		if (url.origin === self.origin && routes.find(route => route.pattern.test(url.pathname))) {
			event.respondWith(caches.match('/service-worker-index.html'));
			return;
		}
		*/

		if (event.request.cache === 'only-if-cached') return;

		// for everything else, try the network first, falling back to
		// cache if the user is offline. (If the pages never change, you
		// might prefer a cache-first approach to a network-first one.)
		event.respondWith(
			caches
				.open(`offline${timestamp}`)
				.then(async cache => {
					try {
						const response = await fetch(event.request);
						cache.put(event.request, response.clone());
						return response;
					} catch(err) {
						const response = await cache.match(event.request);
						if (response) return response;

						throw err;
					}
				})
		);
	});

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
