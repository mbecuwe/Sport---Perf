(function () {
	'use strict';

	// This file is generated by Sapper â€” do not edit it!
	const timestamp = 1591277832760;

	const files = [
		"service-worker-index.html",
		"bycicle.jpg",
		"bycicle2.jpg",
		"bycicle21.jpg",
		"cycling.jpg",
		"cycling_drawing.jpeg",
		"draw_run.png",
		"favicon.png",
		"fitness.jpg",
		"fitness2.jpg",
		"fitness3.jpg",
		"global.css",
		"logo-192.png",
		"logo-512.png",
		"main.css",
		"manifest.json",
		"running.jpg",
		"running1.jpg",
		"running2.jpg",
		"running3.jpg",
		"running_draw.jpg",
		"running_draw.png",
		"runningdraw.png",
		"successkid.jpg",
		"swimming.jpg",
		"swimming2.jpg",
		"swimming3.jpg",
		"swimming4.jpg",
		"swimming_draw.jpg",
		"tailwind.css",
		"work_hader.jpg",
		"workout.jpg",
		"workout1.jpg",
		"workout2.jpg",
		"workout3.jpg",
		"workout_draw.png",
		"workout_drawing.jpg"
	];

	const shell = [
		"client/client.88b85bb2.js",
		"client/index.c62f6c6d.js",
		"client/frappe-charts.ec6ce4c7.js",
		"client/chart.6c5f16b5.js",
		"client/_commonjsHelpers.1e235def.js",
		"client/new_swimming.86afb5ac.js",
		"client/new_cycling.7d09160a.js",
		"client/new_running.0623f380.js",
		"client/new_workout.c489e284.js",
		"client/new_session.606b6b71.js",
		"client/Box.5c6811be.js",
		"client/performance.06af41aa.js",
		"client/chartest.a5341f1e.js",
		"client/Chart.b2015135.js",
		"client/tutorial.374cb100.js",
		"client/swimming-charts.94de1991.js",
		"client/swimming.e7b3ca34.js",
		"client/cycling-charts.0e1c6617.js",
		"client/cycling.195b68c3.js",
		"client/running-charts.150c228a.js",
		"client/running.3768594c.js",
		"client/workoutpushups-radar.714a559a.js",
		"client/workoutothers-radar.ebea8f2c.js",
		"client/workoutabdo-radar.6a9da344.js",
		"client/workoutlegs-radar.6ef21fb0.js",
		"client/workout-charts.993a6da5.js",
		"client/workout.ef2d01b1.js",
		"client/about.34dcc8fb.js",
		"client/sapper-dev-client.89e34bae.js"
	];

	const ASSETS = `cache${timestamp}`;

	// `shell` is an array of all the files generated by the bundler,
	// `files` is an array of everything in the `static` directory
	const to_cache = shell.concat(files);
	const cached = new Set(to_cache);

	self.addEventListener('install', event => {
		event.waitUntil(
			caches
				.open(ASSETS)
				.then(cache => cache.addAll(to_cache))
				.then(() => {
					self.skipWaiting();
				})
		);
	});

	self.addEventListener('activate', event => {
		event.waitUntil(
			caches.keys().then(async keys => {
				// delete old caches
				for (const key of keys) {
					if (key !== ASSETS) await caches.delete(key);
				}

				self.clients.claim();
			})
		);
	});

	self.addEventListener('fetch', event => {
		if (event.request.method !== 'GET' || event.request.headers.has('range')) return;

		const url = new URL(event.request.url);

		// don't try to handle e.g. data: URIs
		if (!url.protocol.startsWith('http')) return;

		// ignore dev server requests
		if (url.hostname === self.location.hostname && url.port !== self.location.port) return;

		// always serve static files and bundler-generated assets from cache
		if (url.host === self.location.host && cached.has(url.pathname)) {
			event.respondWith(caches.match(event.request));
			return;
		}

		// for pages, you might want to serve a shell `service-worker-index.html` file,
		// which Sapper has generated for you. It's not right for every
		// app, but if it's right for yours then uncomment this section
		/*
		if (url.origin === self.origin && routes.find(route => route.pattern.test(url.pathname))) {
			event.respondWith(caches.match('/service-worker-index.html'));
			return;
		}
		*/

		if (event.request.cache === 'only-if-cached') return;

		// for everything else, try the network first, falling back to
		// cache if the user is offline. (If the pages never change, you
		// might prefer a cache-first approach to a network-first one.)
		event.respondWith(
			caches
				.open(`offline${timestamp}`)
				.then(async cache => {
					try {
						const response = await fetch(event.request);
						cache.put(event.request, response.clone());
						return response;
					} catch(err) {
						const response = await cache.match(event.request);
						if (response) return response;

						throw err;
					}
				})
		);
	});

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
