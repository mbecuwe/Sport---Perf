(function () {
	'use strict';

	// This file is generated by Sapper â€” do not edit it!
	const timestamp = 1592120525367;

	const files = [
		"service-worker-index.html",
		".DS_Store",
		"background4.jpg",
		"bycicle21.jpg",
		"cycling_drawing.jpeg",
		"global.css",
		"index.jpg",
		"main.css",
		"manifest.json",
		"performance.jpg",
		"running1.jpg",
		"runningdraw.png",
		"swimming2.jpg",
		"swimming_draw.jpg",
		"tailwind.css",
		"workout2.jpg",
		"workout3.jpg",
		"workout_3.jpg",
		"workout_draw.png",
		"workout_drawing.jpg",
		"work_hader.jpg"
	];

	const shell = [
		"client/client.3d47c3fc.js",
		"client/index.cd74a2ae.js",
		"client/moment.98d1f4f0.js",
		"client/new_swimming.3e668cc5.js",
		"client/new_cycling.3dae0d8b.js",
		"client/new_running.0d1bdd03.js",
		"client/new_workout.21b0db0f.js",
		"client/new_session.44216b8c.js",
		"client/Box.0abd4aae.js",
		"client/performance.13d64c3e.js",
		"client/tutorial.c7b6fc98.js",
		"client/swimming-charts.beefde6e.js",
		"client/Chart.35ef1681.js",
		"client/swimming.dfe84a90.js",
		"client/cycling-charts.502aeb76.js",
		"client/cycling.ac7fd4b6.js",
		"client/running-charts.c500360d.js",
		"client/running.5aa36f12.js",
		"client/workoutpushups-radar.d99fd413.js",
		"client/workoutothers-radar.75bdb507.js",
		"client/workoutabdo-radar.a7cc2ee1.js",
		"client/workoutlegs-radar.b17faab1.js",
		"client/workout.9e22c341.js",
		"client/about.84864c13.js"
	];

	const ASSETS = `cache${timestamp}`;

	// `shell` is an array of all the files generated by the bundler,
	// `files` is an array of everything in the `static` directory
	const to_cache = shell.concat(files);
	const cached = new Set(to_cache);

	self.addEventListener('install', event => {
		event.waitUntil(
			caches
				.open(ASSETS)
				.then(cache => cache.addAll(to_cache))
				.then(() => {
					self.skipWaiting();
				})
		);
	});

	self.addEventListener('activate', event => {
		event.waitUntil(
			caches.keys().then(async keys => {
				// delete old caches
				for (const key of keys) {
					if (key !== ASSETS) await caches.delete(key);
				}

				self.clients.claim();
			})
		);
	});

	self.addEventListener('fetch', event => {
		if (event.request.method !== 'GET' || event.request.headers.has('range')) return;

		const url = new URL(event.request.url);

		// don't try to handle e.g. data: URIs
		if (!url.protocol.startsWith('http')) return;

		// ignore dev server requests
		if (url.hostname === self.location.hostname && url.port !== self.location.port) return;

		// always serve static files and bundler-generated assets from cache
		if (url.host === self.location.host && cached.has(url.pathname)) {
			event.respondWith(caches.match(event.request));
			return;
		}

		// for pages, you might want to serve a shell `service-worker-index.html` file,
		// which Sapper has generated for you. It's not right for every
		// app, but if it's right for yours then uncomment this section
		/*
		if (url.origin === self.origin && routes.find(route => route.pattern.test(url.pathname))) {
			event.respondWith(caches.match('/service-worker-index.html'));
			return;
		}
		*/

		if (event.request.cache === 'only-if-cached') return;

		// for everything else, try the network first, falling back to
		// cache if the user is offline. (If the pages never change, you
		// might prefer a cache-first approach to a network-first one.)
		event.respondWith(
			caches
				.open(`offline${timestamp}`)
				.then(async cache => {
					try {
						const response = await fetch(event.request);
						cache.put(event.request, response.clone());
						return response;
					} catch(err) {
						const response = await cache.match(event.request);
						if (response) return response;

						throw err;
					}
				})
		);
	});

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
