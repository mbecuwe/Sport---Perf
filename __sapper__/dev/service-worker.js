(function () {
	'use strict';

	// This file is generated by Sapper â€” do not edit it!
	const timestamp = 1591275479732;

	const files = [
		"service-worker-index.html",
		"cycling.jpg",
		"cycling_drawing.jpeg",
		"draw_run.png",
		"favicon.png",
		"global.css",
		"logo-192.png",
		"logo-512.png",
		"main.css",
		"manifest.json",
		"running.jpg",
		"running_draw.jpg",
		"running_draw.png",
		"runningdraw.png",
		"successkid.jpg",
		"swimming.jpg",
		"swimming_draw.jpg",
		"tailwind.css",
		"workout.jpg",
		"workout_draw.png",
		"workout_drawing.jpg"
	];

	const shell = [
		"client/client.12aef6d2.js",
		"client/index.dc7350f2.js",
		"client/frappe-charts.ca9b7f6b.js",
		"client/chart.2d54b9df.js",
		"client/_commonjsHelpers.1e235def.js",
		"client/new_swimming.3fca8739.js",
		"client/new_cycling.7e687d45.js",
		"client/new_running.cf580493.js",
		"client/new_workout.9df80794.js",
		"client/new_session.b1c67a1f.js",
		"client/Box.9bf28dad.js",
		"client/performance.4235e95c.js",
		"client/chartest.6bcf153f.js",
		"client/Chart.b2015135.js",
		"client/tutorial.19f9fe1b.js",
		"client/swimming-charts.e315dd58.js",
		"client/swimming.34d30964.js",
		"client/cycling-charts.ef6b46e5.js",
		"client/cycling.8fce2317.js",
		"client/running-charts.edcd2866.js",
		"client/running.dd0a6009.js",
		"client/workoutpushups-radar.e64feb1a.js",
		"client/workoutothers-radar.e0b1f2e8.js",
		"client/workoutabdo-radar.e2aef71d.js",
		"client/workoutlegs-radar.18f756a2.js",
		"client/workout-charts.6b8fe6a2.js",
		"client/workout.db42abc9.js",
		"client/about.f7594695.js",
		"client/sapper-dev-client.89e34bae.js"
	];

	const ASSETS = `cache${timestamp}`;

	// `shell` is an array of all the files generated by the bundler,
	// `files` is an array of everything in the `static` directory
	const to_cache = shell.concat(files);
	const cached = new Set(to_cache);

	self.addEventListener('install', event => {
		event.waitUntil(
			caches
				.open(ASSETS)
				.then(cache => cache.addAll(to_cache))
				.then(() => {
					self.skipWaiting();
				})
		);
	});

	self.addEventListener('activate', event => {
		event.waitUntil(
			caches.keys().then(async keys => {
				// delete old caches
				for (const key of keys) {
					if (key !== ASSETS) await caches.delete(key);
				}

				self.clients.claim();
			})
		);
	});

	self.addEventListener('fetch', event => {
		if (event.request.method !== 'GET' || event.request.headers.has('range')) return;

		const url = new URL(event.request.url);

		// don't try to handle e.g. data: URIs
		if (!url.protocol.startsWith('http')) return;

		// ignore dev server requests
		if (url.hostname === self.location.hostname && url.port !== self.location.port) return;

		// always serve static files and bundler-generated assets from cache
		if (url.host === self.location.host && cached.has(url.pathname)) {
			event.respondWith(caches.match(event.request));
			return;
		}

		// for pages, you might want to serve a shell `service-worker-index.html` file,
		// which Sapper has generated for you. It's not right for every
		// app, but if it's right for yours then uncomment this section
		/*
		if (url.origin === self.origin && routes.find(route => route.pattern.test(url.pathname))) {
			event.respondWith(caches.match('/service-worker-index.html'));
			return;
		}
		*/

		if (event.request.cache === 'only-if-cached') return;

		// for everything else, try the network first, falling back to
		// cache if the user is offline. (If the pages never change, you
		// might prefer a cache-first approach to a network-first one.)
		event.respondWith(
			caches
				.open(`offline${timestamp}`)
				.then(async cache => {
					try {
						const response = await fetch(event.request);
						cache.put(event.request, response.clone());
						return response;
					} catch(err) {
						const response = await cache.match(event.request);
						if (response) return response;

						throw err;
					}
				})
		);
	});

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
